// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:17

package sqlparser

import __yyfmt__ "fmt"

//line sql.y:19

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const CALL = 57377
const DISTINCTROW = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const SQL_CALC_FOUND_ROWS = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const AT_ID = 57401
const AT_AT_ID = 57402
const HEX = 57403
const STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const LIST_ARG = 57409
const COMMENT = 57410
const COMMENT_KEYWORD = 57411
const BIT_LITERAL = 57412
const NULL = 57413
const TRUE = 57414
const FALSE = 57415
const OFF = 57416
const TRIM = 57417
const LEADING = 57418
const BOTH = 57419
const TRAILING = 57420
const POSITION = 57421
const OR = 57422
const XOR = 57423
const AND = 57424
const NOT = 57425
const BETWEEN = 57426
const CASE = 57427
const WHEN = 57428
const THEN = 57429
const ELSE = 57430
const END = 57431
const LE = 57432
const GE = 57433
const NE = 57434
const NULL_SAFE_EQUAL = 57435
const IS = 57436
const LIKE = 57437
const REGEXP = 57438
const IN = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const UNDERSCORE_UTF8MB4 = 57448
const UNDERSCORE_UTF8 = 57449
const UNDERSCORE_LATIN1 = 57450
const INTERVAL = 57451
const JSON_EXTRACT_OP = 57452
const JSON_UNQUOTE_EXTRACT_OP = 57453
const CREATE = 57454
const ALTER = 57455
const DROP = 57456
const RENAME = 57457
const ANALYZE = 57458
const ADD = 57459
const FLUSH = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const VIEW = 57464
const TO = 57465
const IGNORE = 57466
const IF = 57467
const UNIQUE = 57468
const PRIMARY = 57469
const COLUMN = 57470
const SPATIAL = 57471
const FULLTEXT = 57472
const KEY_BLOCK_SIZE = 57473
const CHECK = 57474
const INDEXES = 57475
const ACTION = 57476
const CASCADE = 57477
const CONSTRAINT = 57478
const FOREIGN = 57479
const NO = 57480
const REFERENCES = 57481
const RESTRICT = 57482
const SHOW = 57483
const DESCRIBE = 57484
const EXPLAIN = 57485
const DATE = 57486
const ESCAPE = 57487
const REPAIR = 57488
const OPTIMIZE = 57489
const TRUNCATE = 57490
const MAXVALUE = 57491
const PARTITION = 57492
const REORGANIZE = 57493
const LESS = 57494
const THAN = 57495
const PROCEDURE = 57496
const TRIGGER = 57497
const VINDEX = 57498
const VINDEXES = 57499
const STATUS = 57500
const VARIABLES = 57501
const WARNINGS = 57502
const SEQUENCE = 57503
const BEGIN = 57504
const START = 57505
const TRANSACTION = 57506
const COMMIT = 57507
const ROLLBACK = 57508
const SAVEPOINT = 57509
const RELEASE = 57510
const WORK = 57511
const BIT = 57512
const TINYINT = 57513
const SMALLINT = 57514
const MEDIUMINT = 57515
const INT = 57516
const INTEGER = 57517
const BIGINT = 57518
const INTNUM = 57519
const REAL = 57520
const DOUBLE = 57521
const FLOAT_TYPE = 57522
const DECIMAL = 57523
const NUMERIC = 57524
const TIME = 57525
const TIMESTAMP = 57526
const DATETIME = 57527
const YEAR = 57528
const CHAR = 57529
const VARCHAR = 57530
const BOOL = 57531
const CHARACTER = 57532
const VARBINARY = 57533
const NCHAR = 57534
const TEXT = 57535
const TINYTEXT = 57536
const MEDIUMTEXT = 57537
const LONGTEXT = 57538
const BLOB = 57539
const TINYBLOB = 57540
const MEDIUMBLOB = 57541
const LONGBLOB = 57542
const JSON = 57543
const ENUM = 57544
const GEOMETRY = 57545
const POINT = 57546
const LINESTRING = 57547
const POLYGON = 57548
const GEOMETRYCOLLECTION = 57549
const MULTIPOINT = 57550
const MULTILINESTRING = 57551
const MULTIPOLYGON = 57552
const NULLX = 57553
const AUTO_INCREMENT = 57554
const APPROXNUM = 57555
const SIGNED = 57556
const UNSIGNED = 57557
const ZEROFILL = 57558
const COLLATION = 57559
const DATABASES = 57560
const TABLES = 57561
const VITESS_METADATA = 57562
const VSCHEMA = 57563
const FULL = 57564
const PROCESSLIST = 57565
const COLUMNS = 57566
const FIELDS = 57567
const ENGINES = 57568
const PLUGINS = 57569
const EXTENDED = 57570
const NAMES = 57571
const CHARSET = 57572
const GLOBAL = 57573
const SESSION = 57574
const ISOLATION = 57575
const LEVEL = 57576
const READ = 57577
const WRITE = 57578
const ONLY = 57579
const REPEATABLE = 57580
const COMMITTED = 57581
const UNCOMMITTED = 57582
const SERIALIZABLE = 57583
const CURRENT_TIMESTAMP = 57584
const DATABASE = 57585
const CURRENT_DATE = 57586
const CURRENT_TIME = 57587
const LOCALTIME = 57588
const LOCALTIMESTAMP = 57589
const UTC_DATE = 57590
const UTC_TIME = 57591
const UTC_TIMESTAMP = 57592
const REPLACE = 57593
const CONVERT = 57594
const CAST = 57595
const SUBSTR = 57596
const SUBSTRING = 57597
const GROUP_CONCAT = 57598
const SEPARATOR = 57599
const TIMESTAMPADD = 57600
const TIMESTAMPDIFF = 57601
const MATCH = 57602
const AGAINST = 57603
const BOOLEAN = 57604
const LANGUAGE = 57605
const WITH = 57606
const QUERY = 57607
const EXPANSION = 57608
const ANY = 57609
const SOME = 57610
const UNUSED = 57611
const ARRAY = 57612
const CUME_DIST = 57613
const DESCRIPTION = 57614
const DENSE_RANK = 57615
const EMPTY = 57616
const EXCEPT = 57617
const FIRST_VALUE = 57618
const GROUPING = 57619
const GROUPS = 57620
const JSON_TABLE = 57621
const LAG = 57622
const LAST_VALUE = 57623
const LATERAL = 57624
const LEAD = 57625
const MEMBER = 57626
const NTH_VALUE = 57627
const NTILE = 57628
const OF = 57629
const OVER = 57630
const PERCENT_RANK = 57631
const RANK = 57632
const RECURSIVE = 57633
const ROW_NUMBER = 57634
const SYSTEM = 57635
const WINDOW = 57636
const ACTIVE = 57637
const ADMIN = 57638
const BUCKETS = 57639
const CLONE = 57640
const COMPONENT = 57641
const DEFINITION = 57642
const ENFORCED = 57643
const EXCLUDE = 57644
const FOLLOWING = 57645
const GEOMCOLLECTION = 57646
const GET_MASTER_PUBLIC_KEY = 57647
const HISTOGRAM = 57648
const HISTORY = 57649
const INACTIVE = 57650
const INVISIBLE = 57651
const LOCKED = 57652
const MASTER_COMPRESSION_ALGORITHMS = 57653
const MASTER_PUBLIC_KEY_PATH = 57654
const MASTER_TLS_CIPHERSUITES = 57655
const MASTER_ZSTD_COMPRESSION_LEVEL = 57656
const NESTED = 57657
const NETWORK_NAMESPACE = 57658
const NOWAIT = 57659
const NULLS = 57660
const OJ = 57661
const OLD = 57662
const OPTIONAL = 57663
const ORDINALITY = 57664
const ORGANIZATION = 57665
const OTHERS = 57666
const PATH = 57667
const PERSIST = 57668
const PERSIST_ONLY = 57669
const PRECEDING = 57670
const PRIVILEGE_CHECKS_USER = 57671
const PROCESS = 57672
const RANDOM = 57673
const REFERENCE = 57674
const REQUIRE_ROW_FORMAT = 57675
const RESOURCE = 57676
const RESPECT = 57677
const RESTART = 57678
const RETAIN = 57679
const REUSE = 57680
const ROLE = 57681
const SECONDARY = 57682
const SECONDARY_ENGINE = 57683
const SECONDARY_LOAD = 57684
const SECONDARY_UNLOAD = 57685
const SKIP = 57686
const SRID = 57687
const THREAD_PRIORITY = 57688
const TIES = 57689
const UNBOUNDED = 57690
const VCPU = 57691
const VISIBLE = 57692
const FORMAT = 57693
const TREE = 57694
const VITESS = 57695
const TRADITIONAL = 57696

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"TRIM",
	"LEADING",
	"BOTH",
	"TRAILING",
	"POSITION",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ANY",
	"SOME",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	33, 310,
	138, 310,
	150, 310,
	175, 324,
	176, 324,
	-2, 312,
	-1, 49,
	140, 333,
	-2, 331,
	-1, 73,
	39, 369,
	-2, 377,
	-1, 396,
	126, 711,
	-2, 707,
	-1, 397,
	126, 712,
	-2, 708,
	-1, 414,
	39, 370,
	-2, 382,
	-1, 415,
	39, 371,
	-2, 383,
	-1, 438,
	94, 967,
	-2, 77,
	-1, 439,
	94, 883,
	-2, 78,
	-1, 444,
	94, 850,
	-2, 673,
	-1, 446,
	94, 914,
	-2, 675,
	-1, 776,
	57, 57,
	59, 57,
	-2, 61,
	-1, 952,
	126, 714,
	-2, 710,
	-1, 1396,
	5, 632,
	17, 632,
	19, 632,
	31, 632,
	60, 632,
	-2, 408,
}

const yyPrivate = 57344

const yyLast = 18559

var yyAct = [...]int{
	396, 1640, 1630, 1435, 1597, 1319, 1224, 1512, 1546, 364,
	1244, 1376, 1064, 697, 350, 1499, 1409, 1037, 72, 3,
	1060, 1373, 1377, 743, 1107, 1270, 1225, 1063, 1388, 602,
	1073, 335, 1382, 1093, 398, 750, 321, 1212, 1338, 1158,
	93, 895, 1296, 443, 287, 775, 307, 287, 407, 876,
	1287, 93, 1034, 287, 1077, 946, 789, 1039, 769, 330,
	399, 753, 1023, 918, 770, 70, 748, 611, 416, 788,
	972, 1103, 326, 68, 333, 401, 337, 571, 29, 287,
	93, 1016, 437, 760, 572, 287, 778, 287, 432, 285,
	904, 322, 429, 67, 325, 716, 7, 6, 317, 5,
	591, 1633, 1126, 715, 1617, 949, 73, 1628, 1605, 1625,
	1436, 1616, 1355, 1604, 1465, 576, 1125, 1404, 1405, 1403,
	283, 279, 280, 281, 431, 1054, 631, 95, 96, 97,
	573, 324, 575, 275, 1055, 1056, 273, 422, 277, 75,
	76, 77, 78, 79, 80, 323, 1278, 402, 95, 96,
	97, 613, 31, 1086, 61, 34, 35, 1502, 790, 1124,
	791, 1572, 659, 658, 668, 669, 661, 662, 663, 664,
	665, 666, 667, 660, 1321, 381, 670, 387, 388, 385,
	386, 384, 383, 382, 1258, 1094, 1456, 1257, 630, 626,
	1259, 389, 390, 627, 624, 625, 95, 96, 97, 1454,
	314, 903, 316, 608, 60, 610, 568, 865, 619, 620,
	629, 864, 1323, 862, 1627, 1624, 1598, 1121, 1118, 1119,
	1318, 1117, 1017, 1339, 1590, 1078, 1648, 616, 1245, 1247,
	1322, 440, 592, 1306, 578, 276, 1547, 607, 609, 1315,
	277, 905, 906, 907, 282, 1317, 1324, 863, 866, 1644,
	869, 1549, 633, 1080, 1128, 1131, 1080, 274, 853, 1399,
	1398, 1397, 1555, 574, 1341, 581, 1302, 1303, 1304, 290,
	278, 682, 683, 1177, 287, 583, 584, 1174, 1579, 287,
	1087, 593, 1482, 1254, 1217, 287, 95, 96, 97, 1192,
	1138, 287, 600, 1137, 1123, 606, 93, 1166, 784, 764,
	93, 1343, 93, 1347, 695, 1342, 598, 1340, 93, 95,
	96, 97, 1345, 588, 1061, 1246, 1122, 93, 93, 582,
	660, 1344, 670, 670, 590, 1050, 605, 1548, 896, 900,
	597, 925, 615, 890, 1346, 1348, 599, 639, 1573, 1603,
	1190, 996, 1094, 1305, 617, 923, 924, 922, 1310, 1307,
	1298, 1308, 1301, 604, 1297, 1316, 1127, 1314, 1299, 1300,
	644, 645, 650, 1079, 1588, 823, 1079, 618, 1422, 621,
	1564, 1642, 1309, 1129, 1643, 632, 1641, 1556, 1554, 648,
	649, 647, 594, 595, 596, 1386, 585, 1359, 586, 682,
	683, 587, 792, 682, 683, 649, 647, 650, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 738, 680,
	83, 1357, 650, 855, 62, 642, 640, 643, 641, 973,
	1276, 897, 741, 647, 577, 93, 891, 287, 287, 287,
	663, 664, 665, 666, 667, 660, 93, 740, 670, 650,
	1593, 757, 93, 603, 698, 973, 1608, 1184, 1508, 1507,
	706, 707, 708, 411, 84, 811, 659, 658, 668, 669,
	661, 662, 663, 664, 665, 666, 667, 660, 1291, 1290,
	670, 1083, 767, 1279, 776, 95, 96, 97, 719, 721,
	768, 725, 727, 1084, 730, 754, 718, 720, 722, 724,
	726, 728, 729, 1151, 1152, 1153, 824, 1649, 659, 658,
	668, 669, 661, 662, 663, 664, 665, 666, 667, 660,
	1610, 742, 670, 1159, 579, 580, 570, 782, 787, 752,
	1589, 777, 837, 840, 841, 842, 843, 844, 845, 1525,
	846, 847, 848, 849, 850, 825, 826, 827, 828, 809,
	810, 838, 1650, 812, 1505, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 829, 830, 831, 832, 833,
	834, 835, 836, 661, 662, 663, 664, 665, 666, 667,
	660, 287, 1288, 670, 60, 851, 93, 1148, 854, 272,
	856, 287, 287, 93, 93, 93, 921, 440, 881, 287,
	411, 1172, 287, 1171, 1385, 287, 874, 875, 69, 287,
	998, 93, 1561, 913, 915, 916, 93, 93, 93, 287,
	93, 93, 1552, 1626, 839, 914, 801, 648, 649, 647,
	93, 93, 95, 96, 97, 1560, 857, 858, 648, 649,
	647, 880, 1001, 1002, 867, 650, 1374, 431, 798, 1385,
	873, 997, 878, 852, 1612, 411, 650, 1418, 1552, 1601,
	859, 860, 861, 411, 886, 1081, 426, 427, 95, 96,
	97, 1213, 400, 919, 1478, 648, 649, 647, 879, 1552,
	411, 399, 646, 883, 884, 885, 1563, 887, 888, 1426,
	942, 1552, 1580, 650, 870, 1020, 1173, 892, 893, 1552,
	1551, 648, 649, 647, 93, 668, 669, 661, 662, 663,
	664, 665, 666, 667, 660, 941, 1262, 670, 1020, 650,
	1497, 1496, 917, 1484, 411, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	920, 1053, 93, 93, 956, 961, 964, 1481, 411, 952,
	95, 96, 97, 1195, 1261, 951, 981, 648, 649, 647,
	1428, 1427, 93, 1424, 1425, 1424, 1423, 943, 944, 287,
	698, 31, 93, 1009, 411, 650, 1194, 287, 1020, 411,
	953, 780, 976, 646, 411, 287, 287, 985, 780, 287,
	287, 800, 799, 287, 287, 287, 93, 975, 980, 993,
	989, 990, 1533, 1035, 1213, 1044, 71, 779, 1019, 1003,
	93, 572, 1009, 1010, 1012, 957, 958, 779, 952, 963,
	966, 967, 1018, 60, 1015, 999, 868, 781, 1320, 783,
	95, 96, 97, 1011, 781, 1046, 779, 1020, 878, 31,
	785, 1045, 404, 60, 1618, 1047, 1514, 31, 1088, 988,
	1009, 1385, 991, 992, 1489, 1013, 1108, 950, 1095, 1096,
	1097, 1009, 1080, 1219, 287, 93, 1052, 93, 1043, 1130,
	1220, 1414, 1265, 287, 287, 287, 287, 287, 1051, 287,
	287, 1104, 1048, 287, 93, 1109, 1389, 1390, 1068, 291,
	1099, 60, 1395, 1098, 60, 95, 96, 97, 294, 60,
	287, 1515, 1111, 1635, 1631, 287, 301, 287, 287, 1112,
	1416, 1186, 287, 93, 1392, 1374, 1292, 901, 1132, 1133,
	1134, 1135, 1136, 872, 1139, 1140, 950, 1394, 1141, 1105,
	1106, 1236, 1113, 1234, 1115, 1145, 1237, 1233, 1235, 1232,
	299, 1238, 919, 1029, 1030, 1143, 306, 440, 751, 1622,
	1144, 1142, 1025, 1028, 1029, 1030, 1026, 1149, 1027, 1031,
	1615, 1065, 1389, 1390, 353, 352, 355, 356, 357, 358,
	1367, 1202, 1079, 354, 359, 1620, 292, 1076, 1074, 1211,
	1075, 353, 352, 355, 356, 357, 358, 1072, 1078, 1210,
	354, 359, 1283, 1155, 1156, 1157, 1154, 797, 744, 601,
	1275, 1595, 1594, 303, 295, 969, 304, 305, 311, 920,
	745, 1531, 296, 298, 308, 1168, 293, 310, 309, 1273,
	970, 287, 1025, 1028, 1029, 1030, 1026, 1201, 1027, 1031,
	1267, 287, 287, 287, 287, 287, 1476, 1206, 1510, 1167,
	1114, 871, 402, 287, 1033, 1221, 408, 287, 405, 406,
	1209, 287, 1183, 1475, 409, 287, 417, 71, 1208, 1187,
	1474, 1226, 1370, 1163, 1164, 1243, 1213, 628, 1637, 1636,
	1637, 418, 1260, 1215, 93, 1361, 1205, 1188, 755, 756,
	420, 1214, 419, 1266, 1181, 397, 1263, 1271, 1271, 1227,
	1216, 1250, 1230, 1252, 1178, 1253, 1228, 1229, 1175, 1231,
	1089, 1090, 1091, 1092, 1239, 894, 758, 1251, 1249, 1577,
	1503, 995, 404, 1272, 69, 74, 1100, 1101, 1102, 66,
	1255, 1, 93, 93, 1282, 94, 1284, 1285, 1286, 288,
	1629, 417, 288, 1280, 1281, 1437, 94, 1511, 288, 1120,
	1268, 1269, 1596, 1545, 1408, 1071, 418, 1062, 82, 569,
	81, 1587, 93, 414, 415, 420, 889, 419, 614, 1070,
	1289, 1069, 1553, 1295, 288, 94, 1501, 1082, 1277, 1085,
	288, 1311, 288, 1415, 1274, 1592, 806, 93, 804, 805,
	803, 808, 807, 399, 802, 300, 435, 902, 313, 1032,
	1294, 793, 1110, 759, 85, 1326, 1327, 1313, 1312, 1116,
	899, 297, 1337, 622, 623, 1328, 302, 678, 1207, 1256,
	441, 434, 1380, 1336, 1000, 747, 1473, 1349, 287, 1325,
	1369, 1182, 1350, 710, 971, 1065, 773, 1356, 93, 1330,
	1331, 1334, 336, 93, 93, 912, 1375, 351, 348, 349,
	1378, 1004, 1218, 652, 1351, 1352, 952, 1353, 1354, 334,
	974, 328, 951, 772, 765, 1024, 1360, 1022, 1362, 93,
	1363, 1226, 1021, 1368, 1365, 1366, 430, 1391, 1387, 1393,
	771, 1008, 1384, 93, 413, 93, 93, 1464, 1571, 1271,
	1271, 412, 968, 52, 635, 318, 33, 1407, 421, 23,
	22, 1400, 21, 20, 1421, 19, 1401, 25, 18, 1402,
	1406, 17, 16, 287, 1412, 1413, 589, 1411, 38, 28,
	27, 1419, 1420, 26, 15, 14, 13, 12, 11, 9,
	10, 8, 4, 287, 638, 24, 696, 2, 1335, 93,
	0, 1438, 93, 93, 93, 287, 0, 0, 0, 0,
	0, 0, 0, 1430, 0, 1417, 0, 0, 1429, 0,
	0, 0, 0, 0, 1364, 0, 0, 0, 1431, 288,
	1433, 0, 0, 0, 288, 0, 1443, 1444, 1432, 0,
	288, 0, 0, 0, 0, 0, 288, 0, 1452, 1335,
	1442, 94, 0, 0, 0, 94, 0, 94, 0, 0,
	0, 0, 0, 94, 0, 1447, 0, 0, 0, 1445,
	984, 0, 94, 94, 0, 0, 0, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	365, 30, 1486, 0, 1065, 93, 1065, 1226, 0, 1263,
	1485, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 30, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 1518, 0, 0, 0, 0, 0, 1504, 0, 1506,
	0, 0, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 1516, 0, 0, 0, 0, 0, 0, 0, 403,
	0, 0, 93, 93, 1517, 93, 0, 0, 1378, 1530,
	93, 0, 93, 93, 93, 287, 0, 1509, 93, 1534,
	94, 1532, 288, 288, 288, 1539, 0, 1540, 1542, 1543,
	0, 94, 1544, 1524, 1550, 93, 287, 94, 1557, 1519,
	1520, 1521, 1522, 1523, 0, 1558, 0, 1559, 0, 0,
	1565, 1527, 1528, 0, 1538, 0, 0, 0, 0, 0,
	0, 0, 0, 1378, 0, 1578, 0, 0, 1586, 0,
	0, 0, 0, 93, 1585, 1584, 0, 0, 1065, 0,
	0, 1566, 0, 0, 93, 93, 0, 0, 0, 0,
	0, 1599, 0, 0, 0, 0, 0, 1600, 0, 0,
	93, 0, 0, 0, 1606, 0, 0, 0, 1513, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 424, 0, 0, 0, 1614, 0, 1226,
	0, 0, 0, 0, 0, 0, 0, 1619, 1621, 93,
	1449, 1450, 0, 1451, 0, 0, 1453, 0, 1455, 0,
	0, 0, 1634, 0, 1623, 0, 1609, 0, 0, 1645,
	0, 0, 0, 0, 0, 0, 288, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 288, 288, 94, 94,
	94, 0, 327, 0, 288, 0, 0, 288, 0, 0,
	288, 0, 0, 0, 288, 0, 94, 0, 0, 0,
	0, 94, 94, 94, 288, 94, 94, 0, 0, 0,
	0, 1498, 1638, 0, 0, 94, 94, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 612, 0, 0, 0,
	612, 0, 612, 0, 0, 1513, 1065, 0, 612, 0,
	31, 32, 61, 34, 35, 0, 0, 0, 0, 30,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 0, 679, 681, 36, 55, 56, 0, 58, 59,
	659, 658, 668, 669, 661, 662, 663, 664, 665, 666,
	667, 660, 0, 0, 670, 0, 0, 0, 46, 94,
	0, 0, 60, 694, 0, 0, 0, 699, 700, 701,
	702, 703, 704, 705, 681, 681, 681, 709, 0, 712,
	713, 714, 717, 717, 717, 723, 717, 717, 723, 717,
	731, 732, 733, 734, 735, 736, 737, 94, 94, 739,
	0, 0, 0, 0, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 94, 0, 0,
	0, 0, 0, 0, 288, 1471, 0, 94, 774, 0,
	0, 0, 288, 39, 40, 42, 41, 44, 0, 57,
	288, 288, 0, 0, 288, 288, 0, 0, 288, 288,
	288, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 64, 63, 94, 0, 53, 54, 43,
	0, 659, 658, 668, 669, 661, 662, 663, 664, 665,
	666, 667, 660, 47, 37, 670, 48, 49, 50, 51,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	362, 659, 658, 668, 669, 661, 662, 663, 664, 665,
	666, 667, 660, 0, 0, 670, 0, 0, 0, 288,
	94, 0, 94, 651, 0, 0, 0, 0, 288, 288,
	288, 288, 288, 0, 288, 288, 0, 0, 288, 94,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 288, 0, 0, 0, 327,
	288, 0, 288, 288, 1461, 0, 1329, 288, 94, 0,
	0, 711, 62, 0, 0, 0, 612, 0, 0, 0,
	442, 0, 0, 612, 612, 612, 659, 658, 668, 669,
	661, 662, 663, 664, 665, 666, 667, 660, 0, 0,
	670, 612, 746, 749, 0, 0, 612, 612, 612, 0,
	612, 612, 0, 0, 654, 0, 657, 0, 0, 0,
	612, 612, 671, 672, 673, 674, 675, 676, 677, 0,
	655, 656, 653, 659, 658, 668, 669, 661, 662, 663,
	664, 665, 666, 667, 660, 1460, 0, 670, 0, 0,
	659, 658, 668, 669, 661, 662, 663, 664, 665, 666,
	667, 660, 1459, 0, 670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 954, 955, 0,
	0, 0, 0, 0, 0, 0, 288, 288, 288, 288,
	288, 0, 0, 0, 0, 0, 0, 0, 288, 0,
	0, 0, 288, 0, 0, 0, 288, 0, 0, 0,
	288, 658, 668, 669, 661, 662, 663, 664, 665, 666,
	667, 660, 994, 0, 670, 0, 0, 0, 0, 94,
	0, 659, 658, 668, 669, 661, 662, 663, 664, 665,
	666, 667, 660, 0, 0, 670, 0, 0, 659, 658,
	668, 669, 661, 662, 663, 664, 665, 666, 667, 660,
	0, 0, 670, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1036, 0, 94, 94, 774,
	0, 0, 0, 774, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 882, 0,
	442, 0, 442, 0, 0, 0, 0, 94, 442, 0,
	0, 0, 0, 0, 0, 0, 0, 634, 636, 0,
	0, 0, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 1160, 0,
	908, 909, 910, 911, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 612, 0, 612, 659, 658,
	668, 669, 661, 662, 663, 664, 665, 666, 667, 660,
	0, 0, 670, 288, 612, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 94, 94,
	0, 0, 0, 0, 0, 959, 960, 659, 658, 668,
	669, 661, 662, 663, 664, 665, 666, 667, 660, 0,
	0, 670, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 1161, 0, 762, 0, 1162, 94, 0,
	94, 94, 0, 327, 0, 0, 442, 0, 1169, 1170,
	0, 0, 794, 0, 1176, 0, 0, 1179, 1180, 0,
	0, 1165, 0, 0, 403, 0, 0, 1189, 288, 0,
	0, 0, 1191, 0, 0, 0, 1193, 0, 0, 1196,
	1197, 1198, 1199, 1200, 0, 0, 0, 0, 288, 0,
	0, 0, 0, 0, 94, 0, 1059, 94, 94, 94,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 774, 0, 0, 0, 1241, 1242, 1222, 1223, 0,
	0, 774, 774, 774, 774, 774, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1036, 0, 1248,
	0, 0, 0, 0, 0, 774, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 442, 0, 0, 0,
	94, 0, 0, 442, 442, 442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 442, 94, 0, 0, 0, 442, 442, 442, 0,
	442, 442, 0, 612, 0, 0, 0, 0, 0, 0,
	442, 442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 612, 0, 1332, 1333, 0, 94, 94, 0,
	94, 0, 0, 0, 0, 94, 0, 94, 94, 94,
	288, 0, 0, 94, 0, 0, 0, 1185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1203, 1204, 749, 945, 0, 442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 94, 0,
	0, 1379, 0, 30, 1396, 0, 0, 0, 0, 94,
	94, 0, 986, 987, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 1005, 0, 0, 0, 288, 0, 0, 0,
	0, 0, 762, 0, 94, 442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 1469, 1470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 442, 1463, 442, 0, 0,
	1479, 1480, 0, 1483, 0, 0, 0, 363, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 1358, 0,
	0, 1494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1491, 1492,
	1493, 0, 0, 1150, 0, 0, 0, 1371, 0, 0,
	0, 286, 0, 0, 312, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 425, 0, 0, 433, 0, 0, 1526,
	0, 0, 286, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1541, 0, 0, 0, 0, 0, 0, 1379,
	0, 30, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1567, 1568, 1569, 1570, 0, 1574, 0, 0, 1575, 1576,
	0, 1562, 0, 0, 0, 0, 0, 0, 0, 0,
	982, 1581, 0, 1582, 1583, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1602, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 0, 1611, 0, 0,
	1487, 0, 0, 1488, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1293, 442, 0, 0, 0, 0, 0, 1646,
	1647, 0, 0, 0, 0, 0, 0, 0, 1632, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 442, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 442, 1529, 327,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	982, 0, 0, 1381, 1383, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1383,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 442, 0, 442, 1410, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 286, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 0, 0, 442, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 286,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 286,
	0, 0, 286, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 1535, 1536, 0, 1537, 0, 0, 0, 0,
	1500, 0, 1500, 1500, 1500, 0, 0, 0, 1410, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1591, 0, 0, 0, 0, 0, 0,
	0, 0, 425, 877, 442, 442, 0, 425, 425, 0,
	0, 425, 425, 425, 0, 0, 0, 0, 982, 0,
	1607, 0, 983, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1613,
	0, 425, 425, 425, 425, 425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 877, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 286, 1041, 0, 0, 286, 286, 0, 0,
	286, 1049, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 286, 286, 286, 286, 0, 286, 286, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 286, 0, 1146, 1147, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 425, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 425, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 286, 286,
	286, 286, 286, 0, 0, 0, 0, 0, 0, 0,
	1240, 0, 0, 0, 286, 0, 0, 0, 1041, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1041, 0, 0, 0, 0, 0, 554, 542,
	0, 497, 557, 470, 487, 565, 488, 491, 530, 455,
	510, 184, 485, 286, 474, 450, 481, 451, 472, 499,
	127, 503, 469, 544, 513, 556, 156, 0, 0, 475,
	563, 158, 521, 0, 231, 172, 0, 0, 0, 501,
	546, 508, 539, 496, 531, 460, 520, 558, 486, 528,
	559, 0, 0, 0, 95, 96, 97, 0, 1066, 1067,
	0, 0, 0, 0, 0, 117, 0, 525, 553, 483,
	527, 0, 0, 0, 0, 983, 529, 567, 449, 522,
	0, 453, 456, 564, 549, 478, 479, 1264, 286, 0,
	0, 0, 0, 0, 500, 509, 536, 494, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 0, 519, 0,
	0, 0, 457, 454, 0, 0, 0, 0, 498, 0,
	0, 0, 459, 0, 477, 537, 0, 447, 136, 541,
	548, 495, 289, 552, 493, 492, 555, 203, 0, 235,
	140, 155, 113, 152, 99, 109, 0, 138, 181, 211,
	215, 545, 473, 482, 121, 480, 213, 191, 252, 518,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	267, 228, 102, 237, 249, 118, 223, 0, 0, 0,
	104, 247, 234, 170, 149, 150, 103, 0, 209, 126,
	134, 123, 183, 244, 245, 122, 270, 110, 258, 106,
	111, 257, 177, 240, 248, 171, 164, 105, 246, 169,
	163, 154, 130, 142, 201, 161, 202, 143, 174, 173,
	175, 0, 452, 0, 232, 255, 271, 115, 468, 239,
	265, 266, 0, 205, 116, 135, 129, 200, 133, 176,
	112, 145, 229, 153, 160, 208, 269, 190, 214, 119,
	254, 230, 464, 467, 462, 463, 511, 512, 560, 561,
	562, 538, 458, 0, 465, 466, 0, 543, 550, 551,
	515, 98, 107, 157, 268, 206, 132, 516, 517, 256,
	448, 461, 125, 471, 0, 0, 484, 489, 490, 502,
	504, 505, 506, 507, 514, 523, 524, 526, 532, 533,
	534, 535, 540, 547, 566, 100, 101, 108, 114, 120,
	124, 128, 131, 137, 141, 144, 146, 147, 148, 151,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 139, 250, 264, 554, 542, 0, 497, 557, 470,
	487, 565, 488, 491, 530, 455, 510, 184, 485, 0,
	474, 450, 481, 451, 472, 499, 127, 503, 469, 544,
	513, 556, 156, 0, 0, 475, 563, 158, 521, 0,
	231, 172, 0, 0, 0, 501, 546, 508, 539, 496,
	531, 460, 520, 558, 486, 528, 559, 0, 0, 0,
	95, 96, 97, 0, 1066, 1067, 0, 0, 0, 0,
	0, 117, 0, 525, 553, 483, 527, 0, 0, 0,
	0, 0, 529, 567, 449, 522, 0, 453, 456, 564,
	549, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	500, 509, 536, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 0, 519, 0, 0, 0, 457, 454,
	0, 0, 0, 0, 498, 0, 0, 0, 459, 0,
	477, 537, 0, 447, 136, 541, 548, 495, 289, 552,
	493, 492, 555, 203, 0, 235, 140, 155, 113, 152,
	99, 109, 0, 138, 181, 211, 215, 545, 473, 482,
	121, 480, 213, 191, 252, 518, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 267, 228, 102, 237,
	249, 118, 223, 0, 0, 0, 104, 247, 234, 170,
	149, 150, 103, 0, 209, 126, 134, 123, 183, 244,
	245, 122, 270, 110, 258, 106, 111, 257, 177, 240,
	248, 171, 164, 105, 246, 169, 163, 154, 130, 142,
	201, 161, 202, 143, 174, 173, 175, 0, 452, 0,
	232, 255, 271, 115, 468, 239, 265, 266, 0, 205,
	116, 135, 129, 200, 133, 176, 112, 145, 229, 153,
	160, 208, 269, 190, 214, 119, 254, 230, 464, 467,
	462, 463, 511, 512, 560, 561, 562, 538, 458, 0,
	465, 466, 0, 543, 550, 551, 515, 98, 107, 157,
	268, 206, 132, 516, 517, 256, 448, 461, 125, 471,
	0, 0, 484, 489, 490, 502, 504, 505, 506, 507,
	514, 523, 524, 526, 532, 533, 534, 535, 540, 547,
	566, 100, 101, 108, 114, 120, 124, 128, 131, 137,
	141, 144, 146, 147, 148, 151, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 139, 250, 264,
	554, 542, 0, 497, 557, 470, 487, 565, 488, 491,
	530, 455, 510, 184, 485, 0, 474, 450, 481, 451,
	472, 499, 127, 503, 469, 544, 513, 556, 156, 0,
	0, 475, 563, 158, 521, 0, 231, 172, 0, 0,
	0, 501, 546, 508, 539, 496, 531, 460, 520, 558,
	486, 528, 559, 60, 0, 0, 95, 96, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 525,
	553, 483, 527, 0, 0, 0, 0, 0, 529, 567,
	449, 522, 0, 453, 456, 564, 549, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 500, 509, 536, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 0,
	519, 0, 0, 0, 457, 454, 0, 0, 0, 0,
	498, 0, 0, 0, 459, 0, 477, 537, 0, 447,
	136, 541, 548, 495, 289, 552, 493, 492, 555, 203,
	0, 235, 140, 155, 113, 152, 99, 109, 0, 138,
	181, 211, 215, 545, 473, 482, 121, 480, 213, 191,
	252, 518, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 267, 228, 102, 237, 249, 118, 223, 0,
	0, 0, 104, 247, 234, 170, 149, 150, 103, 0,
	209, 126, 134, 123, 183, 244, 245, 122, 270, 110,
	258, 106, 111, 257, 177, 240, 248, 171, 164, 105,
	246, 169, 163, 154, 130, 142, 201, 161, 202, 143,
	174, 173, 175, 0, 452, 0, 232, 255, 271, 115,
	468, 239, 265, 266, 0, 205, 116, 135, 129, 200,
	133, 176, 112, 145, 229, 153, 160, 208, 269, 190,
	214, 119, 254, 230, 464, 467, 462, 463, 511, 512,
	560, 561, 562, 538, 458, 0, 465, 466, 0, 543,
	550, 551, 515, 98, 107, 157, 268, 206, 132, 516,
	517, 256, 448, 461, 125, 471, 0, 0, 484, 489,
	490, 502, 504, 505, 506, 507, 514, 523, 524, 526,
	532, 533, 534, 535, 540, 547, 566, 100, 101, 108,
	114, 120, 124, 128, 131, 137, 141, 144, 146, 147,
	148, 151, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 139, 250, 264, 554, 542, 0, 497,
	557, 470, 487, 565, 488, 491, 530, 455, 510, 184,
	485, 0, 474, 450, 481, 451, 472, 499, 127, 503,
	469, 544, 513, 556, 156, 0, 0, 475, 563, 158,
	521, 0, 231, 172, 0, 0, 0, 501, 546, 508,
	539, 496, 531, 460, 520, 558, 486, 528, 559, 0,
	0, 0, 95, 96, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 525, 553, 483, 527, 0,
	0, 0, 0, 0, 529, 567, 449, 522, 0, 453,
	456, 564, 549, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 500, 509, 536, 494, 0, 0, 0, 0,
	0, 0, 1372, 0, 476, 0, 519, 0, 0, 0,
	457, 454, 0, 0, 0, 0, 498, 0, 0, 0,
	459, 0, 477, 537, 0, 447, 136, 541, 548, 495,
	289, 552, 493, 492, 555, 203, 0, 235, 140, 155,
	113, 152, 99, 109, 0, 138, 181, 211, 215, 545,
	473, 482, 121, 480, 213, 191, 252, 518, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 267, 228,
	102, 237, 249, 118, 223, 0, 0, 0, 104, 247,
	234, 170, 149, 150, 103, 0, 209, 126, 134, 123,
	183, 244, 245, 122, 270, 110, 258, 106, 111, 257,
	177, 240, 248, 171, 164, 105, 246, 169, 163, 154,
	130, 142, 201, 161, 202, 143, 174, 173, 175, 0,
	452, 0, 232, 255, 271, 115, 468, 239, 265, 266,
	0, 205, 116, 135, 129, 200, 133, 176, 112, 145,
	229, 153, 160, 208, 269, 190, 214, 119, 254, 230,
	464, 467, 462, 463, 511, 512, 560, 561, 562, 538,
	458, 0, 465, 466, 0, 543, 550, 551, 515, 98,
	107, 157, 268, 206, 132, 516, 517, 256, 448, 461,
	125, 471, 0, 0, 484, 489, 490, 502, 504, 505,
	506, 507, 514, 523, 524, 526, 532, 533, 534, 535,
	540, 547, 566, 100, 101, 108, 114, 120, 124, 128,
	131, 137, 141, 144, 146, 147, 148, 151, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 139,
	250, 264, 554, 542, 0, 497, 557, 470, 487, 565,
	488, 491, 530, 455, 510, 184, 485, 0, 474, 450,
	481, 451, 472, 499, 127, 503, 469, 544, 513, 556,
	156, 0, 0, 475, 563, 158, 521, 0, 231, 172,
	0, 0, 0, 501, 546, 508, 539, 496, 531, 460,
	520, 558, 486, 528, 559, 0, 0, 0, 95, 96,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 525, 553, 483, 527, 0, 0, 0, 0, 0,
	529, 567, 449, 522, 0, 453, 456, 564, 549, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 500, 509,
	536, 494, 0, 0, 0, 0, 0, 0, 1050, 0,
	476, 0, 519, 0, 0, 0, 457, 454, 0, 0,
	0, 0, 498, 0, 0, 0, 459, 0, 477, 537,
	0, 447, 136, 541, 548, 495, 289, 552, 493, 492,
	555, 203, 0, 235, 140, 155, 113, 152, 99, 109,
	0, 138, 181, 211, 215, 545, 473, 482, 121, 480,
	213, 191, 252, 518, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 267, 228, 102, 237, 249, 118,
	223, 0, 0, 0, 104, 247, 234, 170, 149, 150,
	103, 0, 209, 126, 134, 123, 183, 244, 245, 122,
	270, 110, 258, 106, 111, 257, 177, 240, 248, 171,
	164, 105, 246, 169, 163, 154, 130, 142, 201, 161,
	202, 143, 174, 173, 175, 0, 452, 0, 232, 255,
	271, 115, 468, 239, 265, 266, 0, 205, 116, 135,
	129, 200, 133, 176, 112, 145, 229, 153, 160, 208,
	269, 190, 214, 119, 254, 230, 464, 467, 462, 463,
	511, 512, 560, 561, 562, 538, 458, 0, 465, 466,
	0, 543, 550, 551, 515, 98, 107, 157, 268, 206,
	132, 516, 517, 256, 448, 461, 125, 471, 0, 0,
	484, 489, 490, 502, 504, 505, 506, 507, 514, 523,
	524, 526, 532, 533, 534, 535, 540, 547, 566, 100,
	101, 108, 114, 120, 124, 128, 131, 137, 141, 144,
	146, 147, 148, 151, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 139, 250, 264, 554, 542,
	0, 497, 557, 470, 487, 565, 488, 491, 530, 455,
	510, 184, 485, 0, 474, 450, 481, 451, 472, 499,
	127, 503, 469, 544, 513, 556, 156, 0, 0, 475,
	563, 158, 521, 0, 231, 172, 0, 0, 0, 501,
	546, 508, 539, 496, 531, 460, 520, 558, 486, 528,
	559, 0, 0, 0, 95, 96, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 525, 553, 483,
	527, 0, 0, 0, 0, 0, 529, 567, 449, 522,
	0, 453, 456, 564, 549, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 500, 509, 536, 494, 0, 0,
	0, 0, 0, 0, 1014, 0, 476, 0, 519, 0,
	0, 0, 457, 454, 0, 0, 0, 0, 498, 0,
	0, 0, 459, 0, 477, 537, 0, 447, 136, 541,
	548, 495, 289, 552, 493, 492, 555, 203, 0, 235,
	140, 155, 113, 152, 99, 109, 0, 138, 181, 211,
	215, 545, 473, 482, 121, 480, 213, 191, 252, 518,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	267, 228, 102, 237, 249, 118, 223, 0, 0, 0,
	104, 247, 234, 170, 149, 150, 103, 0, 209, 126,
	134, 123, 183, 244, 245, 122, 270, 110, 258, 106,
	111, 257, 177, 240, 248, 171, 164, 105, 246, 169,
	163, 154, 130, 142, 201, 161, 202, 143, 174, 173,
	175, 0, 452, 0, 232, 255, 271, 115, 468, 239,
	265, 266, 0, 205, 116, 135, 129, 200, 133, 176,
	112, 145, 229, 153, 160, 208, 269, 190, 214, 119,
	254, 230, 464, 467, 462, 463, 511, 512, 560, 561,
	562, 538, 458, 0, 465, 466, 0, 543, 550, 551,
	515, 98, 107, 157, 268, 206, 132, 516, 517, 256,
	448, 461, 125, 471, 0, 0, 484, 489, 490, 502,
	504, 505, 506, 507, 514, 523, 524, 526, 532, 533,
	534, 535, 540, 547, 566, 100, 101, 108, 114, 120,
	124, 128, 131, 137, 141, 144, 146, 147, 148, 151,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 139, 250, 264, 554, 542, 0, 497, 557, 470,
	487, 565, 488, 491, 530, 455, 510, 184, 485, 0,
	474, 450, 481, 451, 472, 499, 127, 503, 469, 544,
	513, 556, 156, 0, 0, 475, 563, 158, 521, 0,
	231, 172, 0, 0, 0, 501, 546, 508, 539, 496,
	531, 460, 520, 558, 486, 528, 559, 0, 0, 0,
	95, 96, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 525, 553, 483, 527, 0, 0, 0,
	0, 0, 529, 567, 449, 522, 0, 453, 456, 564,
	549, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	500, 509, 536, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 0, 519, 0, 0, 0, 457, 454,
	0, 0, 0, 0, 498, 0, 0, 0, 459, 0,
	477, 537, 0, 447, 136, 541, 548, 495, 289, 552,
	493, 492, 555, 203, 0, 235, 140, 155, 113, 152,
	99, 109, 0, 138, 181, 211, 215, 545, 473, 482,
	121, 480, 213, 191, 252, 518, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 267, 228, 102, 237,
	249, 118, 223, 0, 0, 0, 104, 247, 234, 170,
	149, 150, 103, 0, 209, 126, 134, 123, 183, 244,
	245, 122, 270, 110, 258, 106, 111, 257, 177, 240,
	248, 171, 164, 105, 246, 169, 163, 154, 130, 142,
	201, 161, 202, 143, 174, 173, 175, 0, 452, 0,
	232, 255, 271, 115, 468, 239, 265, 266, 0, 205,
	116, 135, 129, 200, 133, 176, 112, 145, 229, 153,
	160, 208, 269, 190, 214, 119, 254, 230, 464, 467,
	462, 463, 511, 512, 560, 561, 562, 538, 458, 0,
	465, 466, 0, 543, 550, 551, 515, 98, 107, 157,
	268, 206, 132, 516, 517, 256, 448, 461, 125, 471,
	0, 0, 484, 489, 490, 502, 504, 505, 506, 507,
	514, 523, 524, 526, 532, 533, 534, 535, 540, 547,
	566, 100, 101, 108, 114, 120, 124, 128, 131, 137,
	141, 144, 146, 147, 148, 151, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 139, 250, 264,
	554, 542, 0, 497, 557, 470, 487, 565, 488, 491,
	530, 455, 510, 184, 485, 0, 474, 450, 481, 451,
	472, 499, 127, 503, 469, 544, 513, 556, 156, 0,
	0, 475, 563, 158, 521, 0, 231, 172, 0, 0,
	0, 501, 546, 508, 539, 496, 531, 460, 520, 558,
	486, 528, 559, 0, 0, 0, 95, 96, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 525,
	553, 483, 527, 0, 0, 0, 0, 0, 529, 567,
	449, 522, 0, 453, 456, 564, 549, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 500, 509, 536, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 0,
	519, 0, 0, 0, 457, 454, 0, 0, 0, 0,
	498, 0, 0, 0, 459, 0, 477, 537, 0, 447,
	136, 541, 548, 495, 289, 552, 493, 492, 555, 203,
	0, 235, 140, 155, 113, 152, 99, 109, 0, 138,
	181, 211, 215, 545, 473, 482, 121, 480, 213, 191,
	252, 518, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 267, 228, 102, 237, 249, 118, 223, 0,
	0, 0, 104, 247, 234, 170, 149, 150, 103, 0,
	209, 126, 134, 123, 183, 244, 245, 122, 270, 110,
	258, 106, 445, 257, 177, 240, 248, 171, 164, 105,
	246, 169, 163, 154, 130, 142, 201, 161, 202, 143,
	174, 173, 175, 0, 452, 0, 232, 255, 271, 115,
	468, 239, 265, 266, 0, 205, 116, 135, 129, 200,
	133, 446, 444, 145, 229, 153, 160, 208, 269, 190,
	214, 119, 254, 230, 464, 467, 462, 463, 511, 512,
	560, 561, 562, 538, 458, 0, 465, 466, 0, 543,
	550, 551, 515, 98, 107, 157, 268, 206, 132, 516,
	517, 256, 448, 461, 125, 471, 0, 0, 484, 489,
	490, 502, 504, 505, 506, 507, 514, 523, 524, 526,
	532, 533, 534, 535, 540, 547, 566, 100, 101, 108,
	114, 120, 124, 128, 131, 137, 141, 144, 146, 147,
	148, 151, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 139, 250, 264, 554, 542, 0, 497,
	557, 470, 487, 565, 488, 491, 530, 455, 510, 184,
	485, 0, 474, 450, 481, 451, 472, 499, 127, 503,
	469, 544, 513, 556, 156, 0, 0, 475, 563, 158,
	521, 0, 231, 172, 0, 0, 0, 501, 546, 508,
	539, 496, 531, 460, 520, 558, 486, 528, 559, 0,
	0, 0, 95, 96, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 525, 553, 483, 527, 0,
	0, 0, 0, 0, 529, 567, 449, 522, 0, 453,
	456, 564, 549, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 500, 509, 536, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 0, 519, 0, 0, 0,
	457, 454, 0, 0, 0, 0, 498, 0, 0, 0,
	459, 0, 477, 537, 0, 447, 136, 541, 548, 495,
	289, 552, 493, 492, 555, 203, 0, 235, 140, 155,
	113, 152, 99, 109, 0, 138, 181, 211, 215, 545,
	473, 482, 121, 480, 213, 191, 252, 518, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 267, 228,
	102, 237, 786, 118, 223, 0, 0, 0, 104, 247,
	234, 170, 149, 150, 103, 0, 209, 126, 134, 123,
	183, 244, 245, 122, 270, 110, 258, 106, 445, 257,
	177, 240, 248, 171, 164, 105, 246, 169, 163, 154,
	130, 142, 201, 161, 202, 143, 174, 173, 175, 0,
	452, 0, 232, 255, 271, 115, 468, 239, 265, 266,
	0, 205, 116, 135, 129, 200, 133, 446, 444, 145,
	229, 153, 160, 208, 269, 190, 214, 119, 254, 230,
	464, 467, 462, 463, 511, 512, 560, 561, 562, 538,
	458, 0, 465, 466, 0, 543, 550, 551, 515, 98,
	107, 157, 268, 206, 132, 516, 517, 256, 448, 461,
	125, 471, 0, 0, 484, 489, 490, 502, 504, 505,
	506, 507, 514, 523, 524, 526, 532, 533, 534, 535,
	540, 547, 566, 100, 101, 108, 114, 120, 124, 128,
	131, 137, 141, 144, 146, 147, 148, 151, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 139,
	250, 264, 554, 542, 0, 497, 557, 470, 487, 565,
	488, 491, 530, 455, 510, 184, 485, 0, 474, 450,
	481, 451, 472, 499, 127, 503, 469, 544, 513, 556,
	156, 0, 0, 475, 563, 158, 521, 0, 231, 172,
	0, 0, 0, 501, 546, 508, 539, 496, 531, 460,
	520, 558, 486, 528, 559, 0, 0, 0, 95, 96,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 525, 553, 483, 527, 0, 0, 0, 0, 0,
	529, 567, 449, 522, 0, 453, 456, 564, 549, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 500, 509,
	536, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 519, 0, 0, 0, 457, 454, 0, 0,
	0, 0, 498, 0, 0, 0, 459, 0, 477, 537,
	0, 447, 136, 541, 548, 495, 289, 552, 493, 492,
	555, 203, 0, 235, 140, 155, 113, 152, 99, 109,
	0, 138, 181, 211, 215, 545, 473, 482, 121, 480,
	213, 191, 252, 518, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 267, 228, 102, 237, 436, 118,
	223, 0, 0, 0, 104, 247, 234, 170, 149, 150,
	103, 0, 209, 126, 134, 123, 183, 244, 245, 122,
	270, 110, 258, 106, 445, 257, 177, 240, 248, 171,
	164, 105, 246, 169, 163, 154, 130, 142, 201, 161,
	202, 143, 174, 173, 175, 0, 452, 0, 232, 255,
	271, 115, 468, 239, 265, 266, 0, 205, 116, 135,
	129, 200, 133, 446, 444, 439, 438, 153, 160, 208,
	269, 190, 214, 119, 254, 230, 464, 467, 462, 463,
	511, 512, 560, 561, 562, 538, 458, 0, 465, 466,
	0, 543, 550, 551, 515, 98, 107, 157, 268, 206,
	132, 516, 517, 256, 448, 461, 125, 471, 0, 0,
	484, 489, 490, 502, 504, 505, 506, 507, 514, 523,
	524, 526, 532, 533, 534, 535, 540, 547, 566, 100,
	101, 108, 114, 120, 124, 128, 131, 137, 141, 144,
	146, 147, 148, 151, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 139, 250, 264, 184, 0,
	375, 947, 0, 332, 0, 0, 0, 127, 0, 331,
	0, 0, 0, 156, 0, 0, 948, 380, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 95, 96, 97, 353, 352, 355, 356, 357, 358,
	0, 0, 117, 354, 359, 360, 361, 0, 378, 0,
	0, 0, 379, 0, 0, 0, 329, 346, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	344, 423, 0, 0, 0, 394, 0, 345, 0, 0,
	338, 339, 341, 340, 342, 347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 393, 0, 0, 289,
	0, 0, 391, 0, 203, 0, 235, 140, 155, 113,
	152, 99, 109, 0, 138, 181, 211, 215, 0, 0,
	0, 121, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 267, 228, 102,
	237, 249, 118, 223, 0, 0, 0, 104, 247, 234,
	170, 149, 150, 103, 0, 209, 126, 134, 123, 183,
	244, 245, 122, 270, 110, 258, 106, 111, 257, 177,
	240, 248, 171, 164, 105, 246, 169, 163, 154, 130,
	142, 201, 161, 202, 143, 174, 173, 175, 0, 0,
	0, 232, 255, 271, 115, 0, 239, 265, 266, 0,
	205, 116, 135, 129, 200, 133, 176, 112, 145, 229,
	153, 160, 208, 269, 190, 214, 119, 254, 230, 381,
	392, 387, 388, 385, 386, 384, 383, 382, 395, 368,
	369, 370, 371, 376, 0, 389, 390, 372, 98, 107,
	157, 268, 206, 132, 373, 374, 256, 0, 0, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 101, 108, 114, 120, 124, 128, 131,
	137, 141, 144, 146, 147, 148, 151, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 139, 250,
	264, 184, 0, 375, 0, 0, 332, 0, 0, 0,
	127, 0, 331, 0, 0, 0, 156, 0, 0, 0,
	380, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 366, 367, 0, 0, 0, 0, 0, 0, 1057,
	0, 60, 0, 0, 95, 96, 97, 353, 352, 355,
	356, 357, 358, 0, 0, 117, 354, 359, 360, 361,
	1058, 378, 0, 0, 0, 379, 0, 0, 0, 329,
	346, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 343, 344, 0, 0, 0, 0, 394, 0,
	345, 0, 0, 338, 339, 341, 340, 342, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 393,
	0, 0, 289, 0, 0, 391, 0, 203, 0, 235,
	140, 155, 113, 152, 99, 109, 0, 138, 181, 211,
	215, 0, 0, 0, 121, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	267, 228, 102, 237, 249, 118, 223, 0, 0, 0,
	104, 247, 234, 170, 149, 150, 103, 0, 209, 126,
	134, 123, 183, 244, 245, 122, 270, 110, 258, 106,
	111, 257, 177, 240, 248, 171, 164, 105, 246, 169,
	163, 154, 130, 142, 201, 161, 202, 143, 174, 173,
	175, 0, 0, 0, 232, 255, 271, 115, 0, 239,
	265, 266, 0, 205, 116, 135, 129, 200, 133, 176,
	112, 145, 229, 153, 160, 208, 269, 190, 214, 119,
	254, 230, 381, 392, 387, 388, 385, 386, 384, 383,
	382, 395, 368, 369, 370, 371, 376, 0, 389, 390,
	372, 98, 107, 157, 268, 206, 132, 373, 374, 256,
	0, 0, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 108, 114, 120,
	124, 128, 131, 137, 141, 144, 146, 147, 148, 151,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 139, 250, 264, 184, 0, 375, 0, 0, 332,
	0, 0, 0, 127, 0, 331, 0, 0, 0, 156,
	0, 0, 0, 380, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 411, 95, 96, 97,
	353, 352, 355, 356, 357, 358, 0, 0, 117, 354,
	359, 360, 361, 0, 378, 0, 0, 0, 379, 0,
	0, 0, 329, 346, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 344, 0, 0, 0,
	0, 394, 0, 345, 0, 0, 338, 339, 341, 340,
	342, 347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 393, 0, 0, 289, 0, 0, 391, 0,
	203, 0, 235, 140, 155, 113, 152, 99, 109, 0,
	138, 181, 211, 215, 0, 0, 0, 121, 0, 213,
	191, 252, 0, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 267, 228, 102, 237, 249, 118, 223,
	0, 0, 0, 104, 247, 234, 170, 149, 150, 103,
	0, 209, 126, 134, 123, 183, 244, 245, 122, 270,
	110, 258, 106, 111, 257, 177, 240, 248, 171, 164,
	105, 246, 169, 163, 154, 130, 142, 201, 161, 202,
	143, 174, 173, 175, 0, 0, 0, 232, 255, 271,
	115, 0, 239, 265, 266, 0, 205, 116, 135, 129,
	200, 133, 176, 112, 145, 229, 153, 160, 208, 269,
	190, 214, 119, 254, 230, 381, 392, 387, 388, 385,
	386, 384, 383, 382, 395, 368, 369, 370, 371, 376,
	0, 389, 390, 372, 98, 107, 157, 268, 206, 132,
	373, 374, 256, 0, 0, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 101,
	108, 114, 120, 124, 128, 131, 137, 141, 144, 146,
	147, 148, 151, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 139, 250, 264, 184, 0, 375,
	0, 0, 332, 0, 0, 0, 127, 0, 331, 0,
	0, 0, 156, 0, 0, 0, 380, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 0,
	95, 96, 97, 353, 352, 355, 356, 357, 358, 0,
	0, 117, 354, 359, 360, 361, 0, 378, 0, 0,
	0, 379, 0, 0, 0, 329, 346, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 343, 344,
	423, 0, 0, 0, 394, 0, 345, 0, 0, 338,
	339, 341, 340, 342, 347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 393, 0, 0, 289, 0,
	0, 391, 0, 203, 0, 235, 140, 155, 113, 152,
	99, 109, 0, 138, 181, 211, 215, 0, 0, 0,
	121, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 267, 228, 102, 237,
	249, 118, 223, 0, 0, 0, 104, 247, 234, 170,
	149, 150, 103, 0, 209, 126, 134, 123, 183, 244,
	245, 122, 270, 110, 258, 106, 111, 257, 177, 240,
	248, 171, 164, 105, 246, 169, 163, 154, 130, 142,
	201, 161, 202, 143, 174, 173, 175, 0, 0, 0,
	232, 255, 271, 115, 0, 239, 265, 266, 0, 205,
	116, 135, 129, 200, 133, 176, 112, 145, 229, 153,
	160, 208, 269, 190, 214, 119, 254, 230, 381, 392,
	387, 388, 385, 386, 384, 383, 382, 395, 368, 369,
	370, 371, 376, 0, 389, 390, 372, 98, 107, 157,
	268, 206, 132, 373, 374, 256, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 108, 114, 120, 124, 128, 131, 137,
	141, 144, 146, 147, 148, 151, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 139, 250, 264,
	184, 0, 375, 0, 0, 332, 0, 0, 0, 127,
	0, 331, 0, 0, 0, 156, 0, 0, 0, 380,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 95, 96, 97, 353, 965, 355, 356,
	357, 358, 0, 0, 117, 354, 359, 360, 361, 0,
	378, 0, 0, 0, 379, 0, 0, 0, 329, 346,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 344, 423, 0, 0, 0, 394, 0, 345,
	0, 0, 338, 339, 341, 340, 342, 347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 393, 0,
	0, 289, 0, 0, 391, 0, 203, 0, 235, 140,
	155, 113, 152, 99, 109, 0, 138, 181, 211, 215,
	0, 0, 0, 121, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 267,
	228, 102, 237, 249, 118, 223, 0, 0, 0, 104,
	247, 234, 170, 149, 150, 103, 0, 209, 126, 134,
	123, 183, 244, 245, 122, 270, 110, 258, 106, 111,
	257, 177, 240, 248, 171, 164, 105, 246, 169, 163,
	154, 130, 142, 201, 161, 202, 143, 174, 173, 175,
	0, 0, 0, 232, 255, 271, 115, 0, 239, 265,
	266, 0, 205, 116, 135, 129, 200, 133, 176, 112,
	145, 229, 153, 160, 208, 269, 190, 214, 119, 254,
	230, 381, 392, 387, 388, 385, 386, 384, 383, 382,
	395, 368, 369, 370, 371, 376, 0, 389, 390, 372,
	98, 107, 157, 268, 206, 132, 373, 374, 256, 0,
	0, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 101, 108, 114, 120, 124,
	128, 131, 137, 141, 144, 146, 147, 148, 151, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	139, 250, 264, 184, 0, 375, 0, 0, 332, 0,
	0, 0, 127, 0, 331, 0, 0, 0, 156, 0,
	0, 0, 380, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 95, 96, 97, 353,
	962, 355, 356, 357, 358, 0, 0, 117, 354, 359,
	360, 361, 0, 378, 0, 0, 0, 379, 0, 0,
	0, 329, 346, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 343, 344, 423, 0, 0, 0,
	394, 0, 345, 0, 0, 338, 339, 341, 340, 342,
	347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 393, 0, 0, 289, 0, 0, 391, 0, 203,
	0, 235, 140, 155, 113, 152, 99, 109, 0, 138,
	181, 211, 215, 0, 0, 0, 121, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 267, 228, 102, 237, 249, 118, 223, 0,
	0, 0, 104, 247, 234, 170, 149, 150, 103, 0,
	209, 126, 134, 123, 183, 244, 245, 122, 270, 110,
	258, 106, 111, 257, 177, 240, 248, 171, 164, 105,
	246, 169, 163, 154, 130, 142, 201, 161, 202, 143,
	174, 173, 175, 0, 0, 0, 232, 255, 271, 115,
	0, 239, 265, 266, 0, 205, 116, 135, 129, 200,
	133, 176, 112, 145, 229, 153, 160, 208, 269, 190,
	214, 119, 254, 230, 381, 392, 387, 388, 385, 386,
	384, 383, 382, 395, 368, 369, 370, 371, 376, 0,
	389, 390, 372, 98, 107, 157, 268, 206, 132, 373,
	374, 256, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 108,
	114, 120, 124, 128, 131, 137, 141, 144, 146, 147,
	148, 151, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 139, 250, 264, 404, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	375, 0, 0, 332, 0, 0, 0, 127, 0, 331,
	0, 0, 0, 156, 0, 0, 0, 380, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 95, 96, 97, 353, 352, 355, 356, 357, 358,
	0, 0, 117, 354, 359, 360, 361, 0, 378, 0,
	0, 0, 379, 0, 0, 0, 329, 346, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	344, 0, 0, 0, 0, 394, 0, 345, 0, 0,
	338, 339, 341, 340, 342, 347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 393, 0, 0, 289,
	0, 0, 391, 0, 203, 0, 235, 140, 155, 113,
	152, 99, 109, 0, 138, 181, 211, 215, 0, 0,
	0, 121, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 267, 228, 102,
	237, 249, 118, 223, 0, 0, 0, 104, 247, 234,
	170, 149, 150, 103, 0, 209, 126, 134, 123, 183,
	244, 245, 122, 270, 110, 258, 106, 111, 257, 177,
	240, 248, 171, 164, 105, 246, 169, 163, 154, 130,
	142, 201, 161, 202, 143, 174, 173, 175, 0, 0,
	0, 232, 255, 271, 115, 0, 239, 265, 266, 0,
	205, 116, 135, 129, 200, 133, 176, 112, 145, 229,
	153, 160, 208, 269, 190, 214, 119, 254, 230, 381,
	392, 387, 388, 385, 386, 384, 383, 382, 395, 368,
	369, 370, 371, 376, 0, 389, 390, 372, 98, 107,
	157, 268, 206, 132, 373, 374, 256, 0, 0, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 101, 108, 114, 120, 124, 128, 131,
	137, 141, 144, 146, 147, 148, 151, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 139, 250,
	264, 184, 0, 375, 0, 0, 332, 0, 0, 0,
	127, 0, 331, 0, 0, 0, 156, 0, 0, 0,
	380, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 95, 96, 97, 353, 352, 355,
	356, 357, 358, 0, 0, 117, 354, 359, 360, 361,
	0, 378, 0, 0, 0, 379, 0, 0, 0, 329,
	346, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 343, 344, 0, 0, 0, 0, 394, 0,
	345, 0, 0, 338, 339, 341, 340, 342, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 393,
	0, 0, 289, 0, 0, 391, 0, 203, 0, 235,
	140, 155, 113, 152, 99, 109, 0, 138, 181, 211,
	215, 0, 0, 0, 121, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	267, 228, 102, 237, 249, 118, 223, 0, 0, 0,
	104, 247, 234, 170, 149, 150, 103, 0, 209, 126,
	134, 123, 183, 244, 245, 122, 270, 110, 258, 106,
	111, 257, 177, 240, 248, 171, 164, 105, 246, 169,
	163, 154, 130, 142, 201, 161, 202, 143, 174, 173,
	175, 0, 0, 0, 232, 255, 271, 115, 0, 239,
	265, 266, 0, 205, 116, 135, 129, 200, 133, 176,
	112, 145, 229, 153, 160, 208, 269, 190, 214, 119,
	254, 230, 381, 392, 387, 388, 385, 386, 384, 383,
	382, 395, 368, 369, 370, 371, 376, 0, 389, 390,
	372, 98, 107, 157, 268, 206, 132, 373, 374, 256,
	0, 0, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 108, 114, 120,
	124, 128, 131, 137, 141, 144, 146, 147, 148, 151,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 139, 250, 264, 184, 0, 375, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 0, 156,
	0, 0, 0, 380, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 95, 96, 97,
	353, 352, 355, 356, 357, 358, 0, 0, 117, 354,
	359, 360, 361, 0, 378, 977, 978, 979, 379, 0,
	0, 0, 0, 346, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 344, 0, 0, 0,
	0, 394, 0, 345, 0, 0, 338, 339, 341, 340,
	342, 347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 393, 0, 0, 289, 0, 0, 391, 0,
	203, 0, 235, 140, 155, 113, 152, 99, 109, 0,
	138, 181, 211, 215, 0, 0, 0, 121, 0, 213,
	191, 252, 0, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 267, 228, 102, 237, 249, 118, 223,
	0, 0, 0, 104, 247, 234, 170, 149, 150, 103,
	0, 209, 126, 134, 123, 183, 244, 245, 122, 270,
	110, 258, 106, 111, 257, 177, 240, 248, 171, 164,
	105, 246, 169, 163, 154, 130, 142, 201, 161, 202,
	143, 174, 173, 175, 0, 0, 0, 232, 255, 271,
	115, 0, 239, 265, 266, 0, 205, 116, 135, 129,
	200, 133, 176, 112, 145, 229, 153, 160, 208, 269,
	190, 214, 119, 254, 230, 381, 392, 387, 388, 385,
	386, 384, 383, 382, 395, 368, 369, 370, 371, 376,
	0, 389, 390, 372, 98, 107, 157, 268, 206, 132,
	373, 374, 256, 0, 0, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 101,
	108, 114, 120, 124, 128, 131, 137, 141, 144, 146,
	147, 148, 151, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 139, 250, 264, 184, 0, 375,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 380, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 0,
	95, 96, 97, 353, 352, 355, 356, 357, 358, 0,
	0, 117, 354, 359, 360, 361, 0, 378, 0, 0,
	0, 379, 0, 0, 0, 0, 346, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 343, 344,
	0, 0, 0, 0, 394, 0, 345, 0, 0, 338,
	339, 341, 340, 342, 347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 393, 0, 0, 289, 0,
	0, 391, 0, 203, 0, 235, 140, 155, 113, 152,
	99, 109, 0, 138, 181, 211, 215, 0, 0, 0,
	121, 0, 213, 191, 252, 1639, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 267, 228, 102, 237,
	249, 118, 223, 0, 0, 0, 104, 247, 234, 170,
	149, 150, 103, 0, 209, 126, 134, 123, 183, 244,
	245, 122, 270, 110, 258, 106, 111, 257, 177, 240,
	248, 171, 164, 105, 246, 169, 163, 154, 130, 142,
	201, 161, 202, 143, 174, 173, 175, 0, 0, 0,
	232, 255, 271, 115, 0, 239, 265, 266, 0, 205,
	116, 135, 129, 200, 133, 176, 112, 145, 229, 153,
	160, 208, 269, 190, 214, 119, 254, 230, 381, 392,
	387, 388, 385, 386, 384, 383, 382, 395, 368, 369,
	370, 371, 376, 0, 389, 390, 372, 98, 107, 157,
	268, 206, 132, 373, 374, 256, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 108, 114, 120, 124, 128, 131, 137,
	141, 144, 146, 147, 148, 151, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 139, 250, 264,
	184, 0, 375, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 156, 0, 0, 0, 380,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 411, 95, 96, 97, 353, 352, 355, 356,
	357, 358, 0, 0, 117, 354, 359, 360, 361, 0,
	378, 0, 0, 0, 379, 0, 0, 0, 0, 346,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 344, 0, 0, 0, 0, 394, 0, 345,
	0, 0, 338, 339, 341, 340, 342, 347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 393, 0,
	0, 289, 0, 0, 391, 0, 203, 0, 235, 140,
	155, 113, 152, 99, 109, 0, 138, 181, 211, 215,
	0, 0, 0, 121, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 267,
	228, 102, 237, 249, 118, 223, 0, 0, 0, 104,
	247, 234, 170, 149, 150, 103, 0, 209, 126, 134,
	123, 183, 244, 245, 122, 270, 110, 258, 106, 111,
	257, 177, 240, 248, 171, 164, 105, 246, 169, 163,
	154, 130, 142, 201, 161, 202, 143, 174, 173, 175,
	0, 0, 0, 232, 255, 271, 115, 0, 239, 265,
	266, 0, 205, 116, 135, 129, 200, 133, 176, 112,
	145, 229, 153, 160, 208, 269, 190, 214, 119, 254,
	230, 381, 392, 387, 388, 385, 386, 384, 383, 382,
	395, 368, 369, 370, 371, 376, 0, 389, 390, 372,
	98, 107, 157, 268, 206, 132, 373, 374, 256, 0,
	0, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 101, 108, 114, 120, 124,
	128, 131, 137, 141, 144, 146, 147, 148, 151, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	139, 250, 264, 184, 0, 375, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 156, 0,
	0, 0, 380, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 95, 96, 97, 353,
	352, 355, 356, 357, 358, 0, 0, 117, 354, 359,
	360, 361, 0, 378, 0, 0, 0, 379, 0, 0,
	0, 0, 346, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 343, 344, 0, 0, 0, 0,
	394, 0, 345, 0, 0, 338, 339, 341, 340, 342,
	347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 393, 0, 0, 289, 0, 0, 391, 0, 203,
	0, 235, 140, 155, 113, 152, 99, 109, 0, 138,
	181, 211, 215, 0, 0, 0, 121, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 267, 228, 102, 237, 249, 118, 223, 0,
	0, 0, 104, 247, 234, 170, 149, 150, 103, 0,
	209, 126, 134, 123, 183, 244, 245, 122, 270, 110,
	258, 106, 111, 257, 177, 240, 248, 171, 164, 105,
	246, 169, 163, 154, 130, 142, 201, 161, 202, 143,
	174, 173, 175, 0, 0, 0, 232, 255, 271, 115,
	0, 239, 265, 266, 0, 205, 116, 135, 129, 200,
	133, 176, 112, 145, 229, 153, 160, 208, 269, 190,
	214, 119, 254, 230, 381, 392, 387, 388, 385, 386,
	384, 383, 382, 395, 368, 369, 370, 371, 376, 0,
	389, 390, 372, 98, 107, 157, 268, 206, 132, 373,
	374, 256, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 108,
	114, 120, 124, 128, 131, 137, 141, 144, 146, 147,
	148, 151, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 139, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 659, 658, 668, 669, 661, 662, 663,
	664, 665, 666, 667, 660, 0, 0, 670, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 289, 0, 0,
	0, 0, 203, 0, 235, 140, 155, 113, 152, 99,
	109, 0, 138, 181, 211, 215, 0, 0, 0, 121,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 267, 228, 102, 237, 249,
	118, 223, 0, 0, 0, 104, 247, 234, 170, 149,
	150, 103, 0, 209, 126, 134, 123, 183, 244, 245,
	122, 270, 110, 258, 106, 111, 257, 177, 240, 248,
	171, 164, 105, 246, 169, 163, 154, 130, 142, 201,
	161, 202, 143, 174, 173, 175, 0, 0, 0, 232,
	255, 271, 115, 0, 239, 265, 266, 0, 205, 116,
	135, 129, 200, 133, 176, 112, 145, 229, 153, 160,
	208, 269, 190, 214, 119, 254, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 107, 157, 268,
	206, 132, 0, 0, 256, 0, 0, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 101, 108, 114, 120, 124, 128, 131, 137, 141,
	144, 146, 147, 148, 151, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 139, 250, 264, 184,
	0, 0, 0, 761, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 158,
	0, 0, 231, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 0, 763, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 648, 649, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 650, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	289, 0, 0, 0, 0, 203, 0, 235, 140, 155,
	113, 152, 99, 109, 0, 138, 181, 211, 215, 0,
	0, 0, 121, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 267, 228,
	102, 237, 249, 118, 223, 0, 0, 0, 104, 247,
	234, 170, 149, 150, 103, 0, 209, 126, 134, 123,
	183, 244, 245, 122, 270, 110, 258, 106, 111, 257,
	177, 240, 248, 171, 164, 105, 246, 169, 163, 154,
	130, 142, 201, 161, 202, 143, 174, 173, 175, 0,
	0, 0, 232, 255, 271, 115, 0, 239, 265, 266,
	0, 205, 116, 135, 129, 200, 133, 176, 112, 145,
	229, 153, 160, 208, 269, 190, 214, 119, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	107, 157, 268, 206, 132, 0, 0, 256, 0, 0,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 108, 114, 120, 124, 128,
	131, 137, 141, 144, 146, 147, 148, 151, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 139,
	250, 264, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	89, 90, 0, 86, 0, 0, 0, 91, 203, 0,
	235, 140, 155, 113, 152, 99, 109, 0, 138, 181,
	211, 215, 0, 0, 0, 121, 0, 213, 191, 252,
	0, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 267, 228, 102, 237, 249, 118, 223, 0, 0,
	0, 104, 247, 234, 170, 149, 150, 103, 0, 209,
	126, 134, 123, 183, 244, 245, 122, 270, 110, 258,
	106, 111, 257, 177, 240, 248, 171, 164, 105, 246,
	169, 163, 154, 130, 142, 201, 161, 202, 143, 174,
	173, 175, 0, 0, 0, 232, 255, 271, 115, 0,
	239, 265, 266, 0, 205, 116, 135, 129, 200, 133,
	176, 112, 145, 229, 153, 160, 208, 269, 190, 214,
	119, 254, 230, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 107, 157, 268, 206, 132, 0, 0,
	256, 0, 0, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 101, 108, 114,
	120, 124, 128, 131, 137, 141, 144, 146, 147, 148,
	151, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 139, 250, 264, 184, 0, 0, 0, 1040,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 0, 1042, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 289, 0, 0, 0,
	0, 203, 0, 235, 140, 155, 113, 152, 99, 109,
	0, 138, 181, 211, 215, 0, 0, 0, 121, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 267, 228, 102, 237, 249, 118,
	223, 0, 0, 0, 104, 247, 234, 170, 149, 150,
	103, 0, 209, 126, 134, 123, 183, 244, 245, 122,
	270, 110, 258, 106, 111, 257, 177, 240, 248, 171,
	164, 105, 246, 169, 163, 154, 130, 142, 201, 161,
	202, 143, 174, 173, 175, 0, 0, 0, 232, 255,
	271, 115, 0, 239, 265, 266, 0, 205, 116, 135,
	129, 200, 133, 176, 112, 145, 229, 153, 160, 208,
	269, 190, 214, 119, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 107, 157, 268, 206,
	132, 0, 0, 256, 0, 0, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 108, 114, 120, 124, 128, 131, 137, 141, 144,
	146, 147, 148, 151, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 139, 250, 264, 31, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 156, 0, 0, 0, 0,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 95, 96, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 289, 0, 0, 0, 0, 203, 0, 235, 140,
	155, 113, 152, 99, 109, 0, 138, 181, 211, 215,
	0, 0, 0, 121, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 267,
	228, 102, 237, 249, 118, 223, 0, 0, 0, 104,
	247, 234, 170, 149, 150, 103, 0, 209, 126, 134,
	123, 183, 244, 245, 122, 270, 110, 258, 106, 111,
	257, 177, 240, 248, 171, 164, 105, 246, 169, 163,
	154, 130, 142, 201, 161, 202, 143, 174, 173, 175,
	0, 0, 0, 232, 255, 271, 115, 0, 239, 265,
	266, 0, 205, 116, 135, 129, 200, 133, 176, 112,
	145, 229, 153, 160, 208, 269, 190, 214, 119, 254,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 107, 157, 268, 206, 132, 0, 0, 256, 0,
	0, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 101, 108, 114, 120, 124,
	128, 131, 137, 141, 144, 146, 147, 148, 151, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	139, 250, 264, 184, 0, 0, 0, 1040, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 156, 0,
	0, 0, 0, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 0,
	1042, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 289, 0, 0, 0, 0, 203,
	0, 235, 140, 155, 113, 152, 99, 109, 0, 138,
	181, 211, 215, 0, 0, 0, 121, 0, 213, 191,
	252, 0, 1038, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 267, 228, 102, 237, 249, 118, 223, 0,
	0, 0, 104, 247, 234, 170, 149, 150, 103, 0,
	209, 126, 134, 123, 183, 244, 245, 122, 270, 110,
	258, 106, 111, 257, 177, 240, 248, 171, 164, 105,
	246, 169, 163, 154, 130, 142, 201, 161, 202, 143,
	174, 173, 175, 0, 0, 0, 232, 255, 271, 115,
	0, 239, 265, 266, 0, 205, 116, 135, 129, 200,
	133, 176, 112, 145, 229, 153, 160, 208, 269, 190,
	214, 119, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 107, 157, 268, 206, 132, 0,
	0, 256, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 108,
	114, 120, 124, 128, 131, 137, 141, 144, 146, 147,
	148, 151, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 139, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 0, 0, 1006, 0, 0, 1007, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 289, 0, 0,
	0, 0, 203, 0, 235, 140, 155, 113, 152, 99,
	109, 0, 138, 181, 211, 215, 0, 0, 0, 121,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 267, 228, 102, 237, 249,
	118, 223, 0, 0, 0, 104, 247, 234, 170, 149,
	150, 103, 0, 209, 126, 134, 123, 183, 244, 245,
	122, 270, 110, 258, 106, 111, 257, 177, 240, 248,
	171, 164, 105, 246, 169, 163, 154, 130, 142, 201,
	161, 202, 143, 174, 173, 175, 0, 0, 0, 232,
	255, 271, 115, 0, 239, 265, 266, 0, 205, 116,
	135, 129, 200, 133, 176, 112, 145, 229, 153, 160,
	208, 269, 190, 214, 119, 254, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 107, 157, 268,
	206, 132, 0, 0, 256, 0, 0, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 101, 108, 114, 120, 124, 128, 131, 137, 141,
	144, 146, 147, 148, 151, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 139, 250, 264, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	796, 0, 0, 0, 156, 0, 0, 0, 0, 158,
	0, 0, 231, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 0, 795, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	289, 0, 0, 0, 0, 203, 0, 235, 140, 155,
	113, 152, 99, 109, 0, 138, 181, 211, 215, 0,
	0, 0, 121, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 267, 228,
	102, 237, 249, 118, 223, 0, 0, 0, 104, 247,
	234, 170, 149, 150, 103, 0, 209, 126, 134, 123,
	183, 244, 245, 122, 270, 110, 258, 106, 111, 257,
	177, 240, 248, 171, 164, 105, 246, 169, 163, 154,
	130, 142, 201, 161, 202, 143, 174, 173, 175, 0,
	0, 0, 232, 255, 271, 115, 0, 239, 265, 266,
	0, 205, 116, 135, 129, 200, 133, 176, 112, 145,
	229, 153, 160, 208, 269, 190, 214, 119, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	107, 157, 268, 206, 132, 0, 0, 256, 0, 0,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 108, 114, 120, 124, 128,
	131, 137, 141, 144, 146, 147, 148, 151, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 139,
	250, 264, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 411, 95, 96, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 289, 0, 0, 0, 0, 203, 0,
	235, 140, 155, 113, 152, 99, 109, 0, 138, 181,
	211, 215, 0, 0, 0, 121, 0, 213, 191, 252,
	0, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 267, 228, 102, 237, 249, 118, 223, 0, 0,
	0, 104, 247, 234, 170, 149, 150, 103, 0, 209,
	126, 134, 123, 183, 244, 245, 122, 270, 110, 258,
	106, 111, 257, 177, 240, 248, 171, 164, 105, 246,
	169, 163, 154, 130, 142, 201, 161, 202, 143, 174,
	173, 175, 0, 0, 0, 232, 255, 271, 115, 0,
	239, 265, 266, 0, 205, 116, 135, 129, 200, 133,
	176, 112, 145, 229, 153, 160, 208, 269, 190, 214,
	119, 254, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 107, 157, 268, 206, 132, 0, 0,
	256, 0, 0, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 101, 108, 114,
	120, 124, 128, 131, 137, 141, 144, 146, 147, 148,
	151, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 139, 250, 264, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 95, 96,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 289, 0, 0, 0,
	0, 203, 0, 235, 140, 155, 113, 152, 99, 109,
	0, 138, 181, 211, 215, 0, 0, 0, 121, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 267, 228, 102, 237, 249, 118,
	223, 0, 0, 0, 104, 247, 234, 170, 149, 150,
	103, 0, 209, 126, 134, 123, 183, 244, 245, 122,
	270, 110, 258, 106, 111, 257, 177, 240, 248, 171,
	164, 105, 246, 169, 163, 154, 130, 142, 201, 161,
	202, 143, 174, 173, 175, 0, 0, 0, 232, 255,
	271, 115, 0, 239, 265, 266, 0, 205, 116, 135,
	129, 200, 133, 176, 112, 145, 229, 153, 160, 208,
	269, 190, 214, 119, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 107, 157, 268, 206,
	132, 0, 0, 256, 0, 0, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 108, 114, 120, 124, 128, 131, 137, 141, 144,
	146, 147, 148, 151, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 139, 250, 264, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 0, 1042, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 289,
	0, 0, 0, 0, 203, 0, 235, 140, 155, 113,
	152, 99, 109, 0, 138, 181, 211, 215, 0, 0,
	0, 121, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 267, 228, 102,
	237, 249, 118, 223, 0, 0, 0, 104, 247, 234,
	170, 149, 150, 103, 0, 209, 126, 134, 123, 183,
	244, 245, 122, 270, 110, 258, 106, 111, 257, 177,
	240, 248, 171, 164, 105, 246, 169, 163, 154, 130,
	142, 201, 161, 202, 143, 174, 173, 175, 0, 0,
	0, 232, 255, 271, 115, 0, 239, 265, 266, 0,
	205, 116, 135, 129, 200, 133, 176, 112, 145, 229,
	153, 160, 208, 269, 190, 214, 119, 254, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 107,
	157, 268, 206, 132, 0, 0, 256, 0, 0, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 101, 108, 114, 120, 124, 128, 131,
	137, 141, 144, 146, 147, 148, 151, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 139, 250,
	264, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 156, 0, 0, 0,
	0, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 0, 763, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 289, 0, 0, 0, 0, 203, 0, 235,
	140, 155, 113, 152, 99, 109, 0, 138, 181, 211,
	215, 0, 0, 0, 121, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	267, 228, 102, 237, 249, 118, 223, 0, 0, 0,
	104, 247, 234, 170, 149, 150, 103, 0, 209, 126,
	134, 123, 183, 244, 245, 122, 270, 110, 258, 106,
	111, 257, 177, 240, 248, 171, 164, 105, 246, 169,
	163, 154, 130, 142, 201, 161, 202, 143, 174, 173,
	175, 0, 0, 0, 232, 255, 271, 115, 0, 239,
	265, 266, 0, 205, 116, 135, 129, 200, 133, 176,
	112, 145, 229, 153, 160, 208, 269, 190, 214, 119,
	254, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 107, 157, 268, 206, 132, 0, 0, 256,
	0, 0, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 108, 114, 120,
	124, 128, 131, 137, 141, 144, 146, 147, 148, 151,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 139, 250, 264, 184, 0, 0, 0, 0, 0,
	0, 0, 766, 127, 0, 0, 0, 0, 0, 156,
	0, 0, 0, 0, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 289, 0, 0, 0, 0,
	203, 0, 235, 140, 155, 113, 152, 99, 109, 0,
	138, 181, 211, 215, 0, 0, 0, 121, 0, 213,
	191, 252, 0, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 267, 228, 102, 237, 249, 118, 223,
	0, 0, 0, 104, 247, 234, 170, 149, 150, 103,
	0, 209, 126, 134, 123, 183, 244, 245, 122, 270,
	110, 258, 106, 111, 257, 177, 240, 248, 171, 164,
	105, 246, 169, 163, 154, 130, 142, 201, 161, 202,
	143, 174, 173, 175, 0, 0, 0, 232, 255, 271,
	115, 0, 239, 265, 266, 0, 205, 116, 135, 129,
	200, 133, 176, 112, 145, 229, 153, 160, 208, 269,
	190, 214, 119, 254, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 107, 157, 268, 206, 132,
	0, 0, 256, 0, 0, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 101,
	108, 114, 120, 124, 128, 131, 137, 141, 144, 146,
	147, 148, 151, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 139, 250, 264, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 0, 637, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 289, 0,
	0, 0, 0, 203, 0, 235, 140, 155, 113, 152,
	99, 109, 0, 138, 181, 211, 215, 0, 0, 0,
	121, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 267, 228, 102, 237,
	249, 118, 223, 0, 0, 0, 104, 247, 234, 170,
	149, 150, 103, 0, 209, 126, 134, 123, 183, 244,
	245, 122, 270, 110, 258, 106, 111, 257, 177, 240,
	248, 171, 164, 105, 246, 169, 163, 154, 130, 142,
	201, 161, 202, 143, 174, 173, 175, 0, 0, 0,
	232, 255, 271, 115, 0, 239, 265, 266, 0, 205,
	116, 135, 129, 200, 133, 176, 112, 145, 229, 153,
	160, 208, 269, 190, 214, 119, 254, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 107, 157,
	268, 206, 132, 0, 0, 256, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 108, 114, 120, 124, 128, 131, 137,
	141, 144, 146, 147, 148, 151, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 139, 250, 264,
	428, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 289, 0,
	0, 0, 0, 203, 0, 235, 140, 155, 113, 152,
	99, 109, 0, 138, 181, 211, 215, 0, 0, 0,
	121, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 267, 228, 102, 237,
	249, 118, 223, 0, 0, 0, 104, 247, 234, 170,
	149, 150, 103, 0, 209, 126, 134, 123, 183, 244,
	245, 122, 270, 110, 258, 106, 111, 257, 177, 240,
	248, 171, 164, 105, 246, 169, 163, 154, 130, 142,
	201, 161, 202, 143, 174, 173, 175, 0, 0, 0,
	232, 255, 271, 115, 0, 239, 265, 266, 0, 205,
	116, 135, 129, 200, 133, 176, 112, 145, 229, 153,
	160, 208, 269, 190, 214, 119, 254, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 107, 157,
	268, 206, 132, 0, 0, 256, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 108, 114, 120, 124, 128, 131, 137,
	141, 144, 146, 147, 148, 151, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 139, 250, 264,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 156, 0, 0, 0, 0,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 320, 0, 136, 0, 0,
	0, 289, 0, 0, 0, 0, 203, 0, 235, 140,
	155, 113, 152, 99, 109, 0, 138, 181, 211, 215,
	0, 0, 0, 121, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 267,
	228, 102, 237, 249, 118, 223, 0, 0, 0, 104,
	247, 234, 170, 149, 150, 103, 0, 209, 126, 134,
	123, 183, 244, 245, 122, 270, 110, 258, 106, 111,
	257, 177, 240, 248, 171, 164, 105, 246, 169, 163,
	154, 130, 142, 201, 161, 202, 143, 174, 173, 175,
	0, 0, 0, 232, 255, 271, 115, 0, 239, 265,
	266, 0, 205, 116, 135, 129, 200, 133, 176, 112,
	145, 229, 153, 160, 208, 269, 190, 214, 119, 254,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 107, 157, 268, 206, 132, 0, 0, 256, 0,
	0, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 101, 108, 114, 120, 124,
	128, 131, 137, 141, 144, 146, 147, 148, 151, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	319, 250, 264, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 156, 0,
	0, 0, 0, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 284, 0, 289, 0, 0, 0, 0, 203,
	0, 235, 140, 155, 113, 152, 99, 109, 0, 138,
	181, 211, 215, 0, 0, 0, 121, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 267, 228, 102, 237, 249, 118, 223, 0,
	0, 0, 104, 247, 234, 170, 149, 150, 103, 0,
	209, 126, 134, 123, 183, 244, 245, 122, 270, 110,
	258, 106, 111, 257, 177, 240, 248, 171, 164, 105,
	246, 169, 163, 154, 130, 142, 201, 161, 202, 143,
	174, 173, 175, 0, 0, 0, 232, 255, 271, 115,
	0, 239, 265, 266, 0, 205, 116, 135, 129, 200,
	133, 176, 112, 145, 229, 153, 160, 208, 269, 190,
	214, 119, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 107, 157, 268, 206, 132, 0,
	0, 256, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 108,
	114, 120, 124, 128, 131, 137, 141, 144, 146, 147,
	148, 151, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 139, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 289, 0, 0,
	0, 0, 203, 0, 235, 140, 155, 113, 152, 99,
	109, 0, 138, 181, 211, 215, 0, 0, 0, 121,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 267, 228, 102, 237, 249,
	118, 223, 0, 0, 0, 104, 247, 234, 170, 149,
	150, 103, 0, 209, 126, 134, 123, 183, 244, 245,
	122, 270, 110, 258, 106, 111, 257, 177, 240, 248,
	171, 164, 105, 246, 169, 163, 154, 130, 142, 201,
	161, 202, 143, 174, 173, 175, 0, 0, 0, 232,
	255, 271, 115, 0, 239, 265, 266, 0, 205, 116,
	135, 129, 200, 133, 176, 112, 145, 229, 153, 160,
	208, 269, 190, 214, 119, 254, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 107, 157, 268,
	206, 132, 0, 0, 256, 0, 0, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 101, 108, 114, 120, 124, 128, 131, 137, 141,
	144, 146, 147, 148, 151, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 139, 250, 264,
}

var yyPact = [...]int{
	1714, -1000, -279, 1099, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1032,
	831, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 352, 12874,
	-3, 133, -16, 17835, 132, 759, 18188, -1000, -1000, 14,
	18188, 18, 17482, -1000, -1000, -91, -105, -1000, 10403, 597,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 826, 1018,
	1019, 1028, 593, 1100, -1000, 8979, 99, 99, 17129, 7567,
	25, -1000, -1000, 414, 18188, 125, 18188, -153, 92, 92,
	92, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 128, 18188, 561, 561, 257, -1000, 18188, 90,
	561, 90, 90, 90, 18188, -1000, 180, -1000, -1000, -1000,
	18188, 561, 959, 341, 66, 5005, -1000, 194, -1000, 5005,
	33, 5005, -47, 1045, 34, -48, -1000, 5005, -1000, -1000,
	-1000, -1000, -1000, 112, -1000, -1000, 18188, 16769, 146, 323,
	-1000, -1000, -1000, -1000, -1000, -1000, 613, 545, -1000, 10403,
	1938, 775, 775, -1000, -1000, 144, -1000, -1000, 11815, 11815,
	11815, 11815, 11815, 11815, 11815, 11815, 11815, 11815, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 775, 178, -1000, 10050, 775, 775, 775, 775,
	775, 775, 775, 775, 775, 775, 775, 10403, 775, 775,
	775, 775, 775, 775, 775, 775, 775, 775, 775, 775,
	775, 775, 775, 775, 775, 775, -1000, -1000, 775, -1000,
	-1000, 1032, -1000, 831, -1000, -1000, -1000, 969, 10403, 10403,
	1032, -1000, 899, 8979, -1000, -1000, 1025, -1000, -1000, -1000,
	-1000, 370, 1085, -1000, 12521, 173, 16416, 15357, 18188, 767,
	760, -1000, -1000, 172, 771, 7201, -92, -1000, -1000, -1000,
	298, 14651, -1000, -1000, -1000, 957, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -92, 722,
	18188, -1000, 335, -1000, 561, 5005, 119, 561, 327, 561,
	18188, 18188, 5005, 5005, 5005, 40, 74, 70, 18188, 757,
	110, 18188, 1008, 857, 18188, 561, 561, -1000, 6469, -1000,
	5005, 341, -1000, 523, 10403, 5005, 5005, 5005, 18188, 5005,
	5005, -1000, -1000, -1000, 322, -1000, -1000, -1000, -1000, 5005,
	5005, -1000, 1084, 317, -1000, -1000, -1000, -1000, 10403, 227,
	-1000, 851, -1000, 17, -1000, -1000, -1000, -1000, -1000, 1099,
	-1000, -1000, -1000, -128, -1000, -1000, 10403, 10403, 10403, 10403,
	529, 261, 11815, 516, 243, 11815, 11815, 11815, 11815, 11815,
	11815, 11815, 11815, 11815, 11815, 11815, 11815, 11815, 11815, 11815,
	597, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 561,
	-1000, 1096, 907, 907, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 12168, 7920, 6469, 593, 714, 1032, 8979,
	8979, 10403, 10403, 9685, 9332, 8979, -1000, -1000, -1000, 974,
	329, 545, 10756, 907, 18188, -1000, -1000, 11462, -1000, -1000,
	-1000, -1000, -1000, 530, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 18188, 18188, 8979, 8979, 8979, 8979, 8979, -1000, 10403,
	1019, 593, 1025, -1000, 1092, 237, 582, 756, -1000, 608,
	1019, 14298, 792, -1000, 1025, -1000, -1000, -1000, 18188, -1000,
	-1000, 16063, -1000, -1000, 6103, 55, 18188, -1000, 768, 966,
	-1000, -1000, -1000, 1012, 13592, 13945, 55, 738, 15357, 18188,
	-1000, -1000, 15357, 18188, 5737, 6835, -92, -1000, 672, -1000,
	-126, -119, 8273, 195, -1000, -1000, -1000, -1000, 672, 4639,
	824, 595, 397, -79, -1000, -1000, -1000, 780, -1000, 780,
	780, 780, 780, -22, -22, -22, -22, -1000, -1000, -1000,
	-1000, -1000, 825, 822, -1000, 780, 780, 780, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 813, 813, 813, 788,
	788, 835, -1000, 18188, 5005, 1007, 5005, -1000, 87, -1000,
	-1000, -1000, 18188, 18188, 18188, 18188, 18188, 159, 18188, 18188,
	748, -1000, 18188, 5005, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 545, -1000, -1000, -1000, -1000, -1000, -1000, 18188,
	-1000, -1000, -1000, -1000, 18188, 341, 18188, 18188, 545, -1000,
	512, 18188, 18188, -1000, -1000, -1000, -1000, -1000, 545, 261,
	311, 338, -1000, -1000, 419, -1000, -1000, 2202, -1000, -1000,
	-1000, -1000, 516, 11815, 11815, 11815, 351, 2202, 2163, 588,
	2015, 203, 319, 319, 204, 204, 204, 204, 204, 454,
	454, -1000, 530, -1000, -1000, -1000, 530, 8979, 8979, 743,
	775, 171, -1000, 826, -1000, -1000, 1019, 704, 704, 534,
	664, 266, 1077, 704, 262, 1073, 704, 704, 8979, -1000,
	-1000, 355, -1000, 10403, 890, 1056, 393, -1000, -1000, -1000,
	236, 530, -1000, 163, -1000, 393, 707, 684, 704, 530,
	530, 704, 704, 969, -1000, -1000, 920, 10403, 10403, 10403,
	-1000, -1000, -1000, 969, 1029, -1000, 942, 932, 1044, 8979,
	15357, 1025, -1000, -1000, -1000, 158, 823, 775, -1000, 18188,
	15357, 15357, 15357, 15357, 15357, -1000, 883, 881, -1000, 877,
	875, 885, 18188, -1000, 709, 593, 13592, 174, 775, -1000,
	15710, -1000, -1000, 1044, 15357, 649, -1000, 649, -1000, 157,
	-1000, -1000, 672, -92, -68, -1000, -1000, -1000, -1000, 545,
	-1000, 679, 647, 4273, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 804, 561, -1000, 992, 228, 225, 561, 981, -1000,
	-1000, -1000, 961, -1000, 346, -87, -1000, -1000, 407, -22,
	-22, -1000, -1000, 195, 952, 195, 195, 195, 507, 507,
	-1000, -1000, -1000, -1000, 403, -1000, -1000, -1000, 402, -1000,
	850, 18188, 5005, -1000, -1000, -1000, -1000, 205, 205, 217,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 53, 761, -1000, -1000, -1000, -1000, 1, 39, 106,
	-1000, 5005, -1000, 317, 317, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 351, 2202, 1891, -1000, 11815,
	11815, -1000, -1000, 704, 704, 8979, 6469, 1032, 969, -1000,
	-1000, 103, 597, 103, 11815, 11815, -1000, 11815, 11815, -1000,
	-166, 781, 318, -1000, 10403, 296, 11815, 1054, 11815, -1000,
	11815, -1000, 6469, -1000, 11815, 11815, -1000, -1000, -1000, -1000,
	-1000, -1000, 918, 545, 545, -1000, -1000, 18188, -1000, -1000,
	-1000, -1000, 1039, 10403, -1000, 626, -1000, 5371, 849, 18188,
	775, 1099, 13592, 18188, 782, -1000, 291, 966, 820, 848,
	896, -1000, -1000, -1000, -1000, 871, -1000, 836, -1000, -1000,
	-1000, -1000, -1000, 593, -1000, 123, 122, 121, 18188, -1000,
	1032, 649, -1000, -1000, 214, -1000, -1000, -133, -139, -1000,
	-1000, -1000, 4639, -1000, 4639, 18188, 71, -1000, 561, 561,
	-1000, -1000, -1000, 803, 844, 11815, -1000, -1000, -1000, 587,
	195, 195, -1000, 248, -1000, -1000, -1000, 696, -1000, 694,
	620, 691, 18188, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 18188, -1000, -1000, -1000, -1000, -1000, 18188, -171,
	561, 18188, 18188, 18188, 18188, -1000, 341, 341, -1000, 11815,
	2202, 2202, -1000, -1000, 530, -1000, 1019, -1000, 530, 780,
	780, -1000, 780, 788, -1000, 780, 7, 780, -6, 530,
	530, 2053, 2036, 1955, 1806, 775, -160, -1000, 545, 10403,
	393, 11815, 393, 393, -1000, 1776, 1645, -1000, -1000, 1036,
	1027, 545, -1000, -1000, 999, 580, 605, -1000, -1000, 8626,
	678, 156, 654, -1000, 1032, 18188, 10403, -1000, -1000, 10403,
	786, -1000, 10403, -1000, -1000, -1000, 1032, 775, 775, 775,
	654, 1019, -1000, -1000, -1000, -1000, 4273, -1000, 651, -1000,
	780, -1000, -1000, -1000, 18188, -72, 1091, 2202, -1000, -1000,
	-1000, -1000, -1000, -22, 479, -22, 383, -1000, 382, 5005,
	-1000, -1000, -1000, -1000, 1002, -1000, 6469, -1000, -1000, 778,
	834, -1000, -1000, -1000, -1000, 2202, -1000, 969, -1000, -1000,
	135, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11815,
	11815, 11815, 11815, 11815, 1019, 464, 545, -1000, 393, -1000,
	-1000, 11815, 11815, -1000, 10403, 10403, 973, -1000, 775, -1000,
	755, 18188, 18188, -1000, 18188, 1019, -1000, 545, 545, 18188,
	545, 15004, 18188, 18188, 13227, -1000, 179, 18188, -1000, 630,
	-1000, 234, -1000, -84, 195, -1000, 195, 565, 542, -1000,
	775, 617, -1000, 276, 18188, 18188, -1000, -1000, -1000, 393,
	393, 393, 393, 57, 530, -1000, -1000, 393, 393, 545,
	613, 1090, -1000, 775, 1099, 152, -1000, -1000, -1000, 622,
	610, -1000, 610, 610, 174, 179, -1000, 561, 270, 455,
	-1000, 68, 18188, 368, 964, -1000, 963, -1000, -1000, -1000,
	-1000, -1000, 49, 6469, 4639, 589, -1000, -1000, -1000, -1000,
	-1000, 530, 60, -174, -1000, -1000, -1000, 18188, 605, 18188,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 380, -1000, -1000,
	18188, -1000, -1000, 445, -1000, -1000, 585, -1000, 18188, -1000,
	-1000, 761, -1000, 908, -169, -179, 535, -1000, -1000, 776,
	-1000, -1000, 49, 928, -171, -1000, 897, -1000, 18188, -1000,
	46, -1000, -172, 553, 44, -175, 838, 775, -182, 837,
	-1000, 1049, 11109, -1000, -1000, 1051, 219, 219, 393, 530,
	-1000, -1000, -1000, 75, 468, -1000, -1000, -1000, -1000, -1000,
	-1000,
}

var yyPgo = [...]int{
	0, 1317, 1316, 18, 78, 75, 1315, 1314, 1312, 99,
	97, 96, 1311, 1310, 1309, 1308, 1307, 1306, 1305, 1304,
	1303, 1300, 1299, 1298, 1296, 1292, 1291, 1288, 1287, 1285,
	1283, 1282, 1280, 1279, 106, 1278, 73, 1276, 1275, 1274,
	1273, 1272, 1271, 1268, 1267, 39, 105, 55, 61, 1264,
	68, 1603, 1261, 52, 58, 64, 1260, 28, 1258, 1257,
	92, 1256, 1252, 62, 1247, 1245, 45, 1244, 88, 1243,
	10, 37, 1241, 1240, 1239, 1233, 1232, 74, 59, 1231,
	1229, 14, 1228, 1227, 95, 1225, 63, 13, 11, 9,
	22, 1222, 76, 1216, 31, 1214, 70, 1213, 1211, 1210,
	1206, 35, 1205, 66, 1204, 48, 23, 1202, 15, 81,
	32, 21, 6, 1201, 1200, 26, 82, 56, 69, 1199,
	1198, 579, 1197, 1196, 41, 1194, 1193, 1191, 29, 1190,
	100, 424, 1189, 1188, 1187, 1184, 43, 1075, 1910, 151,
	83, 1183, 1182, 1181, 2777, 49, 57, 17, 1179, 1178,
	1177, 36, 67, 34, 1176, 1175, 38, 1174, 1172, 1171,
	1170, 1169, 1168, 1166, 280, 1165, 1164, 1163, 33, 20,
	1159, 1158, 71, 24, 1157, 1156, 1152, 50, 77, 1151,
	1149, 54, 1148, 1146, 25, 1141, 1140, 1139, 1138, 1137,
	27, 12, 1135, 16, 1134, 8, 1133, 30, 1132, 4,
	1129, 7, 1127, 3, 0, 1125, 5, 42, 1, 1120,
	2, 1111, 1109, 1410, 1390, 86, 1105, 103,
}

var yyR1 = [...]int{
	0, 211, 212, 212, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 204, 204, 204, 21, 22, 3, 3, 3, 3,
	2, 2, 8, 4, 5, 5, 9, 9, 37, 37,
	10, 11, 11, 11, 11, 215, 215, 60, 60, 61,
	61, 109, 109, 12, 14, 14, 13, 13, 118, 118,
	117, 117, 117, 119, 119, 119, 119, 154, 154, 15,
	15, 15, 15, 15, 15, 15, 206, 206, 205, 203,
	203, 202, 202, 201, 23, 186, 188, 188, 187, 187,
	187, 187, 178, 157, 157, 157, 157, 160, 160, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 159, 159,
	159, 159, 159, 161, 161, 161, 161, 161, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 163, 163, 163, 163, 163, 163, 163,
	163, 177, 177, 164, 164, 172, 172, 173, 173, 173,
	170, 170, 171, 171, 174, 174, 174, 166, 166, 167,
	167, 175, 175, 168, 168, 168, 169, 169, 169, 176,
	176, 176, 176, 176, 165, 165, 179, 179, 196, 196,
	195, 195, 195, 185, 185, 192, 192, 192, 192, 192,
	182, 182, 182, 183, 183, 181, 181, 184, 184, 194,
	194, 193, 180, 180, 197, 197, 197, 197, 209, 210,
	208, 208, 208, 208, 208, 189, 189, 189, 190, 190,
	190, 191, 191, 191, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 200, 198, 198, 199, 199,
	17, 24, 24, 18, 18, 18, 18, 18, 19, 19,
	25, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 125, 125,
	127, 127, 123, 123, 126, 126, 124, 124, 124, 128,
	128, 128, 129, 129, 155, 155, 155, 27, 27, 29,
	30, 31, 31, 149, 149, 150, 150, 32, 33, 38,
	38, 38, 38, 38, 38, 40, 40, 40, 7, 7,
	7, 7, 39, 39, 39, 6, 6, 28, 28, 28,
	28, 20, 216, 34, 35, 35, 36, 36, 36, 42,
	42, 42, 41, 41, 41, 47, 47, 49, 49, 49,
	49, 49, 50, 50, 50, 50, 50, 50, 46, 46,
	48, 48, 48, 48, 141, 141, 141, 140, 140, 52,
	52, 53, 53, 54, 54, 55, 55, 55, 93, 69,
	69, 108, 108, 110, 110, 56, 56, 56, 56, 57,
	57, 58, 58, 59, 59, 148, 148, 147, 147, 147,
	146, 146, 62, 62, 62, 64, 63, 63, 63, 63,
	65, 65, 67, 67, 66, 66, 68, 70, 70, 70,
	70, 70, 71, 71, 51, 51, 51, 51, 51, 51,
	51, 51, 122, 122, 74, 74, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 85, 85, 85, 85,
	85, 85, 75, 75, 75, 75, 75, 75, 75, 45,
	45, 86, 86, 86, 92, 87, 87, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 82, 82, 82, 82, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 73, 73, 73, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 217, 217, 84, 83, 83,
	83, 83, 83, 83, 83, 43, 43, 43, 43, 43,
	153, 153, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 97, 97, 44, 44, 95,
	95, 96, 98, 98, 94, 94, 94, 77, 77, 77,
	77, 77, 77, 77, 77, 79, 79, 79, 99, 99,
	100, 100, 101, 101, 102, 102, 103, 104, 104, 104,
	105, 105, 105, 105, 106, 106, 106, 76, 76, 76,
	76, 107, 107, 107, 107, 111, 111, 88, 88, 90,
	90, 89, 91, 112, 112, 115, 113, 113, 113, 116,
	116, 116, 116, 114, 114, 114, 143, 143, 143, 120,
	120, 130, 130, 131, 131, 121, 121, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 133, 133, 133,
	134, 134, 135, 135, 135, 142, 142, 138, 138, 139,
	139, 144, 144, 145, 145, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 213, 214, 151, 152, 152, 152,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 2, 3, 4, 6, 6, 7,
	4, 6, 5, 8, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 0, 4, 3, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	2, 8, 4, 6, 5, 5, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 2, 4, 1, 3,
	3, 3, 8, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 0, 1, 2, 0, 2, 0,
	3, 0, 1, 0, 3, 3, 0, 2, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	3, 2, 3, 1, 10, 11, 11, 12, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 7, 7, 4,
	5, 4, 4, 7, 5, 5, 5, 12, 7, 5,
	9, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	3, 3, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 3, 4, 4, 4, 4, 4, 4,
	3, 2, 7, 2, 3, 4, 3, 7, 5, 4,
	2, 4, 4, 3, 3, 5, 2, 3, 1, 1,
	0, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 0, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 5, 0, 1, 0, 1, 2, 3, 0,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 3, 2, 2, 3,
	3, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 1, 2,
	3, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	7, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 3, 0, 5, 4,
	5, 5, 0, 2, 1, 3, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 2, 2, 2, 8, 5,
	6, 7, 6, 4, 6, 4, 1, 1, 1, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 5,
	4, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 2, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -211, -1, -3, -8, -9, -10, -11, -12, -14,
	-13, -15, -16, -17, -18, -19, -25, -26, -27, -29,
	-30, -31, -32, -33, -6, -28, -20, -21, -22, -4,
	-213, 6, 7, -37, 9, 10, 30, 180, -23, 129,
	130, 132, 131, 165, 133, 158, 54, 179, 182, 183,
	184, 185, -40, 163, 164, 31, 32, 135, 34, 35,
	58, 8, 268, 160, 159, 25, -212, 372, -36, 5,
	-101, 15, -3, -34, -216, -34, -34, -34, -34, -34,
	-34, -186, -188, 58, 102, -135, 139, 83, 260, 136,
	137, 143, -138, -204, -137, 61, 62, 63, 278, 151,
	312, 313, 179, 193, 187, 214, 206, 279, 314, 152,
	204, 207, 247, 149, 315, 234, 241, 72, 182, 256,
	316, 161, 202, 198, 317, 289, 196, 27, 318, 243,
	219, 319, 283, 245, 197, 242, 135, 320, 154, 368,
	147, 321, 220, 224, 322, 248, 323, 324, 325, 191,
	192, 326, 150, 250, 218, 148, 33, 280, 38, 169,
	251, 222, 327, 217, 213, 328, 329, 330, 331, 216,
	190, 212, 42, 226, 225, 227, 246, 209, 332, 333,
	334, 155, 335, 199, 18, 336, 337, 338, 339, 340,
	254, 164, 341, 167, 342, 343, 344, 345, 346, 347,
	244, 221, 223, 144, 171, 240, 282, 348, 252, 195,
	349, 156, 168, 163, 255, 157, 350, 351, 352, 353,
	354, 355, 356, 183, 357, 358, 359, 360, 178, 249,
	258, 41, 231, 361, 189, 146, 362, 180, 175, 236,
	210, 170, 363, 364, 200, 201, 215, 188, 211, 181,
	369, 172, 165, 365, 257, 232, 286, 208, 205, 176,
	366, 173, 174, 367, 370, 237, 238, 177, 281, 253,
	203, 233, -121, 139, 260, 136, 238, 141, 137, 137,
	138, 139, 260, 136, 137, -66, -144, -204, -137, 139,
	137, 120, 207, 247, 129, 235, 243, -127, 244, 171,
	-155, 137, -123, 234, 237, 238, 177, -204, 245, 249,
	248, 239, -144, -149, 186, -138, 184, -66, -38, 368,
	133, -151, -151, 236, 236, -151, -87, -51, -72, 86,
	-78, 29, 23, -77, -74, -94, -91, -92, 120, 121,
	123, 122, 124, 109, 110, 117, 87, 125, -82, -80,
	-81, -83, 65, 64, 73, 66, 67, 68, 69, 74,
	75, 76, -138, -144, -89, -213, 48, 49, 269, 270,
	271, 272, 277, 284, 285, 20, 273, 89, 78, 82,
	37, 259, 267, 266, 265, 263, 264, 261, 262, 275,
	276, 142, 260, 136, 115, 268, -204, -137, -153, -204,
	65, -5, -4, -213, 6, 20, 21, -105, 17, 16,
	-214, 60, -42, -49, 43, 44, -50, 21, 36, 47,
	45, -35, -48, 111, -51, -144, -121, -121, 11, -60,
	-61, -66, -68, -144, -113, -154, 181, -116, 249, 248,
	-139, -114, -138, -136, 247, 207, 246, 134, 287, 85,
	22, 24, 229, 88, 120, 16, 89, 119, 269, 129,
	52, 288, 261, 262, 259, 271, 272, 260, 235, 29,
	10, 290, 25, 159, 21, 36, 113, 131, 92, 93,
	162, 23, 160, 76, 293, 19, 55, 11, 13, 294,
	295, 14, 142, 141, 104, 138, 50, 8, 125, 26,
	101, 46, 296, 28, 297, 298, 299, 300, 48, 102,
	17, 263, 264, 31, 301, 277, 284, 285, 166, 115,
	53, 39, 86, 302, 303, 74, 304, 77, 56, 83,
	15, 51, 305, 306, 307, 308, 103, 132, 268, 49,
	309, 136, 6, 274, 30, 158, 47, 310, 137, 91,
	275, 276, 140, 75, 5, 143, 32, 9, 54, 57,
	265, 266, 267, 37, 90, 12, 311, 84, 181, -187,
	102, -178, -204, -66, 138, -66, 268, -131, 142, -131,
	-131, 137, -66, -204, -204, 129, 131, 134, 56, -24,
	-66, -130, 142, -204, -130, -130, -130, -66, 126, -66,
	-204, 30, -128, 102, 12, 260, -204, 171, 137, 172,
	139, -152, -213, -139, -182, 138, 33, 150, -152, 175,
	176, -152, -126, -125, 241, 242, 236, 240, 12, 176,
	236, 174, -152, 140, -138, -39, -138, 65, -7, -3,
	-10, -9, -11, 94, -151, -151, 59, 85, 83, 84,
	101, -51, -75, 104, 86, 102, 103, 88, 106, 105,
	116, 109, 110, 111, 112, 113, 114, 115, 107, 108,
	119, 94, 95, 96, 97, 98, 99, 100, -122, -213,
	-92, -213, 127, 128, -78, -78, -78, -78, -78, -78,
	-78, -78, -78, -78, -213, 126, -2, -87, -4, -213,
	-213, -213, -213, -213, -213, -213, -92, -92, -92, -213,
	-97, -51, -213, -213, -213, -217, -84, -213, -217, -84,
	-217, -84, -217, -213, -217, -84, -217, -84, -217, -217,
	-84, -213, -213, -213, -213, -213, -213, -213, -89, -213,
	-101, -3, -34, -106, 19, 31, -51, -102, -103, -51,
	-101, 39, -46, -48, -50, 43, 44, 71, 11, -141,
	-140, 22, -138, 65, 126, -67, 26, -66, -53, -54,
	-55, -56, -69, -93, -213, -66, -66, -60, -215, 59,
	11, 57, -215, 59, 126, 59, 181, -116, -118, -117,
	250, 252, 94, -143, -138, 65, 29, 30, -118, 60,
	59, -66, -157, -160, -162, -161, -163, -158, -159, 204,
	205, 120, 208, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 30, 161, 200, 201, 202, 203, 220,
	221, 222, 223, 224, 225, 226, 227, 187, 206, 279,
	188, 189, 190, 191, 192, 193, 195, 196, 197, 198,
	199, -204, -152, 139, -204, 86, -204, -66, -66, -152,
	-152, -152, 173, 173, 137, 137, 178, -66, 59, 140,
	-60, 23, 56, -66, -204, -204, -145, -144, -136, -152,
	-128, 65, -51, -152, -152, -152, -66, -152, -152, -183,
	11, 104, -152, -152, 11, -124, 11, 104, -51, -129,
	102, 56, -150, 184, 218, 369, 370, 371, -51, -51,
	-51, -51, -85, 74, 86, 75, 76, -78, -86, -89,
	-92, 70, 104, 102, 103, 88, -78, -78, -78, -78,
	-78, -78, -78, -78, -78, -78, -78, -78, -78, -78,
	-78, -153, -204, -77, -77, -138, -47, 21, 36, -46,
	-139, -145, -136, -36, -214, -214, -101, -46, -46, -51,
	-51, -94, 65, -46, -94, 65, -46, -46, -41, 21,
	36, -95, -96, 90, -73, -77, -78, 79, 80, 81,
	-77, -94, -138, -144, -214, -78, -138, -138, -46, -47,
	-47, -46, -46, -105, -214, 9, 104, 59, 18, 59,
	-104, 24, 25, -105, -79, -138, 66, 69, -52, 59,
	11, -50, -66, -140, 111, -145, -109, 167, -66, 30,
	59, -62, -64, -63, -65, 46, 50, 52, 47, 48,
	49, 53, -148, 22, -53, -3, -213, -147, 167, -146,
	22, -144, 65, -109, 57, -53, -66, -53, -68, -144,
	111, -116, -118, 59, 251, 253, 254, 56, 77, -51,
	-169, 119, -189, -190, -191, -139, 65, 66, -178, -179,
	-180, -192, 153, -197, 144, 146, 143, -181, 154, 138,
	28, 60, -174, 74, 86, -170, 232, -164, 58, -164,
	-164, -164, -164, -168, 207, -168, -168, -168, 58, 58,
	-164, -164, -164, -172, 58, -172, -172, -173, 58, -173,
	-142, 57, -66, -152, 23, -152, -132, 134, 131, 132,
	-200, 130, 229, 207, 72, 29, 15, 269, 167, 286,
	-204, 168, -66, -66, -66, -66, -66, 134, 131, -66,
	-66, -66, -152, -66, -66, -128, -144, -144, 65, -66,
	-138, 74, 75, 76, -86, -78, -78, -78, -45, 162,
	85, -214, -214, -46, -46, -213, 126, -5, -105, -214,
	-214, 59, 57, 22, 11, 11, -214, 11, 11, -214,
	-214, -46, -98, -96, 92, -51, 11, -77, 11, -214,
	104, -214, 126, -214, 59, 59, -214, -214, -214, -214,
	-214, -106, 41, -51, -51, -103, -106, -120, 19, 11,
	37, 37, -71, 12, -48, -53, -50, 126, -76, 30,
	37, -3, -213, -213, -112, -115, -94, -54, -55, -55,
	-54, -55, 46, 46, 46, 51, 46, 51, 46, -63,
	-144, -214, -214, -3, -70, 54, 141, 55, -213, -146,
	-71, -53, -71, -71, 126, -117, -119, 255, 252, 258,
	-204, 65, 59, -191, 94, 58, -204, 28, -181, -181,
	-184, -204, -184, 28, -166, 29, 74, -171, 233, 66,
	-168, -168, -169, 30, -169, -169, -169, -177, 65, -177,
	66, 66, 56, -138, -152, -151, -207, 149, 145, 153,
	154, 147, 61, 62, 63, 138, 28, 144, 146, 167,
	143, -207, -133, -134, 140, 22, 138, 28, 167, -206,
	57, 173, 229, 173, 140, -152, -124, -124, -45, 85,
	-78, -78, -214, -214, -47, -139, -101, -106, -156, 120,
	204, 161, 202, 198, 218, 209, 231, 200, 232, -153,
	-156, -78, -78, -78, -78, 278, -101, 93, -51, 91,
	-78, 11, -78, -78, -139, -78, -78, 42, -66, -99,
	13, -51, 111, -111, 56, -112, -88, -90, -89, -213,
	-107, -138, -110, -138, -71, 59, 94, -58, -57, 56,
	57, -59, 56, -57, 46, 46, -214, 138, 138, 138,
	-110, -101, -71, 252, 256, 257, -190, -191, -194, -193,
	-138, -197, -184, -184, 58, -167, 56, -78, 60, -169,
	-169, -204, 120, 60, 59, 60, 59, 60, 59, -66,
	-151, -151, -66, -151, -138, -203, 281, -205, -204, -138,
	-138, -138, -66, -128, -128, -78, -214, -105, -214, -164,
	-164, -164, -173, -164, 192, -164, 192, -214, -214, 19,
	19, 19, 19, -213, -44, 274, -51, -214, -78, -214,
	-214, 59, 59, -100, 14, 16, 27, -111, 59, -214,
	-214, 59, 126, -214, 59, -101, -115, -51, -51, 58,
	-51, -213, -213, -213, -214, -105, 60, 59, -164, -108,
	-138, -175, 229, 9, -168, 65, -168, 66, 66, -152,
	26, -202, -201, -139, 58, 57, -106, -168, -204, -78,
	-78, -78, -78, -78, -105, 65, -214, -78, -78, -51,
	-87, 28, -90, 37, -3, -138, -138, -138, -105, -108,
	-108, -214, -108, -108, -147, -196, -195, 57, 148, 72,
	-193, 60, 59, -176, 144, 28, 143, -81, -169, -169,
	60, 60, -213, 59, 94, -108, -66, -214, -214, -214,
	-214, -43, 104, 281, -214, -214, -214, 9, -88, 126,
	60, -214, -214, -214, -70, -195, -204, -185, 94, 65,
	156, -138, -165, 72, 28, 28, -198, -199, 167, -201,
	-191, 60, -214, 279, 53, 282, -112, -138, 66, -66,
	65, -214, 59, -138, -206, 42, 280, 283, 58, -199,
	37, -203, 42, -108, 169, 281, 60, 170, 282, -209,
	-210, 56, -213, 283, -210, 56, 10, 9, -78, 166,
	-208, 157, 152, 155, 30, -208, -214, -214, 151, 29,
	74,
}

var yyDef = [...]int{
	30, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 632,
	0, 362, 362, 362, 362, 362, 362, 362, 0, 702,
	685, 0, 0, 0, 0, -2, 328, 329, 330, -2,
	0, 0, 339, 1013, 1013, 0, 0, 1013, 0, 0,
	1011, 48, 49, 345, 346, 347, 1, 3, 0, 366,
	640, 0, 0, -2, 364, 0, 685, 685, 0, 0,
	0, 79, 80, 0, 0, 0, 999, 0, 683, 683,
	683, 703, 704, 707, 708, 31, 32, 33, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 0, 0, 0, 0, 0, 686, 0, 681,
	0, 681, 681, 681, 0, 279, 444, 711, 712, 999,
	0, 0, 0, 319, 0, 1014, 291, 0, 293, 1014,
	0, 1014, 0, 300, 0, 0, 306, 1014, 311, 325,
	326, 313, 327, 0, 334, 337, 0, 352, 0, 877,
	344, 357, 358, 1013, 1013, 361, 34, 495, 454, 0,
	460, 462, 0, 497, 498, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 528,
	529, 530, 617, 618, 619, 620, 621, 622, 623, 624,
	464, 465, 614, 0, 662, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	0, 575, 575, 575, 575, 575, 575, 575, 575, 0,
	0, 0, 0, 0, 0, 0, -2, -2, 0, 590,
	591, 632, 44, 0, 362, 367, 368, 644, 0, 0,
	632, 1012, 0, 0, -2, -2, 378, 384, 385, 386,
	387, 363, 0, 390, 394, 0, 0, 0, 0, 0,
	0, 57, 59, 444, 63, 0, 987, 666, -2, -2,
	0, 0, 709, 710, -2, 849, -2, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 64, 0,
	0, 98, 0, 96, 0, 1014, 0, 0, 0, 0,
	0, 0, 1014, 1014, 1014, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 278, 0, 280,
	1014, 319, 283, 0, 0, 1014, 1014, 1014, 0, 1014,
	1014, 290, 1015, 1016, 0, 200, 201, 202, 294, 1014,
	1014, 296, 0, 316, 314, 315, 308, 309, 0, 322,
	303, 304, 307, 335, 338, 355, 353, 354, 356, 348,
	349, 350, 351, 0, 359, 360, 0, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 482, 483, 484, 485, 486, 487, 488, 461, 0,
	475, 0, 0, 0, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 0, 375, 0, 0, 0, 632, 0,
	0, 0, 0, 0, 0, 0, 545, 546, 547, 372,
	0, 606, 0, 0, 0, 559, 567, 0, 560, 568,
	561, 569, 562, 0, 563, 570, 564, 571, 565, 566,
	572, 0, 0, 0, 375, 375, 0, 0, 35, 0,
	640, 0, 377, 36, 0, 0, 641, 633, 634, 637,
	640, 0, 399, 388, 379, 382, 383, 365, 0, 391,
	395, 0, 397, 398, 0, 61, 0, 443, 0, 401,
	403, 404, 405, 425, 0, 427, -2, 0, 0, 0,
	55, 56, 0, 0, 0, 0, 987, 667, 67, 68,
	0, 0, 0, 176, 676, 677, 678, 674, 65, 225,
	0, 0, 164, 160, 104, 105, 106, 153, 108, 153,
	153, 153, 153, 173, 173, 173, 173, 136, 137, 138,
	139, 140, 0, 0, 123, 153, 153, 153, 127, 143,
	144, 145, 146, 147, 148, 149, 150, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 155, 155, 155, 157,
	157, 705, 82, 0, 1014, 0, 1014, 94, 0, 239,
	241, 242, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 682, 0, 1014, 276, 277, 445, 713, 714, 281,
	282, 320, 321, 284, 285, 286, 287, 288, 289, 0,
	203, 204, 295, 299, 0, 319, 0, 0, 301, 302,
	0, 0, 0, 336, 340, 341, 342, 343, 496, 455,
	456, 457, 459, 476, 0, 478, 480, 466, 467, 491,
	492, 493, 0, 0, 0, 0, 489, 471, 0, 502,
	503, 504, 505, 506, 507, 508, 509, 510, 511, 512,
	513, 516, 0, 514, 515, 526, 0, 0, 0, 376,
	615, 0, -2, 0, 494, 661, 640, 0, 0, 0,
	0, 499, 617, 0, 499, 617, 0, 0, 0, 373,
	374, 612, 609, 0, 0, 497, 0, 556, 557, 558,
	0, 0, 614, 0, 576, 0, 0, 0, 0, 0,
	0, 0, 0, 644, 45, 645, 0, 0, 0, 0,
	636, 638, 639, 644, 0, 625, 0, 0, 452, 0,
	0, 380, 42, 396, 392, 0, 0, 0, 442, 0,
	0, 0, 0, 0, 0, 432, 0, 0, 435, 0,
	0, 0, 0, 426, 0, 0, 0, 447, 931, 428,
	0, 430, 431, 452, 0, 452, 58, 452, 60, 0,
	446, 668, 66, 0, 0, 71, 72, 669, 670, 671,
	672, 0, 95, 226, 228, 231, 232, 233, 99, 100,
	101, 0, 0, 213, 0, 0, 207, 207, 0, 205,
	206, 97, 167, 165, 0, 162, 161, 107, 0, 173,
	173, 130, 131, 176, 0, 176, 176, 176, 0, 0,
	124, 125, 126, 118, 0, 119, 120, 121, 0, 122,
	0, 0, 1014, 84, 684, 85, 1013, 0, 0, 697,
	240, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 0, 86, 244, 246, 245, 249, 0, 0, 0,
	271, 1014, 275, 316, 316, 298, 317, 318, 323, 305,
	332, 477, 479, 481, 468, 489, 472, 0, 469, 0,
	0, 463, 531, 0, 0, 375, 0, 632, 644, 535,
	536, 0, 0, 0, 0, 0, 583, 0, 0, 584,
	0, 632, 0, 610, 0, 0, 0, 0, 0, 553,
	0, 555, 0, 577, 0, 0, 578, 579, 580, 581,
	582, 38, 0, 642, 643, 635, 37, 0, 679, 680,
	626, 627, 628, 0, 389, 400, 381, 0, 655, 0,
	0, 648, 0, 0, 452, 663, 0, 402, 421, 423,
	0, 418, 433, 434, 436, 0, 438, 0, 440, 441,
	406, 407, 408, 0, 409, 0, 0, 0, 0, 429,
	632, 452, 53, 54, 0, 69, 70, 0, 0, 76,
	177, 178, 0, 229, 0, 0, 0, 195, 207, 207,
	198, 208, 199, 0, 169, 0, 166, 103, 163, 0,
	176, 176, 132, 0, 133, 134, 135, 0, 151, 0,
	0, 0, 0, 706, 83, 234, 1013, 251, 252, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 1013, 0, 1013, 698, 699, 700, 701, 0, 89,
	0, 0, 0, 0, 0, 274, 319, 319, 470, 0,
	490, 473, 532, 533, 0, 616, 640, 40, 0, 153,
	153, 595, 153, 157, 598, 153, 600, 153, 603, 0,
	0, 0, 0, 0, 0, 0, 607, 549, 613, 0,
	0, 0, 0, 0, 615, 0, 0, 646, 39, 630,
	0, 453, 393, 46, 0, 655, 647, 657, 659, 0,
	0, 651, 0, 413, 632, 0, 0, 415, 422, 0,
	0, 416, 0, 417, 437, 439, -2, 0, 0, 0,
	0, 640, 52, 73, 74, 75, 227, 230, 0, 209,
	153, 212, 196, 197, 0, 171, 0, 168, 154, 128,
	129, 174, 175, 173, 0, 173, 0, 158, 0, 1014,
	235, 236, 237, 238, 0, 243, 0, 87, 88, 0,
	0, 248, 272, 292, 297, 474, 534, 644, 537, 592,
	173, 596, 597, 599, 601, 602, 604, 539, 538, 0,
	0, 0, 0, 0, 640, 0, 611, 550, 0, 552,
	554, 0, 0, 43, 0, 0, 0, 47, 0, 660,
	0, 0, 0, 62, 0, 640, 664, 665, 419, 0,
	424, 0, 0, 0, 427, 51, 187, 0, 211, 0,
	411, 179, 172, 0, 176, 152, 176, 0, 0, 81,
	0, 90, 91, 0, 0, 0, 41, 593, 594, 0,
	0, 0, 0, 585, 0, 608, 551, 0, 0, 631,
	629, 0, 658, 0, 650, 653, 652, 414, 50, 0,
	0, 449, 0, 0, 447, 186, 188, 0, 193, 0,
	210, 0, 0, 184, 0, 181, 183, 170, 141, 142,
	156, 159, 0, 0, 0, 0, 250, 540, 542, 541,
	543, 0, 0, 0, 548, 573, 574, 0, 649, 0,
	420, 448, 450, 451, 410, 189, 190, 0, 194, 192,
	0, 412, 102, 0, 180, 182, 0, 266, 0, 92,
	93, 86, 544, 0, 0, 0, 656, 654, 191, 0,
	185, 265, 0, 0, 89, 586, 0, 589, 0, 267,
	0, 247, 587, 0, 0, 0, 214, 0, 0, 215,
	216, 0, 0, 588, 217, 0, 0, 0, 0, 0,
	218, 220, 221, 0, 0, 219, 268, 269, 222, 223,
	224,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 126, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 372,
	95, 94, 96, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 89, 90, 91, 92, 93, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 123, 124, 125, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:343
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:348
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:349
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:353
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:382
		{
			setParseTree(yylex, nil)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:388
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:392
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:396
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:402
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:408
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:414
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:422
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:426
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:430
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:453
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:461
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:467
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:475
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:481
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:485
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:492
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:504
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:516
		{
			yyVAL.str = InsertStr
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:520
		{
			yyVAL.str = ReplaceStr
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:526
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:532
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:536
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:540
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:544
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:549
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:550
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:554
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:558
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:564
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:568
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:573
		{
			yyVAL.partitions = nil
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:577
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:589
		{
			yyVAL.statement = &StartTransaction{Comments: Comments(yyDollar[2].bytes2)}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:593
		{
			yyVAL.statement = &StartTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:599
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:603
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:609
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:613
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:619
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:623
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:627
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:633
		{
			yyVAL.str = RepeatableRead
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:637
		{
			yyVAL.str = ReadCommitted
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:641
		{
			yyVAL.str = ReadUncommitted
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:645
		{
			yyVAL.str = Serializable
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:651
		{
			yyVAL.str = SessionStr
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:655
		{
			yyVAL.str = GlobalStr
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:661
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:666
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 81:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:672
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:677
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:681
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:685
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:689
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:694
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:698
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:709
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:714
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:725
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:731
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:737
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:744
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:751
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:755
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:766
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:770
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:774
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 102:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:780
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 142:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1002
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1007
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1012
		{
			yyVAL.sqlVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1016
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1021
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1025
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1033
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1037
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1043
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1051
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1055
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1060
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1064
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1070
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1074
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1078
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1083
		{
			yyVAL.optVal = nil
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1087
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1092
		{
			yyVAL.optVal = nil
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1096
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1101
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1105
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1110
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1114
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1118
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1123
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1127
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1131
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1136
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1140
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1144
		{
			yyVAL.colKeyOpt = colKey
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1148
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1152
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1157
		{
			yyVAL.sqlVal = nil
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1161
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1167
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1171
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1181
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1187
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1191
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1196
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1202
		{
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1206
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1212
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1216
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1220
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1224
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1228
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1234
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1238
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1242
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1249
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1259
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1263
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = ""
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1272
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1282
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1288
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1294
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1298
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 214:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1305
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 215:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1309
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 216:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1313
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 217:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1317
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1323
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1329
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1335
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1339
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1343
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1347
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1351
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1356
		{
			yyVAL.str = ""
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1360
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1364
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1372
		{
			yyVAL.str = yyDollar[1].str
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1376
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1380
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1386
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1390
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1394
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1412
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1417
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1422
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1426
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1434
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1438
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1450
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1460
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1464
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1468
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1481
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 265:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1524
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1530
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1534
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 268:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1540
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 269:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1544
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1556
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1560
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1568
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1576
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1581
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1599
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1603
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &OtherRead{}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1614
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1619
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1624
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1646
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1658
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1662
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1667
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1671
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1675
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1679
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1683
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1688
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1698
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1702
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1710
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1715
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1719
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1723
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1727
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1741
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1747
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1751
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1757
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1761
		{
			yyVAL.str = "extended "
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1767
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1771
		{
			yyVAL.str = "full "
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1781
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1787
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1791
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1795
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1801
		{
			yyVAL.showFilter = nil
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1805
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1809
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1815
		{
			yyVAL.showFilter = nil
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1819
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1829
		{
			yyVAL.str = SessionStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.str = GlobalStr
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1839
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1849
		{
			yyVAL.statement = &Begin{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.statement = &Commit{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1861
		{
			yyVAL.statement = &Rollback{}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1865
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1870
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1872
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1875
		{
			yyVAL.empty = struct{}{}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1882
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1888
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1893
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1897
		{
			yyVAL.str = JSONStr
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1901
		{
			yyVAL.str = TreeStr
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1905
		{
			yyVAL.str = VitessStr
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1909
		{
			yyVAL.str = TraditionalStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1913
		{
			yyVAL.str = AnalyzeStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1919
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1923
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1927
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1933
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1945
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1950
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1958
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1964
		{
			yyVAL.statement = &OtherRead{}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1968
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1974
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1978
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1982
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1986
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1992
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1996
		{
			setAllowComments(yylex, true)
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2000
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2006
		{
			yyVAL.bytes2 = nil
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2010
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2016
		{
			yyVAL.str = UnionStr
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2020
		{
			yyVAL.str = UnionAllStr
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2024
		{
			yyVAL.str = UnionDistinctStr
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2029
		{
			yyVAL.str = ""
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2033
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.str = SQLCacheStr
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2042
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2046
		{
			yyVAL.str = DistinctStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2050
		{
			yyVAL.str = DistinctStr
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2055
		{
			yyVAL.selectExprs = nil
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2059
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2064
		{
			yyVAL.strs = nil
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2072
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2076
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2080
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2090
		{
			yyVAL.str = SQLCacheStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.str = DistinctStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.str = DistinctStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2102
		{
			yyVAL.str = StraightJoinHint
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2106
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2112
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2116
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2122
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2126
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2130
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2134
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2139
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2143
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2147
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2159
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2163
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2183
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2187
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2191
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2197
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2203
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 410:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2207
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2213
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2217
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2223
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2227
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2240
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2244
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2248
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2258
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2260
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2264
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2270
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2272
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2275
		{
			yyVAL.empty = struct{}{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2277
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2280
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2284
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2288
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2295
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2301
		{
			yyVAL.str = JoinStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2305
		{
			yyVAL.str = JoinStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2309
		{
			yyVAL.str = JoinStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2315
		{
			yyVAL.str = StraightJoinStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2321
		{
			yyVAL.str = LeftJoinStr
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2325
		{
			yyVAL.str = LeftJoinStr
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2329
		{
			yyVAL.str = RightJoinStr
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			yyVAL.str = RightJoinStr
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2339
		{
			yyVAL.str = NaturalJoinStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2343
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2353
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2357
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2363
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2367
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2373
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2378
		{
			yyVAL.indexHints = nil
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2382
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2386
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2390
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2394
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = nil
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2409
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2413
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2443
		{
			yyVAL.str = ""
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2447
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2453
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2457
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2505
		{
			yyVAL.str = IsNullStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			yyVAL.str = IsNotNullStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2513
		{
			yyVAL.str = IsTrueStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.str = IsNotTrueStr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2521
		{
			yyVAL.str = IsFalseStr
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2525
		{
			yyVAL.str = IsNotFalseStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2531
		{
			yyVAL.str = EqualStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2535
		{
			yyVAL.str = LessThanStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2539
		{
			yyVAL.str = GreaterThanStr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2543
		{
			yyVAL.str = LessEqualStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2547
		{
			yyVAL.str = GreaterEqualStr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2551
		{
			yyVAL.str = NotEqualStr
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2555
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2560
		{
			yyVAL.expr = nil
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2564
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2570
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2578
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2584
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2590
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2594
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2624
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2628
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2636
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2640
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2652
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2656
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2680
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2684
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2700
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2708
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2730
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 540:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 541:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2794
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 542:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 544:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2806
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = &SubqueryFuncExpr{FuncName: "any", Subquery: yyDollar[2].subquery}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = &SubqueryFuncExpr{FuncName: "some", Subquery: yyDollar[2].subquery}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = &SubqueryFuncExpr{FuncName: "all", Subquery: yyDollar[2].subquery}
		}
	case 548:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 550:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = &TrimFuncExpr{OpStr: string(yyDollar[3].str), Character: nil, Source: yyDollar[5].expr}
		}
	case 551:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = &TrimFuncExpr{OpStr: string(yyDollar[3].str), Character: yyDollar[4].expr, Source: yyDollar[6].expr}
		}
	case 552:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = &TrimFuncExpr{Character: yyDollar[3].expr, Source: yyDollar[5].expr}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = &TrimFuncExpr{Source: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = &PositionFuncExpr{SubString: yyDollar[3].expr, Expr: yyDollar[5].expr}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2845
		{
			yyVAL.str = "leading"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2846
		{
			yyVAL.str = "both"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2847
		{
			yyVAL.str = "trailing"
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2857
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2875
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2880
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2891
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2904
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2923
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 574:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2927
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2937
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2971
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2977
		{
			yyVAL.str = ""
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2981
		{
			yyVAL.str = BooleanModeStr
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2985
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 588:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2989
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2993
		{
			yyVAL.str = QueryExpansionStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3003
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3017
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3025
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3029
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3047
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3051
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3055
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3059
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3064
		{
			yyVAL.expr = nil
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3068
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3073
		{
			yyVAL.str = string("")
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3077
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3083
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3087
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3093
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3098
		{
			yyVAL.expr = nil
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3102
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3108
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3112
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3116
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3126
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.expr = &NullVal{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3156
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3165
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3169
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3174
		{
			yyVAL.exprs = nil
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3178
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3183
		{
			yyVAL.expr = nil
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3187
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3192
		{
			yyVAL.orderBy = nil
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3196
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3202
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3206
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3212
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3217
		{
			yyVAL.str = AscScr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.str = AscScr
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.str = DescScr
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3230
		{
			yyVAL.limit = nil
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3234
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3238
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3242
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3247
		{
			yyVAL.str = ""
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3251
		{
			yyVAL.str = ForUpdateStr
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3255
		{
			yyVAL.str = ShareModeStr
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3268
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3272
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3276
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3280
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3286
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3290
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3294
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 654:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3298
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3303
		{
			yyVAL.updateExprs = nil
		}
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3307
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3313
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3317
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3323
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3327
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3333
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3339
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3349
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3353
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3359
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3365
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3369
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3374
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3380
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3384
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3388
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3392
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3399
		{
			yyVAL.bytes = []byte("charset")
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3406
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3410
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3414
		{
			yyVAL.expr = &Default{}
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3423
		{
			yyVAL.byt = 0
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3425
		{
			yyVAL.byt = 1
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3428
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3430
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3433
		{
			yyVAL.str = ""
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3435
		{
			yyVAL.str = IgnoreStr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3439
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3441
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3443
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3445
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3447
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3451
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3453
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3455
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3457
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3460
		{
			yyVAL.empty = struct{}{}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3462
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3464
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3468
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3470
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3473
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3475
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3477
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3480
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3482
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3486
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3490
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3497
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3503
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3507
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3514
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3836
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3845
		{
			decNesting(yylex)
		}
	case 1013:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3850
		{
			skipToEnd(yylex)
		}
	case 1014:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3855
		{
			skipToEnd(yylex)
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3859
		{
			skipToEnd(yylex)
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3863
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
