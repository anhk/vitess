// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:17

package sqlparser

import __yyfmt__ "fmt"

//line sql.y:19

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const CALL = 57377
const DISTINCTROW = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const SQL_CALC_FOUND_ROWS = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const AT_ID = 57401
const AT_AT_ID = 57402
const HEX = 57403
const STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const LIST_ARG = 57409
const COMMENT = 57410
const COMMENT_KEYWORD = 57411
const BIT_LITERAL = 57412
const NULL = 57413
const TRUE = 57414
const FALSE = 57415
const OFF = 57416
const OR = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const SHIFT_LEFT = 57435
const SHIFT_RIGHT = 57436
const DIV = 57437
const MOD = 57438
const UNARY = 57439
const COLLATE = 57440
const BINARY = 57441
const UNDERSCORE_BINARY = 57442
const UNDERSCORE_UTF8MB4 = 57443
const UNDERSCORE_UTF8 = 57444
const UNDERSCORE_LATIN1 = 57445
const INTERVAL = 57446
const JSON_EXTRACT_OP = 57447
const JSON_UNQUOTE_EXTRACT_OP = 57448
const CREATE = 57449
const ALTER = 57450
const DROP = 57451
const RENAME = 57452
const ANALYZE = 57453
const ADD = 57454
const FLUSH = 57455
const SCHEMA = 57456
const TABLE = 57457
const INDEX = 57458
const VIEW = 57459
const TO = 57460
const IGNORE = 57461
const IF = 57462
const UNIQUE = 57463
const PRIMARY = 57464
const COLUMN = 57465
const SPATIAL = 57466
const FULLTEXT = 57467
const KEY_BLOCK_SIZE = 57468
const CHECK = 57469
const INDEXES = 57470
const ACTION = 57471
const CASCADE = 57472
const CONSTRAINT = 57473
const FOREIGN = 57474
const NO = 57475
const REFERENCES = 57476
const RESTRICT = 57477
const SHOW = 57478
const DESCRIBE = 57479
const EXPLAIN = 57480
const DATE = 57481
const ESCAPE = 57482
const REPAIR = 57483
const OPTIMIZE = 57484
const TRUNCATE = 57485
const MAXVALUE = 57486
const PARTITION = 57487
const REORGANIZE = 57488
const LESS = 57489
const THAN = 57490
const PROCEDURE = 57491
const TRIGGER = 57492
const VINDEX = 57493
const VINDEXES = 57494
const STATUS = 57495
const VARIABLES = 57496
const WARNINGS = 57497
const SEQUENCE = 57498
const BEGIN = 57499
const START = 57500
const TRANSACTION = 57501
const COMMIT = 57502
const ROLLBACK = 57503
const SAVEPOINT = 57504
const RELEASE = 57505
const WORK = 57506
const BIT = 57507
const TINYINT = 57508
const SMALLINT = 57509
const MEDIUMINT = 57510
const INT = 57511
const INTEGER = 57512
const BIGINT = 57513
const INTNUM = 57514
const REAL = 57515
const DOUBLE = 57516
const FLOAT_TYPE = 57517
const DECIMAL = 57518
const NUMERIC = 57519
const TIME = 57520
const TIMESTAMP = 57521
const DATETIME = 57522
const YEAR = 57523
const CHAR = 57524
const VARCHAR = 57525
const BOOL = 57526
const CHARACTER = 57527
const VARBINARY = 57528
const NCHAR = 57529
const TEXT = 57530
const TINYTEXT = 57531
const MEDIUMTEXT = 57532
const LONGTEXT = 57533
const BLOB = 57534
const TINYBLOB = 57535
const MEDIUMBLOB = 57536
const LONGBLOB = 57537
const JSON = 57538
const ENUM = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const NULLX = 57548
const AUTO_INCREMENT = 57549
const APPROXNUM = 57550
const SIGNED = 57551
const UNSIGNED = 57552
const ZEROFILL = 57553
const COLLATION = 57554
const DATABASES = 57555
const TABLES = 57556
const VITESS_METADATA = 57557
const VSCHEMA = 57558
const FULL = 57559
const PROCESSLIST = 57560
const COLUMNS = 57561
const FIELDS = 57562
const ENGINES = 57563
const PLUGINS = 57564
const EXTENDED = 57565
const NAMES = 57566
const CHARSET = 57567
const GLOBAL = 57568
const SESSION = 57569
const ISOLATION = 57570
const LEVEL = 57571
const READ = 57572
const WRITE = 57573
const ONLY = 57574
const REPEATABLE = 57575
const COMMITTED = 57576
const UNCOMMITTED = 57577
const SERIALIZABLE = 57578
const CURRENT_TIMESTAMP = 57579
const DATABASE = 57580
const CURRENT_DATE = 57581
const CURRENT_TIME = 57582
const LOCALTIME = 57583
const LOCALTIMESTAMP = 57584
const UTC_DATE = 57585
const UTC_TIME = 57586
const UTC_TIMESTAMP = 57587
const REPLACE = 57588
const CONVERT = 57589
const CAST = 57590
const SUBSTR = 57591
const SUBSTRING = 57592
const GROUP_CONCAT = 57593
const SEPARATOR = 57594
const TIMESTAMPADD = 57595
const TIMESTAMPDIFF = 57596
const MATCH = 57597
const AGAINST = 57598
const BOOLEAN = 57599
const LANGUAGE = 57600
const WITH = 57601
const QUERY = 57602
const EXPANSION = 57603
const ANY = 57604
const SOME = 57605
const UNUSED = 57606
const ARRAY = 57607
const CUME_DIST = 57608
const DESCRIPTION = 57609
const DENSE_RANK = 57610
const EMPTY = 57611
const EXCEPT = 57612
const FIRST_VALUE = 57613
const GROUPING = 57614
const GROUPS = 57615
const JSON_TABLE = 57616
const LAG = 57617
const LAST_VALUE = 57618
const LATERAL = 57619
const LEAD = 57620
const MEMBER = 57621
const NTH_VALUE = 57622
const NTILE = 57623
const OF = 57624
const OVER = 57625
const PERCENT_RANK = 57626
const RANK = 57627
const RECURSIVE = 57628
const ROW_NUMBER = 57629
const SYSTEM = 57630
const WINDOW = 57631
const ACTIVE = 57632
const ADMIN = 57633
const BUCKETS = 57634
const CLONE = 57635
const COMPONENT = 57636
const DEFINITION = 57637
const ENFORCED = 57638
const EXCLUDE = 57639
const FOLLOWING = 57640
const GEOMCOLLECTION = 57641
const GET_MASTER_PUBLIC_KEY = 57642
const HISTOGRAM = 57643
const HISTORY = 57644
const INACTIVE = 57645
const INVISIBLE = 57646
const LOCKED = 57647
const MASTER_COMPRESSION_ALGORITHMS = 57648
const MASTER_PUBLIC_KEY_PATH = 57649
const MASTER_TLS_CIPHERSUITES = 57650
const MASTER_ZSTD_COMPRESSION_LEVEL = 57651
const NESTED = 57652
const NETWORK_NAMESPACE = 57653
const NOWAIT = 57654
const NULLS = 57655
const OJ = 57656
const OLD = 57657
const OPTIONAL = 57658
const ORDINALITY = 57659
const ORGANIZATION = 57660
const OTHERS = 57661
const PATH = 57662
const PERSIST = 57663
const PERSIST_ONLY = 57664
const PRECEDING = 57665
const PRIVILEGE_CHECKS_USER = 57666
const PROCESS = 57667
const RANDOM = 57668
const REFERENCE = 57669
const REQUIRE_ROW_FORMAT = 57670
const RESOURCE = 57671
const RESPECT = 57672
const RESTART = 57673
const RETAIN = 57674
const REUSE = 57675
const ROLE = 57676
const SECONDARY = 57677
const SECONDARY_ENGINE = 57678
const SECONDARY_LOAD = 57679
const SECONDARY_UNLOAD = 57680
const SKIP = 57681
const SRID = 57682
const THREAD_PRIORITY = 57683
const TIES = 57684
const UNBOUNDED = 57685
const VCPU = 57686
const VISIBLE = 57687
const FORMAT = 57688
const TREE = 57689
const VITESS = 57690
const TRADITIONAL = 57691

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"CALL",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ANY",
	"SOME",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	33, 310,
	133, 310,
	145, 310,
	170, 324,
	171, 324,
	-2, 312,
	-1, 49,
	135, 333,
	-2, 331,
	-1, 73,
	39, 369,
	-2, 377,
	-1, 394,
	121, 703,
	-2, 699,
	-1, 395,
	121, 704,
	-2, 700,
	-1, 412,
	39, 370,
	-2, 382,
	-1, 413,
	39, 371,
	-2, 383,
	-1, 436,
	89, 959,
	-2, 77,
	-1, 437,
	89, 875,
	-2, 78,
	-1, 442,
	89, 842,
	-2, 665,
	-1, 444,
	89, 906,
	-2, 667,
	-1, 772,
	57, 57,
	59, 57,
	-2, 61,
	-1, 948,
	121, 706,
	-2, 702,
	-1, 1376,
	5, 624,
	17, 624,
	19, 624,
	31, 624,
	60, 624,
	-2, 408,
}

const yyPrivate = 57344

const yyLast = 17979

var yyAct = [...]int{
	394, 1605, 1415, 1572, 1303, 1615, 335, 1053, 1208, 1488,
	1521, 1356, 611, 1228, 350, 1389, 1026, 1076, 364, 72,
	3, 1353, 1209, 695, 1082, 1357, 739, 1096, 1254, 1062,
	1362, 1052, 872, 1049, 1322, 1475, 1368, 891, 321, 1280,
	93, 441, 600, 1271, 287, 1147, 307, 287, 1066, 1028,
	1012, 93, 1023, 287, 771, 396, 746, 1196, 744, 749,
	397, 968, 785, 766, 1092, 784, 399, 942, 405, 414,
	765, 569, 914, 337, 430, 435, 1005, 29, 333, 287,
	93, 427, 326, 68, 570, 287, 70, 287, 756, 774,
	73, 900, 438, 322, 67, 589, 325, 1608, 285, 7,
	6, 5, 1115, 1592, 711, 1603, 1580, 317, 1600, 1416,
	1591, 1579, 1339, 712, 609, 1445, 1114, 574, 973, 1384,
	1385, 1044, 1045, 75, 76, 77, 78, 79, 80, 95,
	96, 97, 1383, 429, 31, 420, 61, 34, 35, 571,
	1043, 573, 283, 279, 280, 281, 400, 629, 95, 96,
	97, 1242, 324, 275, 1241, 323, 273, 1243, 277, 1113,
	1547, 657, 656, 666, 667, 659, 660, 661, 662, 663,
	664, 665, 658, 1262, 1075, 668, 379, 1305, 385, 386,
	383, 384, 382, 381, 380, 786, 60, 787, 1478, 1083,
	624, 408, 387, 388, 625, 622, 623, 1436, 314, 1434,
	606, 566, 608, 95, 96, 97, 899, 316, 945, 628,
	861, 627, 1110, 1107, 1108, 1602, 1106, 617, 618, 1307,
	860, 858, 1573, 1599, 1302, 1006, 1565, 1623, 1067, 590,
	95, 96, 97, 1306, 605, 607, 576, 1069, 1522, 277,
	614, 1308, 901, 902, 903, 1229, 1231, 1619, 1299, 1117,
	1120, 862, 865, 1524, 1301, 276, 859, 631, 849, 1379,
	1069, 586, 1530, 1378, 1377, 572, 282, 579, 290, 278,
	95, 96, 97, 1554, 287, 581, 582, 274, 1166, 287,
	1069, 591, 1458, 1127, 291, 287, 1126, 680, 681, 1112,
	602, 287, 598, 294, 1238, 604, 93, 1201, 1176, 1155,
	93, 301, 93, 780, 760, 693, 596, 658, 93, 1050,
	668, 1111, 668, 95, 96, 97, 1039, 93, 93, 985,
	95, 96, 97, 603, 1523, 896, 648, 1230, 580, 583,
	1162, 584, 1578, 588, 585, 299, 892, 1548, 637, 595,
	613, 306, 1068, 1563, 1083, 597, 1163, 1065, 1063, 1539,
	1064, 1116, 615, 1323, 83, 1366, 886, 1061, 1067, 1300,
	645, 1298, 642, 643, 1617, 1068, 921, 1618, 1118, 1616,
	819, 292, 1531, 1529, 1402, 601, 648, 592, 593, 594,
	919, 920, 918, 647, 645, 1068, 646, 647, 645, 680,
	681, 62, 788, 84, 1325, 641, 969, 1341, 303, 295,
	648, 304, 305, 311, 648, 851, 678, 296, 298, 308,
	1072, 293, 310, 309, 616, 734, 619, 1073, 640, 638,
	639, 737, 630, 93, 893, 287, 287, 287, 969, 272,
	1173, 1327, 1260, 1331, 93, 1326, 1568, 1324, 1624, 753,
	93, 987, 1329, 696, 887, 1583, 438, 704, 705, 706,
	1484, 1328, 909, 911, 912, 807, 736, 680, 681, 910,
	1140, 1141, 1142, 1483, 1330, 1332, 657, 656, 666, 667,
	659, 660, 661, 662, 663, 664, 665, 658, 764, 763,
	668, 772, 986, 1625, 750, 714, 716, 718, 720, 722,
	724, 725, 60, 738, 715, 717, 820, 721, 723, 1275,
	726, 646, 647, 645, 917, 1274, 424, 425, 773, 783,
	659, 660, 661, 662, 663, 664, 665, 658, 778, 648,
	668, 1263, 833, 836, 837, 838, 839, 840, 841, 1585,
	842, 843, 844, 845, 846, 821, 822, 823, 824, 805,
	806, 834, 1564, 808, 1501, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 825, 826, 827, 828, 829,
	830, 831, 832, 661, 662, 663, 664, 665, 658, 287,
	1481, 668, 1272, 847, 93, 1137, 850, 575, 852, 287,
	287, 93, 93, 93, 646, 647, 645, 287, 877, 1161,
	287, 1160, 1343, 287, 870, 871, 409, 287, 1536, 93,
	1527, 1601, 648, 1535, 93, 93, 93, 287, 93, 93,
	646, 647, 645, 1398, 835, 95, 96, 97, 93, 93,
	748, 990, 991, 797, 95, 96, 97, 69, 648, 1587,
	409, 1290, 794, 853, 854, 95, 96, 97, 874, 398,
	1070, 863, 876, 776, 429, 1527, 1576, 869, 657, 656,
	666, 667, 659, 660, 661, 662, 663, 664, 665, 658,
	568, 882, 668, 1365, 1286, 1287, 1288, 577, 578, 397,
	915, 866, 646, 647, 645, 646, 647, 645, 938, 95,
	96, 97, 409, 1245, 1527, 409, 1527, 1555, 848, 777,
	648, 779, 93, 648, 1454, 855, 856, 857, 1527, 1526,
	1473, 1472, 1460, 409, 1354, 1148, 946, 1365, 957, 960,
	1457, 409, 71, 875, 1408, 1407, 644, 970, 879, 880,
	881, 1197, 883, 884, 937, 916, 947, 1197, 93, 93,
	1404, 1405, 888, 889, 1538, 948, 1289, 1404, 1403, 998,
	409, 1294, 1291, 1282, 1292, 1285, 1406, 1281, 93, 1009,
	409, 1283, 1284, 952, 31, 287, 998, 696, 93, 939,
	940, 644, 409, 287, 31, 1293, 796, 795, 1009, 1009,
	999, 287, 287, 946, 1365, 287, 287, 1246, 949, 287,
	287, 287, 93, 1008, 1042, 1508, 776, 1033, 1203, 775,
	1024, 1179, 1178, 1004, 438, 1204, 93, 570, 978, 979,
	402, 998, 948, 775, 988, 982, 60, 60, 1054, 1001,
	864, 781, 1009, 950, 951, 992, 60, 1007, 998, 31,
	1000, 1593, 874, 1078, 1079, 1080, 1081, 1034, 1490, 1077,
	1035, 1036, 777, 1304, 775, 1084, 1085, 1086, 1465, 1089,
	1090, 1091, 1097, 1394, 1369, 1370, 1002, 1249, 1041, 1032,
	287, 93, 60, 93, 1037, 1119, 983, 1040, 1093, 287,
	287, 287, 287, 287, 1088, 287, 287, 1087, 1057, 287,
	93, 60, 1491, 1100, 1098, 656, 666, 667, 659, 660,
	661, 662, 663, 664, 665, 658, 287, 1610, 668, 1606,
	1396, 287, 1372, 287, 287, 1354, 1276, 897, 287, 93,
	868, 1375, 1374, 395, 1101, 1217, 953, 954, 1094, 1095,
	959, 962, 963, 1121, 1122, 1123, 1124, 1125, 1216, 1128,
	1129, 1597, 1590, 1130, 666, 667, 659, 660, 661, 662,
	663, 664, 665, 658, 1134, 1186, 668, 915, 977, 1220,
	1132, 980, 981, 94, 1221, 1133, 1218, 288, 1347, 747,
	288, 1219, 1138, 1595, 94, 1222, 288, 1018, 1019, 353,
	352, 355, 356, 357, 358, 1102, 1195, 1104, 354, 359,
	1014, 1017, 1018, 1019, 1015, 1194, 1016, 1020, 965, 1259,
	1369, 1370, 288, 94, 1131, 1267, 793, 1452, 288, 599,
	288, 1143, 916, 966, 740, 1014, 1017, 1018, 1019, 1015,
	287, 1016, 1020, 1022, 1570, 1569, 741, 1506, 1257, 1185,
	287, 287, 287, 287, 287, 1210, 1156, 415, 1251, 1190,
	1486, 1157, 287, 1103, 867, 1205, 287, 400, 406, 1172,
	287, 71, 416, 1451, 287, 403, 404, 407, 1193, 751,
	752, 418, 1450, 417, 1350, 1227, 1192, 1189, 1197, 626,
	1167, 1244, 1199, 93, 1612, 1611, 1612, 1150, 1198, 1164,
	1247, 1151, 1250, 890, 754, 1054, 1255, 1255, 1552, 1479,
	1200, 1223, 1158, 1159, 1212, 1213, 984, 1215, 1165, 1233,
	1211, 1168, 1169, 1214, 402, 69, 1235, 74, 66, 1175,
	1234, 1, 1236, 1177, 1237, 1256, 1180, 1181, 1182, 1183,
	1184, 93, 93, 1264, 1265, 1239, 1604, 1417, 1487, 1109,
	1571, 415, 1520, 1252, 1253, 1388, 1266, 1060, 1268, 1269,
	1270, 1051, 82, 567, 81, 1562, 416, 885, 612, 1059,
	1058, 93, 1273, 412, 413, 418, 1528, 417, 1477, 1071,
	1261, 1074, 1225, 1226, 1279, 1395, 1258, 1295, 1567, 802,
	800, 801, 1152, 1153, 799, 804, 93, 803, 798, 300,
	433, 898, 397, 313, 1021, 789, 1099, 755, 1319, 85,
	1310, 1311, 1297, 1170, 1296, 1105, 895, 288, 297, 620,
	621, 302, 288, 676, 1321, 1191, 1240, 439, 288, 1344,
	1312, 432, 287, 1360, 288, 989, 743, 1334, 1449, 94,
	1349, 1171, 93, 94, 708, 94, 967, 93, 93, 947,
	1210, 94, 1355, 1320, 1319, 769, 1278, 1333, 948, 336,
	94, 94, 1318, 1358, 908, 351, 348, 1340, 349, 993,
	1202, 650, 334, 93, 328, 768, 761, 1013, 1011, 1010,
	428, 1371, 1367, 767, 997, 1309, 1348, 93, 411, 93,
	93, 1373, 1444, 1255, 1255, 1546, 1387, 410, 964, 1054,
	52, 1054, 633, 1380, 318, 33, 1364, 419, 1401, 23,
	22, 1316, 1317, 21, 20, 19, 25, 287, 1386, 18,
	1391, 1392, 1393, 17, 16, 587, 38, 28, 27, 26,
	15, 1381, 14, 1382, 13, 12, 11, 287, 1399, 1400,
	9, 10, 8, 93, 4, 1418, 93, 93, 93, 287,
	636, 24, 694, 2, 0, 0, 0, 0, 0, 1410,
	0, 0, 0, 0, 0, 0, 94, 0, 288, 288,
	288, 1409, 0, 0, 1411, 0, 1413, 94, 0, 0,
	0, 1429, 1430, 94, 1431, 0, 1376, 1433, 0, 1435,
	0, 1412, 0, 1423, 1424, 1432, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 0, 0, 0,
	0, 0, 1210, 0, 0, 0, 0, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 1462, 1427,
	0, 0, 0, 0, 1247, 93, 0, 0, 0, 1054,
	0, 0, 0, 0, 0, 0, 0, 0, 1474, 0,
	93, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 1461, 0, 0, 0, 0, 0, 0, 1480, 1489,
	1482, 1494, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	1471, 0, 1437, 1438, 1492, 1493, 0, 0, 93, 93,
	0, 93, 0, 0, 0, 0, 93, 0, 93, 93,
	93, 287, 288, 1358, 93, 1505, 1509, 94, 1455, 1456,
	1507, 1459, 288, 288, 94, 94, 94, 1519, 0, 1525,
	288, 93, 287, 288, 1532, 0, 288, 0, 0, 1470,
	288, 1514, 94, 1515, 1517, 1518, 0, 94, 94, 94,
	288, 94, 94, 1500, 1533, 0, 1534, 0, 0, 0,
	1553, 94, 94, 1561, 1485, 0, 1540, 1358, 93, 0,
	1513, 1560, 0, 1559, 0, 0, 0, 0, 0, 93,
	93, 422, 0, 0, 0, 0, 1541, 1575, 1574, 0,
	0, 1489, 1054, 0, 0, 93, 0, 0, 0, 1210,
	0, 1581, 0, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 1589, 0, 0, 0, 0, 1516, 0, 0, 0,
	0, 1594, 1596, 0, 93, 94, 0, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 1609, 0, 0, 0,
	0, 0, 0, 0, 1542, 1543, 1544, 1545, 1620, 1549,
	1584, 1550, 1551, 0, 0, 0, 0, 0, 0, 1598,
	0, 94, 94, 0, 1556, 0, 1557, 1558, 0, 365,
	30, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 288, 0,
	0, 94, 0, 0, 0, 1577, 288, 0, 0, 0,
	30, 0, 0, 0, 288, 288, 0, 0, 288, 288,
	0, 0, 288, 288, 288, 94, 0, 0, 0, 0,
	1586, 0, 0, 31, 32, 61, 34, 35, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 401, 0,
	0, 0, 65, 0, 0, 0, 0, 36, 55, 56,
	0, 58, 59, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1621, 1622, 409, 0, 0, 1442, 0, 0,
	0, 46, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 288, 94, 0, 94, 0, 0, 0,
	0, 0, 288, 288, 288, 288, 288, 0, 288, 288,
	0, 0, 288, 94, 657, 656, 666, 667, 659, 660,
	661, 662, 663, 664, 665, 658, 0, 0, 668, 288,
	0, 0, 0, 0, 288, 0, 288, 288, 0, 0,
	0, 288, 94, 0, 0, 0, 0, 0, 1448, 0,
	0, 39, 40, 42, 41, 44, 0, 57, 657, 656,
	666, 667, 659, 660, 661, 662, 663, 664, 665, 658,
	362, 0, 668, 0, 0, 0, 0, 0, 0, 0,
	45, 64, 63, 1447, 0, 53, 54, 43, 0, 657,
	656, 666, 667, 659, 660, 661, 662, 663, 664, 665,
	658, 47, 37, 668, 48, 49, 50, 51, 0, 0,
	92, 649, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 657, 656, 666, 667, 659, 660,
	661, 662, 663, 664, 665, 658, 0, 0, 668, 0,
	0, 0, 0, 288, 0, 0, 0, 327, 0, 0,
	440, 0, 0, 288, 288, 288, 288, 288, 0, 709,
	0, 0, 0, 0, 0, 288, 0, 0, 0, 288,
	0, 0, 0, 288, 0, 610, 0, 288, 0, 610,
	0, 610, 0, 0, 0, 0, 0, 610, 742, 745,
	62, 0, 0, 0, 0, 0, 94, 0, 30, 0,
	0, 1441, 0, 0, 0, 652, 0, 655, 0, 0,
	0, 677, 679, 669, 670, 671, 672, 673, 674, 675,
	0, 653, 654, 651, 657, 656, 666, 667, 659, 660,
	661, 662, 663, 664, 665, 658, 1440, 0, 668, 0,
	0, 0, 692, 0, 94, 94, 697, 698, 699, 700,
	701, 702, 703, 679, 679, 679, 707, 0, 710, 713,
	713, 713, 719, 713, 713, 719, 713, 727, 728, 729,
	730, 731, 732, 733, 94, 0, 735, 0, 0, 0,
	0, 30, 657, 656, 666, 667, 659, 660, 661, 662,
	663, 664, 665, 658, 0, 0, 668, 0, 0, 94,
	0, 0, 0, 0, 0, 770, 0, 0, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 657, 656, 666,
	667, 659, 660, 661, 662, 663, 664, 665, 658, 0,
	0, 668, 0, 1313, 0, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	94, 94, 0, 657, 656, 666, 667, 659, 660, 661,
	662, 663, 664, 665, 658, 0, 440, 668, 0, 0,
	440, 0, 440, 0, 0, 0, 94, 0, 440, 0,
	0, 0, 0, 0, 878, 0, 0, 632, 634, 0,
	94, 0, 94, 94, 0, 657, 656, 666, 667, 659,
	660, 661, 662, 663, 664, 665, 658, 0, 894, 668,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 0, 0, 0, 0, 0, 904, 905, 906, 907,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 0, 0, 1149, 0, 0, 94, 330, 0, 94,
	94, 94, 288, 610, 0, 0, 0, 0, 0, 0,
	610, 610, 610, 657, 656, 666, 667, 659, 660, 661,
	662, 663, 664, 665, 658, 0, 0, 668, 610, 0,
	0, 955, 956, 610, 610, 610, 0, 610, 610, 0,
	0, 0, 0, 758, 0, 0, 0, 610, 610, 0,
	0, 0, 0, 0, 440, 0, 0, 0, 0, 0,
	790, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1048, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 94, 0, 94, 0, 0, 0, 0, 94,
	0, 94, 94, 94, 288, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 0, 0, 0,
	1025, 440, 440, 440, 770, 0, 0, 0, 770, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	0, 94, 0, 0, 440, 440, 440, 0, 440, 440,
	0, 0, 94, 94, 0, 0, 0, 0, 440, 440,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 0, 610, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	0, 1174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 0, 440, 0, 0, 0, 1187, 1188,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 971, 0, 0, 0, 0, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 0, 0, 975, 976,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 994, 0,
	0, 0, 0, 0, 0, 0, 1154, 0, 758, 401,
	0, 440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 770,
	0, 0, 0, 0, 0, 1206, 1207, 0, 0, 770,
	770, 770, 770, 770, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1025, 0, 1232, 0, 0,
	0, 0, 0, 770, 0, 0, 0, 0, 0, 0,
	0, 440, 0, 440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	0, 610, 0, 0, 0, 0, 0, 0, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 312, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 423, 0, 0, 431, 0, 0,
	0, 0, 0, 286, 0, 286, 0, 0, 0, 971,
	0, 0, 0, 0, 1359, 0, 30, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 913, 0,
	0, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 0, 0, 0, 0,
	0, 0, 0, 440, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 327, 0, 0, 0, 0, 0, 0, 1463, 0,
	0, 1464, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 0,
	0, 0, 1504, 327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 1468, 1469,
	0, 0, 286, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 440, 286, 971, 0, 0, 1361, 1363, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1363, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 440, 0, 440,
	1390, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1359, 0, 30, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1537, 1144, 1145, 1146,
	0, 0, 0, 1414, 0, 0, 1419, 1420, 1421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1359, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 286, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 1607, 0, 0, 0, 0, 440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 1511,
	0, 1512, 0, 0, 0, 0, 1476, 0, 1476, 1476,
	1476, 0, 0, 0, 1390, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 1476, 0, 0, 0, 0, 0, 286, 286, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 286, 0,
	0, 286, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 1314, 1315, 1566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	440, 1335, 1336, 0, 1337, 1338, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 1582, 1345, 1346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1588, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 423, 873, 0, 0, 0, 423, 423, 0, 0,
	423, 423, 423, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 1397, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 423, 423,
	423, 423, 423, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 873,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 286,
	1030, 1425, 0, 286, 286, 0, 0, 286, 1038, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 286, 286,
	286, 286, 0, 286, 286, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 286,
	0, 1135, 1136, 0, 0, 0, 286, 1495, 1496, 1497,
	1498, 1499, 0, 0, 0, 1502, 1503, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 286, 286,
	286, 286, 286, 0, 0, 0, 0, 0, 0, 0,
	1224, 0, 0, 0, 286, 0, 0, 0, 1030, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1613, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1030,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 552, 540, 0, 495,
	555, 468, 485, 563, 486, 489, 528, 453, 508, 184,
	483, 0, 472, 448, 479, 449, 470, 497, 127, 501,
	467, 542, 511, 554, 156, 0, 0, 473, 561, 158,
	519, 0, 231, 172, 0, 0, 0, 499, 544, 506,
	537, 494, 529, 458, 518, 556, 484, 526, 557, 0,
	0, 972, 95, 96, 97, 0, 1055, 1056, 0, 0,
	0, 0, 0, 117, 286, 523, 551, 481, 525, 527,
	565, 447, 520, 0, 451, 454, 562, 547, 476, 477,
	1248, 0, 0, 0, 0, 0, 0, 498, 507, 534,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 474,
	0, 517, 0, 0, 0, 455, 452, 0, 0, 0,
	0, 496, 0, 0, 0, 457, 0, 475, 535, 0,
	445, 136, 539, 546, 493, 289, 550, 491, 490, 553,
	203, 0, 235, 140, 155, 113, 152, 99, 109, 0,
	138, 181, 211, 215, 543, 471, 480, 121, 478, 213,
	191, 252, 516, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 267, 228, 102, 237, 249, 118, 223,
	0, 0, 0, 104, 247, 234, 170, 149, 150, 103,
	0, 209, 126, 134, 123, 183, 244, 245, 122, 270,
	110, 258, 106, 111, 257, 177, 240, 248, 171, 164,
	105, 246, 169, 163, 154, 130, 142, 201, 161, 202,
	143, 174, 173, 175, 0, 450, 0, 232, 255, 271,
	115, 466, 239, 265, 266, 0, 205, 116, 135, 129,
	200, 133, 176, 112, 145, 229, 153, 160, 208, 269,
	190, 214, 119, 254, 230, 462, 465, 460, 461, 509,
	510, 558, 559, 560, 536, 456, 0, 463, 464, 0,
	541, 548, 549, 513, 98, 107, 157, 268, 206, 132,
	514, 515, 256, 446, 459, 125, 469, 0, 0, 482,
	487, 488, 500, 502, 503, 504, 505, 512, 521, 522,
	524, 530, 531, 532, 533, 538, 545, 564, 100, 101,
	108, 114, 120, 124, 128, 131, 137, 141, 144, 146,
	147, 148, 151, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 139, 250, 264, 552, 540, 0,
	495, 555, 468, 485, 563, 486, 489, 528, 453, 508,
	184, 483, 0, 472, 448, 479, 449, 470, 497, 127,
	501, 467, 542, 511, 554, 156, 0, 0, 473, 561,
	158, 519, 0, 231, 172, 0, 0, 0, 499, 544,
	506, 537, 494, 529, 458, 518, 556, 484, 526, 557,
	0, 0, 0, 95, 96, 97, 0, 1055, 1056, 0,
	0, 0, 0, 0, 117, 0, 523, 551, 481, 525,
	527, 565, 447, 520, 0, 451, 454, 562, 547, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 498, 507,
	534, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	474, 0, 517, 0, 0, 0, 455, 452, 0, 0,
	0, 0, 496, 0, 0, 0, 457, 0, 475, 535,
	0, 445, 136, 539, 546, 493, 289, 550, 491, 490,
	553, 203, 0, 235, 140, 155, 113, 152, 99, 109,
	0, 138, 181, 211, 215, 543, 471, 480, 121, 478,
	213, 191, 252, 516, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 267, 228, 102, 237, 249, 118,
	223, 0, 0, 0, 104, 247, 234, 170, 149, 150,
	103, 0, 209, 126, 134, 123, 183, 244, 245, 122,
	270, 110, 258, 106, 111, 257, 177, 240, 248, 171,
	164, 105, 246, 169, 163, 154, 130, 142, 201, 161,
	202, 143, 174, 173, 175, 0, 450, 0, 232, 255,
	271, 115, 466, 239, 265, 266, 0, 205, 116, 135,
	129, 200, 133, 176, 112, 145, 229, 153, 160, 208,
	269, 190, 214, 119, 254, 230, 462, 465, 460, 461,
	509, 510, 558, 559, 560, 536, 456, 0, 463, 464,
	0, 541, 548, 549, 513, 98, 107, 157, 268, 206,
	132, 514, 515, 256, 446, 459, 125, 469, 0, 0,
	482, 487, 488, 500, 502, 503, 504, 505, 512, 521,
	522, 524, 530, 531, 532, 533, 538, 545, 564, 100,
	101, 108, 114, 120, 124, 128, 131, 137, 141, 144,
	146, 147, 148, 151, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 139, 250, 264, 552, 540,
	0, 495, 555, 468, 485, 563, 486, 489, 528, 453,
	508, 184, 483, 0, 472, 448, 479, 449, 470, 497,
	127, 501, 467, 542, 511, 554, 156, 0, 0, 473,
	561, 158, 519, 0, 231, 172, 0, 0, 0, 499,
	544, 506, 537, 494, 529, 458, 518, 556, 484, 526,
	557, 60, 0, 0, 95, 96, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 523, 551, 481,
	525, 527, 565, 447, 520, 0, 451, 454, 562, 547,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 498,
	507, 534, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 474, 0, 517, 0, 0, 0, 455, 452, 0,
	0, 0, 0, 496, 0, 0, 0, 457, 0, 475,
	535, 0, 445, 136, 539, 546, 493, 289, 550, 491,
	490, 553, 203, 0, 235, 140, 155, 113, 152, 99,
	109, 0, 138, 181, 211, 215, 543, 471, 480, 121,
	478, 213, 191, 252, 516, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 267, 228, 102, 237, 249,
	118, 223, 0, 0, 0, 104, 247, 234, 170, 149,
	150, 103, 0, 209, 126, 134, 123, 183, 244, 245,
	122, 270, 110, 258, 106, 111, 257, 177, 240, 248,
	171, 164, 105, 246, 169, 163, 154, 130, 142, 201,
	161, 202, 143, 174, 173, 175, 0, 450, 0, 232,
	255, 271, 115, 466, 239, 265, 266, 0, 205, 116,
	135, 129, 200, 133, 176, 112, 145, 229, 153, 160,
	208, 269, 190, 214, 119, 254, 230, 462, 465, 460,
	461, 509, 510, 558, 559, 560, 536, 456, 0, 463,
	464, 0, 541, 548, 549, 513, 98, 107, 157, 268,
	206, 132, 514, 515, 256, 446, 459, 125, 469, 0,
	0, 482, 487, 488, 500, 502, 503, 504, 505, 512,
	521, 522, 524, 530, 531, 532, 533, 538, 545, 564,
	100, 101, 108, 114, 120, 124, 128, 131, 137, 141,
	144, 146, 147, 148, 151, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 139, 250, 264, 552,
	540, 0, 495, 555, 468, 485, 563, 486, 489, 528,
	453, 508, 184, 483, 0, 472, 448, 479, 449, 470,
	497, 127, 501, 467, 542, 511, 554, 156, 0, 0,
	473, 561, 158, 519, 0, 231, 172, 0, 0, 0,
	499, 544, 506, 537, 494, 529, 458, 518, 556, 484,
	526, 557, 0, 0, 0, 95, 96, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 523, 551,
	481, 525, 527, 565, 447, 520, 0, 451, 454, 562,
	547, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	498, 507, 534, 492, 0, 0, 0, 0, 0, 0,
	1352, 0, 474, 0, 517, 0, 0, 0, 455, 452,
	0, 0, 0, 0, 496, 0, 0, 0, 457, 0,
	475, 535, 0, 445, 136, 539, 546, 493, 289, 550,
	491, 490, 553, 203, 0, 235, 140, 155, 113, 152,
	99, 109, 0, 138, 181, 211, 215, 543, 471, 480,
	121, 478, 213, 191, 252, 516, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 267, 228, 102, 237,
	249, 118, 223, 0, 0, 0, 104, 247, 234, 170,
	149, 150, 103, 0, 209, 126, 134, 123, 183, 244,
	245, 122, 270, 110, 258, 106, 111, 257, 177, 240,
	248, 171, 164, 105, 246, 169, 163, 154, 130, 142,
	201, 161, 202, 143, 174, 173, 175, 0, 450, 0,
	232, 255, 271, 115, 466, 239, 265, 266, 0, 205,
	116, 135, 129, 200, 133, 176, 112, 145, 229, 153,
	160, 208, 269, 190, 214, 119, 254, 230, 462, 465,
	460, 461, 509, 510, 558, 559, 560, 536, 456, 0,
	463, 464, 0, 541, 548, 549, 513, 98, 107, 157,
	268, 206, 132, 514, 515, 256, 446, 459, 125, 469,
	0, 0, 482, 487, 488, 500, 502, 503, 504, 505,
	512, 521, 522, 524, 530, 531, 532, 533, 538, 545,
	564, 100, 101, 108, 114, 120, 124, 128, 131, 137,
	141, 144, 146, 147, 148, 151, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 139, 250, 264,
	552, 540, 0, 495, 555, 468, 485, 563, 486, 489,
	528, 453, 508, 184, 483, 0, 472, 448, 479, 449,
	470, 497, 127, 501, 467, 542, 511, 554, 156, 0,
	0, 473, 561, 158, 519, 0, 231, 172, 0, 0,
	0, 499, 544, 506, 537, 494, 529, 458, 518, 556,
	484, 526, 557, 0, 0, 0, 95, 96, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 523,
	551, 481, 525, 527, 565, 447, 520, 0, 451, 454,
	562, 547, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 498, 507, 534, 492, 0, 0, 0, 0, 0,
	0, 1039, 0, 474, 0, 517, 0, 0, 0, 455,
	452, 0, 0, 0, 0, 496, 0, 0, 0, 457,
	0, 475, 535, 0, 445, 136, 539, 546, 493, 289,
	550, 491, 490, 553, 203, 0, 235, 140, 155, 113,
	152, 99, 109, 0, 138, 181, 211, 215, 543, 471,
	480, 121, 478, 213, 191, 252, 516, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 267, 228, 102,
	237, 249, 118, 223, 0, 0, 0, 104, 247, 234,
	170, 149, 150, 103, 0, 209, 126, 134, 123, 183,
	244, 245, 122, 270, 110, 258, 106, 111, 257, 177,
	240, 248, 171, 164, 105, 246, 169, 163, 154, 130,
	142, 201, 161, 202, 143, 174, 173, 175, 0, 450,
	0, 232, 255, 271, 115, 466, 239, 265, 266, 0,
	205, 116, 135, 129, 200, 133, 176, 112, 145, 229,
	153, 160, 208, 269, 190, 214, 119, 254, 230, 462,
	465, 460, 461, 509, 510, 558, 559, 560, 536, 456,
	0, 463, 464, 0, 541, 548, 549, 513, 98, 107,
	157, 268, 206, 132, 514, 515, 256, 446, 459, 125,
	469, 0, 0, 482, 487, 488, 500, 502, 503, 504,
	505, 512, 521, 522, 524, 530, 531, 532, 533, 538,
	545, 564, 100, 101, 108, 114, 120, 124, 128, 131,
	137, 141, 144, 146, 147, 148, 151, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 139, 250,
	264, 552, 540, 0, 495, 555, 468, 485, 563, 486,
	489, 528, 453, 508, 184, 483, 0, 472, 448, 479,
	449, 470, 497, 127, 501, 467, 542, 511, 554, 156,
	0, 0, 473, 561, 158, 519, 0, 231, 172, 0,
	0, 0, 499, 544, 506, 537, 494, 529, 458, 518,
	556, 484, 526, 557, 0, 0, 0, 95, 96, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	523, 551, 481, 525, 527, 565, 447, 520, 0, 451,
	454, 562, 547, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 498, 507, 534, 492, 0, 0, 0, 0,
	0, 0, 1003, 0, 474, 0, 517, 0, 0, 0,
	455, 452, 0, 0, 0, 0, 496, 0, 0, 0,
	457, 0, 475, 535, 0, 445, 136, 539, 546, 493,
	289, 550, 491, 490, 553, 203, 0, 235, 140, 155,
	113, 152, 99, 109, 0, 138, 181, 211, 215, 543,
	471, 480, 121, 478, 213, 191, 252, 516, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 267, 228,
	102, 237, 249, 118, 223, 0, 0, 0, 104, 247,
	234, 170, 149, 150, 103, 0, 209, 126, 134, 123,
	183, 244, 245, 122, 270, 110, 258, 106, 111, 257,
	177, 240, 248, 171, 164, 105, 246, 169, 163, 154,
	130, 142, 201, 161, 202, 143, 174, 173, 175, 0,
	450, 0, 232, 255, 271, 115, 466, 239, 265, 266,
	0, 205, 116, 135, 129, 200, 133, 176, 112, 145,
	229, 153, 160, 208, 269, 190, 214, 119, 254, 230,
	462, 465, 460, 461, 509, 510, 558, 559, 560, 536,
	456, 0, 463, 464, 0, 541, 548, 549, 513, 98,
	107, 157, 268, 206, 132, 514, 515, 256, 446, 459,
	125, 469, 0, 0, 482, 487, 488, 500, 502, 503,
	504, 505, 512, 521, 522, 524, 530, 531, 532, 533,
	538, 545, 564, 100, 101, 108, 114, 120, 124, 128,
	131, 137, 141, 144, 146, 147, 148, 151, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 139,
	250, 264, 552, 540, 0, 495, 555, 468, 485, 563,
	486, 489, 528, 453, 508, 184, 483, 0, 472, 448,
	479, 449, 470, 497, 127, 501, 467, 542, 511, 554,
	156, 0, 0, 473, 561, 158, 519, 0, 231, 172,
	0, 0, 0, 499, 544, 506, 537, 494, 529, 458,
	518, 556, 484, 526, 557, 0, 0, 0, 95, 96,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 523, 551, 481, 525, 527, 565, 447, 520, 0,
	451, 454, 562, 547, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 498, 507, 534, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 474, 0, 517, 0, 0,
	0, 455, 452, 0, 0, 0, 0, 496, 0, 0,
	0, 457, 0, 475, 535, 0, 445, 136, 539, 546,
	493, 289, 550, 491, 490, 553, 203, 0, 235, 140,
	155, 113, 152, 99, 109, 0, 138, 181, 211, 215,
	543, 471, 480, 121, 478, 213, 191, 252, 516, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 267,
	228, 102, 237, 249, 118, 223, 0, 0, 0, 104,
	247, 234, 170, 149, 150, 103, 0, 209, 126, 134,
	123, 183, 244, 245, 122, 270, 110, 258, 106, 111,
	257, 177, 240, 248, 171, 164, 105, 246, 169, 163,
	154, 130, 142, 201, 161, 202, 143, 174, 173, 175,
	0, 450, 0, 232, 255, 271, 115, 466, 239, 265,
	266, 0, 205, 116, 135, 129, 200, 133, 176, 112,
	145, 229, 153, 160, 208, 269, 190, 214, 119, 254,
	230, 462, 465, 460, 461, 509, 510, 558, 559, 560,
	536, 456, 0, 463, 464, 0, 541, 548, 549, 513,
	98, 107, 157, 268, 206, 132, 514, 515, 256, 446,
	459, 125, 469, 0, 0, 482, 487, 488, 500, 502,
	503, 504, 505, 512, 521, 522, 524, 530, 531, 532,
	533, 538, 545, 564, 100, 101, 108, 114, 120, 124,
	128, 131, 137, 141, 144, 146, 147, 148, 151, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	139, 250, 264, 552, 540, 0, 495, 555, 468, 485,
	563, 486, 489, 528, 453, 508, 184, 483, 0, 472,
	448, 479, 449, 470, 497, 127, 501, 467, 542, 511,
	554, 156, 0, 0, 473, 561, 158, 519, 0, 231,
	172, 0, 0, 0, 499, 544, 506, 537, 494, 529,
	458, 518, 556, 484, 526, 557, 0, 0, 0, 95,
	96, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 523, 551, 481, 525, 527, 565, 447, 520,
	0, 451, 454, 562, 547, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 498, 507, 534, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 474, 0, 517, 0,
	0, 0, 455, 452, 0, 0, 0, 0, 496, 0,
	0, 0, 457, 0, 475, 535, 0, 445, 136, 539,
	546, 493, 289, 550, 491, 490, 553, 203, 0, 235,
	140, 155, 113, 152, 99, 109, 0, 138, 181, 211,
	215, 543, 471, 480, 121, 478, 213, 191, 252, 516,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	267, 228, 102, 237, 249, 118, 223, 0, 0, 0,
	104, 247, 234, 170, 149, 150, 103, 0, 209, 126,
	134, 123, 183, 244, 245, 122, 270, 110, 258, 106,
	443, 257, 177, 240, 248, 171, 164, 105, 246, 169,
	163, 154, 130, 142, 201, 161, 202, 143, 174, 173,
	175, 0, 450, 0, 232, 255, 271, 115, 466, 239,
	265, 266, 0, 205, 116, 135, 129, 200, 133, 444,
	442, 145, 229, 153, 160, 208, 269, 190, 214, 119,
	254, 230, 462, 465, 460, 461, 509, 510, 558, 559,
	560, 536, 456, 0, 463, 464, 0, 541, 548, 549,
	513, 98, 107, 157, 268, 206, 132, 514, 515, 256,
	446, 459, 125, 469, 0, 0, 482, 487, 488, 500,
	502, 503, 504, 505, 512, 521, 522, 524, 530, 531,
	532, 533, 538, 545, 564, 100, 101, 108, 114, 120,
	124, 128, 131, 137, 141, 144, 146, 147, 148, 151,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 139, 250, 264, 552, 540, 0, 495, 555, 468,
	485, 563, 486, 489, 528, 453, 508, 184, 483, 0,
	472, 448, 479, 449, 470, 497, 127, 501, 467, 542,
	511, 554, 156, 0, 0, 473, 561, 158, 519, 0,
	231, 172, 0, 0, 0, 499, 544, 506, 537, 494,
	529, 458, 518, 556, 484, 526, 557, 0, 0, 0,
	95, 96, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 523, 551, 481, 525, 527, 565, 447,
	520, 0, 451, 454, 562, 547, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 498, 507, 534, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 474, 0, 517,
	0, 0, 0, 455, 452, 0, 0, 0, 0, 496,
	0, 0, 0, 457, 0, 475, 535, 0, 445, 136,
	539, 546, 493, 289, 550, 491, 490, 553, 203, 0,
	235, 140, 155, 113, 152, 99, 109, 0, 138, 181,
	211, 215, 543, 471, 480, 121, 478, 213, 191, 252,
	516, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 267, 228, 102, 237, 782, 118, 223, 0, 0,
	0, 104, 247, 234, 170, 149, 150, 103, 0, 209,
	126, 134, 123, 183, 244, 245, 122, 270, 110, 258,
	106, 443, 257, 177, 240, 248, 171, 164, 105, 246,
	169, 163, 154, 130, 142, 201, 161, 202, 143, 174,
	173, 175, 0, 450, 0, 232, 255, 271, 115, 466,
	239, 265, 266, 0, 205, 116, 135, 129, 200, 133,
	444, 442, 145, 229, 153, 160, 208, 269, 190, 214,
	119, 254, 230, 462, 465, 460, 461, 509, 510, 558,
	559, 560, 536, 456, 0, 463, 464, 0, 541, 548,
	549, 513, 98, 107, 157, 268, 206, 132, 514, 515,
	256, 446, 459, 125, 469, 0, 0, 482, 487, 488,
	500, 502, 503, 504, 505, 512, 521, 522, 524, 530,
	531, 532, 533, 538, 545, 564, 100, 101, 108, 114,
	120, 124, 128, 131, 137, 141, 144, 146, 147, 148,
	151, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 139, 250, 264, 552, 540, 0, 495, 555,
	468, 485, 563, 486, 489, 528, 453, 508, 184, 483,
	0, 472, 448, 479, 449, 470, 497, 127, 501, 467,
	542, 511, 554, 156, 0, 0, 473, 561, 158, 519,
	0, 231, 172, 0, 0, 0, 499, 544, 506, 537,
	494, 529, 458, 518, 556, 484, 526, 557, 0, 0,
	0, 95, 96, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 523, 551, 481, 525, 527, 565,
	447, 520, 0, 451, 454, 562, 547, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 498, 507, 534, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 474, 0,
	517, 0, 0, 0, 455, 452, 0, 0, 0, 0,
	496, 0, 0, 0, 457, 0, 475, 535, 0, 445,
	136, 539, 546, 493, 289, 550, 491, 490, 553, 203,
	0, 235, 140, 155, 113, 152, 99, 109, 0, 138,
	181, 211, 215, 543, 471, 480, 121, 478, 213, 191,
	252, 516, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 267, 228, 102, 237, 434, 118, 223, 0,
	0, 0, 104, 247, 234, 170, 149, 150, 103, 0,
	209, 126, 134, 123, 183, 244, 245, 122, 270, 110,
	258, 106, 443, 257, 177, 240, 248, 171, 164, 105,
	246, 169, 163, 154, 130, 142, 201, 161, 202, 143,
	174, 173, 175, 0, 450, 0, 232, 255, 271, 115,
	466, 239, 265, 266, 0, 205, 116, 135, 129, 200,
	133, 444, 442, 437, 436, 153, 160, 208, 269, 190,
	214, 119, 254, 230, 462, 465, 460, 461, 509, 510,
	558, 559, 560, 536, 456, 0, 463, 464, 0, 541,
	548, 549, 513, 98, 107, 157, 268, 206, 132, 514,
	515, 256, 446, 459, 125, 469, 0, 0, 482, 487,
	488, 500, 502, 503, 504, 505, 512, 521, 522, 524,
	530, 531, 532, 533, 538, 545, 564, 100, 101, 108,
	114, 120, 124, 128, 131, 137, 141, 144, 146, 147,
	148, 151, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 139, 250, 264, 184, 0, 375, 943,
	0, 332, 0, 0, 0, 127, 0, 331, 0, 0,
	0, 156, 0, 0, 944, 378, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 95,
	96, 97, 353, 352, 355, 356, 357, 358, 0, 0,
	117, 354, 359, 360, 361, 0, 0, 0, 0, 329,
	346, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 343, 344, 421, 0, 0, 0, 392, 0,
	345, 0, 0, 338, 339, 341, 340, 342, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 391,
	0, 0, 289, 0, 0, 389, 0, 203, 0, 235,
	140, 155, 113, 152, 99, 109, 0, 138, 181, 211,
	215, 0, 0, 0, 121, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	267, 228, 102, 237, 249, 118, 223, 0, 0, 0,
	104, 247, 234, 170, 149, 150, 103, 0, 209, 126,
	134, 123, 183, 244, 245, 122, 270, 110, 258, 106,
	111, 257, 177, 240, 248, 171, 164, 105, 246, 169,
	163, 154, 130, 142, 201, 161, 202, 143, 174, 173,
	175, 0, 0, 0, 232, 255, 271, 115, 0, 239,
	265, 266, 0, 205, 116, 135, 129, 200, 133, 176,
	112, 145, 229, 153, 160, 208, 269, 190, 214, 119,
	254, 230, 379, 390, 385, 386, 383, 384, 382, 381,
	380, 393, 368, 369, 370, 371, 376, 0, 387, 388,
	372, 98, 107, 157, 268, 206, 132, 373, 374, 256,
	0, 0, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 108, 114, 120,
	124, 128, 131, 137, 141, 144, 146, 147, 148, 151,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 139, 250, 264, 184, 0, 375, 0, 0, 332,
	0, 0, 0, 127, 0, 331, 0, 0, 0, 156,
	0, 0, 0, 378, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 366, 367, 0, 0, 0, 0,
	0, 0, 1046, 0, 60, 0, 0, 95, 96, 97,
	353, 352, 355, 356, 357, 358, 0, 0, 117, 354,
	359, 360, 361, 1047, 0, 0, 0, 329, 346, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	343, 344, 0, 0, 0, 0, 392, 0, 345, 0,
	0, 338, 339, 341, 340, 342, 347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 391, 0, 0,
	289, 0, 0, 389, 0, 203, 0, 235, 140, 155,
	113, 152, 99, 109, 0, 138, 181, 211, 215, 0,
	0, 0, 121, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 267, 228,
	102, 237, 249, 118, 223, 0, 0, 0, 104, 247,
	234, 170, 149, 150, 103, 0, 209, 126, 134, 123,
	183, 244, 245, 122, 270, 110, 258, 106, 111, 257,
	177, 240, 248, 171, 164, 105, 246, 169, 163, 154,
	130, 142, 201, 161, 202, 143, 174, 173, 175, 0,
	0, 0, 232, 255, 271, 115, 0, 239, 265, 266,
	0, 205, 116, 135, 129, 200, 133, 176, 112, 145,
	229, 153, 160, 208, 269, 190, 214, 119, 254, 230,
	379, 390, 385, 386, 383, 384, 382, 381, 380, 393,
	368, 369, 370, 371, 376, 0, 387, 388, 372, 98,
	107, 157, 268, 206, 132, 373, 374, 256, 0, 0,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 108, 114, 120, 124, 128,
	131, 137, 141, 144, 146, 147, 148, 151, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 139,
	250, 264, 184, 0, 375, 0, 0, 332, 0, 0,
	0, 127, 0, 331, 0, 0, 0, 156, 0, 0,
	0, 378, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 409, 95, 96, 97, 353, 352,
	355, 356, 357, 358, 0, 0, 117, 354, 359, 360,
	361, 0, 0, 0, 0, 329, 346, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 343, 344,
	0, 0, 0, 0, 392, 0, 345, 0, 0, 338,
	339, 341, 340, 342, 347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 391, 0, 0, 289, 0,
	0, 389, 0, 203, 0, 235, 140, 155, 113, 152,
	99, 109, 0, 138, 181, 211, 215, 0, 0, 0,
	121, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 267, 228, 102, 237,
	249, 118, 223, 0, 0, 0, 104, 247, 234, 170,
	149, 150, 103, 0, 209, 126, 134, 123, 183, 244,
	245, 122, 270, 110, 258, 106, 111, 257, 177, 240,
	248, 171, 164, 105, 246, 169, 163, 154, 130, 142,
	201, 161, 202, 143, 174, 173, 175, 0, 0, 0,
	232, 255, 271, 115, 0, 239, 265, 266, 0, 205,
	116, 135, 129, 200, 133, 176, 112, 145, 229, 153,
	160, 208, 269, 190, 214, 119, 254, 230, 379, 390,
	385, 386, 383, 384, 382, 381, 380, 393, 368, 369,
	370, 371, 376, 0, 387, 388, 372, 98, 107, 157,
	268, 206, 132, 373, 374, 256, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 108, 114, 120, 124, 128, 131, 137,
	141, 144, 146, 147, 148, 151, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 139, 250, 264,
	184, 0, 375, 0, 0, 332, 0, 0, 0, 127,
	0, 331, 0, 0, 0, 156, 0, 0, 0, 378,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 95, 96, 97, 353, 352, 355, 356,
	357, 358, 0, 0, 117, 354, 359, 360, 361, 0,
	0, 0, 0, 329, 346, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 343, 344, 421, 0,
	0, 0, 392, 0, 345, 0, 0, 338, 339, 341,
	340, 342, 347, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 391, 0, 0, 289, 0, 0, 389,
	0, 203, 0, 235, 140, 155, 113, 152, 99, 109,
	0, 138, 181, 211, 215, 0, 0, 0, 121, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 267, 228, 102, 237, 249, 118,
	223, 0, 0, 0, 104, 247, 234, 170, 149, 150,
	103, 0, 209, 126, 134, 123, 183, 244, 245, 122,
	270, 110, 258, 106, 111, 257, 177, 240, 248, 171,
	164, 105, 246, 169, 163, 154, 130, 142, 201, 161,
	202, 143, 174, 173, 175, 0, 0, 0, 232, 255,
	271, 115, 0, 239, 265, 266, 0, 205, 116, 135,
	129, 200, 133, 176, 112, 145, 229, 153, 160, 208,
	269, 190, 214, 119, 254, 230, 379, 390, 385, 386,
	383, 384, 382, 381, 380, 393, 368, 369, 370, 371,
	376, 0, 387, 388, 372, 98, 107, 157, 268, 206,
	132, 373, 374, 256, 0, 0, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 108, 114, 120, 124, 128, 131, 137, 141, 144,
	146, 147, 148, 151, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 139, 250, 264, 184, 0,
	375, 0, 0, 332, 0, 0, 0, 127, 0, 331,
	0, 0, 0, 156, 0, 0, 0, 378, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 95, 96, 97, 353, 961, 355, 356, 357, 358,
	0, 0, 117, 354, 359, 360, 361, 0, 0, 0,
	0, 329, 346, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 343, 344, 421, 0, 0, 0,
	392, 0, 345, 0, 0, 338, 339, 341, 340, 342,
	347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 391, 0, 0, 289, 0, 0, 389, 0, 203,
	0, 235, 140, 155, 113, 152, 99, 109, 0, 138,
	181, 211, 215, 0, 0, 0, 121, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 267, 228, 102, 237, 249, 118, 223, 0,
	0, 0, 104, 247, 234, 170, 149, 150, 103, 0,
	209, 126, 134, 123, 183, 244, 245, 122, 270, 110,
	258, 106, 111, 257, 177, 240, 248, 171, 164, 105,
	246, 169, 163, 154, 130, 142, 201, 161, 202, 143,
	174, 173, 175, 0, 0, 0, 232, 255, 271, 115,
	0, 239, 265, 266, 0, 205, 116, 135, 129, 200,
	133, 176, 112, 145, 229, 153, 160, 208, 269, 190,
	214, 119, 254, 230, 379, 390, 385, 386, 383, 384,
	382, 381, 380, 393, 368, 369, 370, 371, 376, 0,
	387, 388, 372, 98, 107, 157, 268, 206, 132, 373,
	374, 256, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 108,
	114, 120, 124, 128, 131, 137, 141, 144, 146, 147,
	148, 151, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 139, 250, 264, 184, 0, 375, 0,
	0, 332, 0, 0, 0, 127, 0, 331, 0, 0,
	0, 156, 0, 0, 0, 378, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 95,
	96, 97, 353, 958, 355, 356, 357, 358, 0, 0,
	117, 354, 359, 360, 361, 0, 0, 0, 0, 329,
	346, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 343, 344, 421, 0, 0, 0, 392, 0,
	345, 0, 0, 338, 339, 341, 340, 342, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 391,
	0, 0, 289, 0, 0, 389, 0, 203, 0, 235,
	140, 155, 113, 152, 99, 109, 0, 138, 181, 211,
	215, 0, 0, 0, 121, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	267, 228, 102, 237, 249, 118, 223, 0, 0, 0,
	104, 247, 234, 170, 149, 150, 103, 0, 209, 126,
	134, 123, 183, 244, 245, 122, 270, 110, 258, 106,
	111, 257, 177, 240, 248, 171, 164, 105, 246, 169,
	163, 154, 130, 142, 201, 161, 202, 143, 174, 173,
	175, 0, 0, 0, 232, 255, 271, 115, 0, 239,
	265, 266, 0, 205, 116, 135, 129, 200, 133, 176,
	112, 145, 229, 153, 160, 208, 269, 190, 214, 119,
	254, 230, 379, 390, 385, 386, 383, 384, 382, 381,
	380, 393, 368, 369, 370, 371, 376, 0, 387, 388,
	372, 98, 107, 157, 268, 206, 132, 373, 374, 256,
	0, 0, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 108, 114, 120,
	124, 128, 131, 137, 141, 144, 146, 147, 148, 151,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 139, 250, 264, 402, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 375, 0,
	0, 332, 0, 0, 0, 127, 0, 331, 0, 0,
	0, 156, 0, 0, 0, 378, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 95,
	96, 97, 353, 352, 355, 356, 357, 358, 0, 0,
	117, 354, 359, 360, 361, 0, 0, 0, 0, 329,
	346, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 343, 344, 0, 0, 0, 0, 392, 0,
	345, 0, 0, 338, 339, 341, 340, 342, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 391,
	0, 0, 289, 0, 0, 389, 0, 203, 0, 235,
	140, 155, 113, 152, 99, 109, 0, 138, 181, 211,
	215, 0, 0, 0, 121, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	267, 228, 102, 237, 249, 118, 223, 0, 0, 0,
	104, 247, 234, 170, 149, 150, 103, 0, 209, 126,
	134, 123, 183, 244, 245, 122, 270, 110, 258, 106,
	111, 257, 177, 240, 248, 171, 164, 105, 246, 169,
	163, 154, 130, 142, 201, 161, 202, 143, 174, 173,
	175, 0, 0, 0, 232, 255, 271, 115, 0, 239,
	265, 266, 0, 205, 116, 135, 129, 200, 133, 176,
	112, 145, 229, 153, 160, 208, 269, 190, 214, 119,
	254, 230, 379, 390, 385, 386, 383, 384, 382, 381,
	380, 393, 368, 369, 370, 371, 376, 0, 387, 388,
	372, 98, 107, 157, 268, 206, 132, 373, 374, 256,
	0, 0, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 108, 114, 120,
	124, 128, 131, 137, 141, 144, 146, 147, 148, 151,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 139, 250, 264, 184, 0, 375, 0, 0, 332,
	0, 0, 0, 127, 0, 331, 0, 0, 0, 156,
	0, 0, 0, 378, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 95, 96, 97,
	353, 352, 355, 356, 357, 358, 0, 0, 117, 354,
	359, 360, 361, 0, 0, 0, 0, 329, 346, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	343, 344, 0, 0, 0, 0, 392, 0, 345, 0,
	0, 338, 339, 341, 340, 342, 347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 391, 0, 0,
	289, 0, 0, 389, 0, 203, 0, 235, 140, 155,
	113, 152, 99, 109, 0, 138, 181, 211, 215, 0,
	0, 0, 121, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 267, 228,
	102, 237, 249, 118, 223, 0, 0, 0, 104, 247,
	234, 170, 149, 150, 103, 0, 209, 126, 134, 123,
	183, 244, 245, 122, 270, 110, 258, 106, 111, 257,
	177, 240, 248, 171, 164, 105, 246, 169, 163, 154,
	130, 142, 201, 161, 202, 143, 174, 173, 175, 0,
	0, 0, 232, 255, 271, 115, 0, 239, 265, 266,
	0, 205, 116, 135, 129, 200, 133, 176, 112, 145,
	229, 153, 160, 208, 269, 190, 214, 119, 254, 230,
	379, 390, 385, 386, 383, 384, 382, 381, 380, 393,
	368, 369, 370, 371, 376, 0, 387, 388, 372, 98,
	107, 157, 268, 206, 132, 373, 374, 256, 0, 0,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 108, 114, 120, 124, 128,
	131, 137, 141, 144, 146, 147, 148, 151, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 139,
	250, 264, 184, 0, 375, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 156, 0, 0,
	0, 378, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 95, 96, 97, 353, 352,
	355, 356, 357, 358, 0, 0, 117, 354, 359, 360,
	361, 0, 0, 0, 0, 0, 346, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 343, 344,
	0, 0, 0, 0, 392, 0, 345, 0, 0, 338,
	339, 341, 340, 342, 347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 391, 0, 0, 289, 0,
	0, 389, 0, 203, 0, 235, 140, 155, 113, 152,
	99, 109, 0, 138, 181, 211, 215, 0, 0, 0,
	121, 0, 213, 191, 252, 1614, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 267, 228, 102, 237,
	249, 118, 223, 0, 0, 0, 104, 247, 234, 170,
	149, 150, 103, 0, 209, 126, 134, 123, 183, 244,
	245, 122, 270, 110, 258, 106, 111, 257, 177, 240,
	248, 171, 164, 105, 246, 169, 163, 154, 130, 142,
	201, 161, 202, 143, 174, 173, 175, 0, 0, 0,
	232, 255, 271, 115, 0, 239, 265, 266, 0, 205,
	116, 135, 129, 200, 133, 176, 112, 145, 229, 153,
	160, 208, 269, 190, 214, 119, 254, 230, 379, 390,
	385, 386, 383, 384, 382, 381, 380, 393, 368, 369,
	370, 371, 376, 0, 387, 388, 372, 98, 107, 157,
	268, 206, 132, 373, 374, 256, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 108, 114, 120, 124, 128, 131, 137,
	141, 144, 146, 147, 148, 151, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 139, 250, 264,
	184, 0, 375, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 156, 0, 0, 0, 378,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 409, 95, 96, 97, 353, 352, 355, 356,
	357, 358, 0, 0, 117, 354, 359, 360, 361, 0,
	0, 0, 0, 0, 346, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 343, 344, 0, 0,
	0, 0, 392, 0, 345, 0, 0, 338, 339, 341,
	340, 342, 347, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 391, 0, 0, 289, 0, 0, 389,
	0, 203, 0, 235, 140, 155, 113, 152, 99, 109,
	0, 138, 181, 211, 215, 0, 0, 0, 121, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 267, 228, 102, 237, 249, 118,
	223, 0, 0, 0, 104, 247, 234, 170, 149, 150,
	103, 0, 209, 126, 134, 123, 183, 244, 245, 122,
	270, 110, 258, 106, 111, 257, 177, 240, 248, 171,
	164, 105, 246, 169, 163, 154, 130, 142, 201, 161,
	202, 143, 174, 173, 175, 0, 0, 0, 232, 255,
	271, 115, 0, 239, 265, 266, 0, 205, 116, 135,
	129, 200, 133, 176, 112, 145, 229, 153, 160, 208,
	269, 190, 214, 119, 254, 230, 379, 390, 385, 386,
	383, 384, 382, 381, 380, 393, 368, 369, 370, 371,
	376, 0, 387, 388, 372, 98, 107, 157, 268, 206,
	132, 373, 374, 256, 0, 0, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 108, 114, 120, 124, 128, 131, 137, 141, 144,
	146, 147, 148, 151, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 139, 250, 264, 184, 0,
	375, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 156, 0, 0, 0, 378, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 95, 96, 97, 353, 352, 355, 356, 357, 358,
	0, 0, 117, 354, 359, 360, 361, 0, 0, 0,
	0, 0, 346, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 343, 344, 0, 0, 0, 0,
	392, 0, 345, 0, 0, 338, 339, 341, 340, 342,
	347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 391, 0, 0, 289, 0, 0, 389, 0, 203,
	0, 235, 140, 155, 113, 152, 99, 109, 0, 138,
	181, 211, 215, 0, 0, 0, 121, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 267, 228, 102, 237, 249, 118, 223, 0,
	0, 0, 104, 247, 234, 170, 149, 150, 103, 0,
	209, 126, 134, 123, 183, 244, 245, 122, 270, 110,
	258, 106, 111, 257, 177, 240, 248, 171, 164, 105,
	246, 169, 163, 154, 130, 142, 201, 161, 202, 143,
	174, 173, 175, 0, 0, 0, 232, 255, 271, 115,
	0, 239, 265, 266, 0, 205, 116, 135, 129, 200,
	133, 176, 112, 145, 229, 153, 160, 208, 269, 190,
	214, 119, 254, 230, 379, 390, 385, 386, 383, 384,
	382, 381, 380, 393, 368, 369, 370, 371, 376, 0,
	387, 388, 372, 98, 107, 157, 268, 206, 132, 373,
	374, 256, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 108,
	114, 120, 124, 128, 131, 137, 141, 144, 146, 147,
	148, 151, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 139, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 657, 656,
	666, 667, 659, 660, 661, 662, 663, 664, 665, 658,
	0, 0, 668, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 289, 0, 0, 0, 0, 203, 0, 235,
	140, 155, 113, 152, 99, 109, 0, 138, 181, 211,
	215, 0, 0, 0, 121, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	267, 228, 102, 237, 249, 118, 223, 0, 0, 0,
	104, 247, 234, 170, 149, 150, 103, 0, 209, 126,
	134, 123, 183, 244, 245, 122, 270, 110, 258, 106,
	111, 257, 177, 240, 248, 171, 164, 105, 246, 169,
	163, 154, 130, 142, 201, 161, 202, 143, 174, 173,
	175, 0, 0, 0, 232, 255, 271, 115, 0, 239,
	265, 266, 0, 205, 116, 135, 129, 200, 133, 176,
	112, 145, 229, 153, 160, 208, 269, 190, 214, 119,
	254, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 107, 157, 268, 206, 132, 0, 0, 256,
	0, 0, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 108, 114, 120,
	124, 128, 131, 137, 141, 144, 146, 147, 148, 151,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 139, 250, 264, 184, 0, 0, 0, 757, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 0, 156,
	0, 0, 0, 0, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	0, 759, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 646, 647, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 648, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	289, 0, 0, 0, 0, 203, 0, 235, 140, 155,
	113, 152, 99, 109, 0, 138, 181, 211, 215, 0,
	0, 0, 121, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 267, 228,
	102, 237, 249, 118, 223, 0, 0, 0, 104, 247,
	234, 170, 149, 150, 103, 0, 209, 126, 134, 123,
	183, 244, 245, 122, 270, 110, 258, 106, 111, 257,
	177, 240, 248, 171, 164, 105, 246, 169, 163, 154,
	130, 142, 201, 161, 202, 143, 174, 173, 175, 0,
	0, 0, 232, 255, 271, 115, 0, 239, 265, 266,
	0, 205, 116, 135, 129, 200, 133, 176, 112, 145,
	229, 153, 160, 208, 269, 190, 214, 119, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	107, 157, 268, 206, 132, 0, 0, 256, 0, 0,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 108, 114, 120, 124, 128,
	131, 137, 141, 144, 146, 147, 148, 151, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 139,
	250, 264, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 89, 90, 0, 86, 0,
	0, 0, 91, 203, 0, 235, 140, 155, 113, 152,
	99, 109, 0, 138, 181, 211, 215, 0, 0, 0,
	121, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 267, 228, 102, 237,
	249, 118, 223, 0, 0, 0, 104, 247, 234, 170,
	149, 150, 103, 0, 209, 126, 134, 123, 183, 244,
	245, 122, 270, 110, 258, 106, 111, 257, 177, 240,
	248, 171, 164, 105, 246, 169, 163, 154, 130, 142,
	201, 161, 202, 143, 174, 173, 175, 0, 0, 0,
	232, 255, 271, 115, 0, 239, 265, 266, 0, 205,
	116, 135, 129, 200, 133, 176, 112, 145, 229, 153,
	160, 208, 269, 190, 214, 119, 254, 230, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 107, 157,
	268, 206, 132, 0, 0, 256, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 108, 114, 120, 124, 128, 131, 137,
	141, 144, 146, 147, 148, 151, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 139, 250, 264,
	184, 0, 0, 0, 1029, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 156, 0, 0, 0, 0,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 0, 1031, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 289, 0, 0, 0,
	0, 203, 0, 235, 140, 155, 113, 152, 99, 109,
	0, 138, 181, 211, 215, 0, 0, 0, 121, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 267, 228, 102, 237, 249, 118,
	223, 0, 0, 0, 104, 247, 234, 170, 149, 150,
	103, 0, 209, 126, 134, 123, 183, 244, 245, 122,
	270, 110, 258, 106, 111, 257, 177, 240, 248, 171,
	164, 105, 246, 169, 163, 154, 130, 142, 201, 161,
	202, 143, 174, 173, 175, 0, 0, 0, 232, 255,
	271, 115, 0, 239, 265, 266, 0, 205, 116, 135,
	129, 200, 133, 176, 112, 145, 229, 153, 160, 208,
	269, 190, 214, 119, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 107, 157, 268, 206,
	132, 0, 0, 256, 0, 0, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 108, 114, 120, 124, 128, 131, 137, 141, 144,
	146, 147, 148, 151, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 139, 250, 264, 31, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 156, 0, 0, 0, 0,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 95, 96, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 289, 0, 0, 0,
	0, 203, 0, 235, 140, 155, 113, 152, 99, 109,
	0, 138, 181, 211, 215, 0, 0, 0, 121, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 267, 228, 102, 237, 249, 118,
	223, 0, 0, 0, 104, 247, 234, 170, 149, 150,
	103, 0, 209, 126, 134, 123, 183, 244, 245, 122,
	270, 110, 258, 106, 111, 257, 177, 240, 248, 171,
	164, 105, 246, 169, 163, 154, 130, 142, 201, 161,
	202, 143, 174, 173, 175, 0, 0, 0, 232, 255,
	271, 115, 0, 239, 265, 266, 0, 205, 116, 135,
	129, 200, 133, 176, 112, 145, 229, 153, 160, 208,
	269, 190, 214, 119, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 107, 157, 268, 206,
	132, 0, 0, 256, 0, 0, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 108, 114, 120, 124, 128, 131, 137, 141, 144,
	146, 147, 148, 151, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 139, 250, 264, 184, 0,
	0, 0, 1029, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 0, 1031, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 289, 0, 0, 0, 0, 203,
	0, 235, 140, 155, 113, 152, 99, 109, 0, 138,
	181, 211, 215, 0, 0, 0, 121, 0, 213, 191,
	252, 0, 1027, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 267, 228, 102, 237, 249, 118, 223, 0,
	0, 0, 104, 247, 234, 170, 149, 150, 103, 0,
	209, 126, 134, 123, 183, 244, 245, 122, 270, 110,
	258, 106, 111, 257, 177, 240, 248, 171, 164, 105,
	246, 169, 163, 154, 130, 142, 201, 161, 202, 143,
	174, 173, 175, 0, 0, 0, 232, 255, 271, 115,
	0, 239, 265, 266, 0, 205, 116, 135, 129, 200,
	133, 176, 112, 145, 229, 153, 160, 208, 269, 190,
	214, 119, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 107, 157, 268, 206, 132, 0,
	0, 256, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 108,
	114, 120, 124, 128, 131, 137, 141, 144, 146, 147,
	148, 151, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 139, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 0, 0, 995, 0, 0, 996, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 289, 0, 0, 0, 0, 203, 0, 235,
	140, 155, 113, 152, 99, 109, 0, 138, 181, 211,
	215, 0, 0, 0, 121, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	267, 228, 102, 237, 249, 118, 223, 0, 0, 0,
	104, 247, 234, 170, 149, 150, 103, 0, 209, 126,
	134, 123, 183, 244, 245, 122, 270, 110, 258, 106,
	111, 257, 177, 240, 248, 171, 164, 105, 246, 169,
	163, 154, 130, 142, 201, 161, 202, 143, 174, 173,
	175, 0, 0, 0, 232, 255, 271, 115, 0, 239,
	265, 266, 0, 205, 116, 135, 129, 200, 133, 176,
	112, 145, 229, 153, 160, 208, 269, 190, 214, 119,
	254, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 107, 157, 268, 206, 132, 0, 0, 256,
	0, 0, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 108, 114, 120,
	124, 128, 131, 137, 141, 144, 146, 147, 148, 151,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 139, 250, 264, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 792, 0, 0, 0, 156,
	0, 0, 0, 0, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	0, 791, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	289, 0, 0, 0, 0, 203, 0, 235, 140, 155,
	113, 152, 99, 109, 0, 138, 181, 211, 215, 0,
	0, 0, 121, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 267, 228,
	102, 237, 249, 118, 223, 0, 0, 0, 104, 247,
	234, 170, 149, 150, 103, 0, 209, 126, 134, 123,
	183, 244, 245, 122, 270, 110, 258, 106, 111, 257,
	177, 240, 248, 171, 164, 105, 246, 169, 163, 154,
	130, 142, 201, 161, 202, 143, 174, 173, 175, 0,
	0, 0, 232, 255, 271, 115, 0, 239, 265, 266,
	0, 205, 116, 135, 129, 200, 133, 176, 112, 145,
	229, 153, 160, 208, 269, 190, 214, 119, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	107, 157, 268, 206, 132, 0, 0, 256, 0, 0,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 108, 114, 120, 124, 128,
	131, 137, 141, 144, 146, 147, 148, 151, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 139,
	250, 264, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 409, 95, 96, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 289, 0,
	0, 0, 0, 203, 0, 235, 140, 155, 113, 152,
	99, 109, 0, 138, 181, 211, 215, 0, 0, 0,
	121, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 267, 228, 102, 237,
	249, 118, 223, 0, 0, 0, 104, 247, 234, 170,
	149, 150, 103, 0, 209, 126, 134, 123, 183, 244,
	245, 122, 270, 110, 258, 106, 111, 257, 177, 240,
	248, 171, 164, 105, 246, 169, 163, 154, 130, 142,
	201, 161, 202, 143, 174, 173, 175, 0, 0, 0,
	232, 255, 271, 115, 0, 239, 265, 266, 0, 205,
	116, 135, 129, 200, 133, 176, 112, 145, 229, 153,
	160, 208, 269, 190, 214, 119, 254, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 107, 157,
	268, 206, 132, 0, 0, 256, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 108, 114, 120, 124, 128, 131, 137,
	141, 144, 146, 147, 148, 151, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 139, 250, 264,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 156, 0, 0, 0, 0,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 95, 96, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 289, 0, 0, 0,
	0, 203, 0, 235, 140, 155, 113, 152, 99, 109,
	0, 138, 181, 211, 215, 0, 0, 0, 121, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 267, 228, 102, 237, 249, 118,
	223, 0, 0, 0, 104, 247, 234, 170, 149, 150,
	103, 0, 209, 126, 134, 123, 183, 244, 245, 122,
	270, 110, 258, 106, 111, 257, 177, 240, 248, 171,
	164, 105, 246, 169, 163, 154, 130, 142, 201, 161,
	202, 143, 174, 173, 175, 0, 0, 0, 232, 255,
	271, 115, 0, 239, 265, 266, 0, 205, 116, 135,
	129, 200, 133, 176, 112, 145, 229, 153, 160, 208,
	269, 190, 214, 119, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 107, 157, 268, 206,
	132, 0, 0, 256, 0, 0, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 108, 114, 120, 124, 128, 131, 137, 141, 144,
	146, 147, 148, 151, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 139, 250, 264, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 0, 1031, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 289, 0, 0, 0, 0, 203,
	0, 235, 140, 155, 113, 152, 99, 109, 0, 138,
	181, 211, 215, 0, 0, 0, 121, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 267, 228, 102, 237, 249, 118, 223, 0,
	0, 0, 104, 247, 234, 170, 149, 150, 103, 0,
	209, 126, 134, 123, 183, 244, 245, 122, 270, 110,
	258, 106, 111, 257, 177, 240, 248, 171, 164, 105,
	246, 169, 163, 154, 130, 142, 201, 161, 202, 143,
	174, 173, 175, 0, 0, 0, 232, 255, 271, 115,
	0, 239, 265, 266, 0, 205, 116, 135, 129, 200,
	133, 176, 112, 145, 229, 153, 160, 208, 269, 190,
	214, 119, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 107, 157, 268, 206, 132, 0,
	0, 256, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 108,
	114, 120, 124, 128, 131, 137, 141, 144, 146, 147,
	148, 151, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 139, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 0, 759, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 289, 0, 0, 0, 0, 203, 0, 235,
	140, 155, 113, 152, 99, 109, 0, 138, 181, 211,
	215, 0, 0, 0, 121, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	267, 228, 102, 237, 249, 118, 223, 0, 0, 0,
	104, 247, 234, 170, 149, 150, 103, 0, 209, 126,
	134, 123, 183, 244, 245, 122, 270, 110, 258, 106,
	111, 257, 177, 240, 248, 171, 164, 105, 246, 169,
	163, 154, 130, 142, 201, 161, 202, 143, 174, 173,
	175, 0, 0, 0, 232, 255, 271, 115, 0, 239,
	265, 266, 0, 205, 116, 135, 129, 200, 133, 176,
	112, 145, 229, 153, 160, 208, 269, 190, 214, 119,
	254, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 107, 157, 268, 206, 132, 0, 0, 256,
	0, 0, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 108, 114, 120,
	124, 128, 131, 137, 141, 144, 146, 147, 148, 151,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 139, 250, 264, 184, 0, 0, 0, 0, 0,
	0, 0, 762, 127, 0, 0, 0, 0, 0, 156,
	0, 0, 0, 0, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	289, 0, 0, 0, 0, 203, 0, 235, 140, 155,
	113, 152, 99, 109, 0, 138, 181, 211, 215, 0,
	0, 0, 121, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 267, 228,
	102, 237, 249, 118, 223, 0, 0, 0, 104, 247,
	234, 170, 149, 150, 103, 0, 209, 126, 134, 123,
	183, 244, 245, 122, 270, 110, 258, 106, 111, 257,
	177, 240, 248, 171, 164, 105, 246, 169, 163, 154,
	130, 142, 201, 161, 202, 143, 174, 173, 175, 0,
	0, 0, 232, 255, 271, 115, 0, 239, 265, 266,
	0, 205, 116, 135, 129, 200, 133, 176, 112, 145,
	229, 153, 160, 208, 269, 190, 214, 119, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	107, 157, 268, 206, 132, 0, 0, 256, 0, 0,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 108, 114, 120, 124, 128,
	131, 137, 141, 144, 146, 147, 148, 151, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 139,
	250, 264, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 0, 635,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 289, 0,
	0, 0, 0, 203, 0, 235, 140, 155, 113, 152,
	99, 109, 0, 138, 181, 211, 215, 0, 0, 0,
	121, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 267, 228, 102, 237,
	249, 118, 223, 0, 0, 0, 104, 247, 234, 170,
	149, 150, 103, 0, 209, 126, 134, 123, 183, 244,
	245, 122, 270, 110, 258, 106, 111, 257, 177, 240,
	248, 171, 164, 105, 246, 169, 163, 154, 130, 142,
	201, 161, 202, 143, 174, 173, 175, 0, 0, 0,
	232, 255, 271, 115, 0, 239, 265, 266, 0, 205,
	116, 135, 129, 200, 133, 176, 112, 145, 229, 153,
	160, 208, 269, 190, 214, 119, 254, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 107, 157,
	268, 206, 132, 0, 0, 256, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 108, 114, 120, 124, 128, 131, 137,
	141, 144, 146, 147, 148, 151, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 139, 250, 264,
	426, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 289, 0, 0, 0, 0, 203, 0,
	235, 140, 155, 113, 152, 99, 109, 0, 138, 181,
	211, 215, 0, 0, 0, 121, 0, 213, 191, 252,
	0, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 267, 228, 102, 237, 249, 118, 223, 0, 0,
	0, 104, 247, 234, 170, 149, 150, 103, 0, 209,
	126, 134, 123, 183, 244, 245, 122, 270, 110, 258,
	106, 111, 257, 177, 240, 248, 171, 164, 105, 246,
	169, 163, 154, 130, 142, 201, 161, 202, 143, 174,
	173, 175, 0, 0, 0, 232, 255, 271, 115, 0,
	239, 265, 266, 0, 205, 116, 135, 129, 200, 133,
	176, 112, 145, 229, 153, 160, 208, 269, 190, 214,
	119, 254, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 107, 157, 268, 206, 132, 0, 0,
	256, 0, 0, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 101, 108, 114,
	120, 124, 128, 131, 137, 141, 144, 146, 147, 148,
	151, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 139, 250, 264, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 320, 0, 136, 0, 0,
	0, 289, 0, 0, 0, 0, 203, 0, 235, 140,
	155, 113, 152, 99, 109, 0, 138, 181, 211, 215,
	0, 0, 0, 121, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 267,
	228, 102, 237, 249, 118, 223, 0, 0, 0, 104,
	247, 234, 170, 149, 150, 103, 0, 209, 126, 134,
	123, 183, 244, 245, 122, 270, 110, 258, 106, 111,
	257, 177, 240, 248, 171, 164, 105, 246, 169, 163,
	154, 130, 142, 201, 161, 202, 143, 174, 173, 175,
	0, 0, 0, 232, 255, 271, 115, 0, 239, 265,
	266, 0, 205, 116, 135, 129, 200, 133, 176, 112,
	145, 229, 153, 160, 208, 269, 190, 214, 119, 254,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 107, 157, 268, 206, 132, 0, 0, 256, 0,
	0, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 101, 108, 114, 120, 124,
	128, 131, 137, 141, 144, 146, 147, 148, 151, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	319, 250, 264, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 156, 0,
	0, 0, 0, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 284, 0, 289,
	0, 0, 0, 0, 203, 0, 235, 140, 155, 113,
	152, 99, 109, 0, 138, 181, 211, 215, 0, 0,
	0, 121, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 267, 228, 102,
	237, 249, 118, 223, 0, 0, 0, 104, 247, 234,
	170, 149, 150, 103, 0, 209, 126, 134, 123, 183,
	244, 245, 122, 270, 110, 258, 106, 111, 257, 177,
	240, 248, 171, 164, 105, 246, 169, 163, 154, 130,
	142, 201, 161, 202, 143, 174, 173, 175, 0, 0,
	0, 232, 255, 271, 115, 0, 239, 265, 266, 0,
	205, 116, 135, 129, 200, 133, 176, 112, 145, 229,
	153, 160, 208, 269, 190, 214, 119, 254, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 107,
	157, 268, 206, 132, 0, 0, 256, 0, 0, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 101, 108, 114, 120, 124, 128, 131,
	137, 141, 144, 146, 147, 148, 151, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 139, 250,
	264, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 156, 0, 0, 0,
	0, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 289, 0, 0,
	0, 0, 203, 0, 235, 140, 155, 113, 152, 99,
	109, 0, 138, 181, 211, 215, 0, 0, 0, 121,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 267, 228, 102, 237, 249,
	118, 223, 0, 0, 0, 104, 247, 234, 170, 149,
	150, 103, 0, 209, 126, 134, 123, 183, 244, 245,
	122, 270, 110, 258, 106, 111, 257, 177, 240, 248,
	171, 164, 105, 246, 169, 163, 154, 130, 142, 201,
	161, 202, 143, 174, 173, 175, 0, 0, 0, 232,
	255, 271, 115, 0, 239, 265, 266, 0, 205, 116,
	135, 129, 200, 133, 176, 112, 145, 229, 153, 160,
	208, 269, 190, 214, 119, 254, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 107, 157, 268,
	206, 132, 0, 0, 256, 0, 0, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 101, 108, 114, 120, 124, 128, 131, 137, 141,
	144, 146, 147, 148, 151, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 139, 250, 264,
}

var yyPact = [...]int{
	1687, -1000, -273, 1080, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1016,
	813, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 296, 12374,
	22, 137, 11, 17265, 136, 169, 17613, -1000, -1000, 17,
	17613, 28, 16917, -1000, -1000, -76, -79, -1000, 10286, 574,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 794, 1015,
	1011, 1021, 622, 1090, -1000, 8882, 103, 103, 16569, 7490,
	25, -1000, -1000, 563, 17613, 132, 17613, -146, 99, 99,
	99, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 135, 17613, 554, 554, 205, -1000, 17613, 92,
	554, 92, 92, 92, 17613, -1000, 185, -1000, -1000, -1000,
	17613, 554, 959, 278, 68, 4963, -1000, 207, -1000, 4963,
	47, 4963, -41, 1037, 40, -22, -1000, 4963, -1000, -1000,
	-1000, -1000, -1000, 122, -1000, -1000, 17613, 16214, 128, 306,
	-1000, -1000, -1000, -1000, -1000, -1000, 657, 594, -1000, 10286,
	1884, 749, 749, -1000, -1000, 165, -1000, -1000, 11330, 11330,
	11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 749, 184, -1000, 9938, 749, 749, 749, 749,
	749, 749, 749, 749, 749, 749, 749, 10286, 749, 749,
	749, 749, 749, 749, 749, 749, 749, 749, 749, 749,
	749, 749, 749, 749, -1000, -1000, 749, -1000, -1000, 1016,
	-1000, 813, -1000, -1000, -1000, 975, 10286, 10286, 1016, -1000,
	910, 8882, -1000, -1000, 996, -1000, -1000, -1000, -1000, 368,
	1053, -1000, 12026, 183, 15866, 14822, 17613, 775, 632, -1000,
	-1000, 182, 752, 7129, -60, -1000, -1000, -1000, 303, 14126,
	-1000, -1000, -1000, 956, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -60, 707, 17613, -1000,
	340, -1000, 554, 4963, 124, 554, 324, 554, 17613, 17613,
	4963, 4963, 4963, 53, 88, 78, 17613, 751, 117, 17613,
	1001, 844, 17613, 554, 554, -1000, 6407, -1000, 4963, 278,
	-1000, 523, 10286, 4963, 4963, 4963, 17613, 4963, 4963, -1000,
	-1000, -1000, 345, -1000, -1000, -1000, -1000, 4963, 4963, -1000,
	1052, 325, -1000, -1000, -1000, -1000, 10286, 228, -1000, 841,
	-1000, 27, -1000, -1000, -1000, -1000, -1000, 1080, -1000, -1000,
	-1000, -122, -1000, -1000, 10286, 10286, 10286, 10286, 378, 230,
	11330, 434, 283, 11330, 11330, 11330, 11330, 11330, 11330, 11330,
	11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 574, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 554, -1000, 1078,
	895, 895, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 11678, 7838, 6407, 622, 702, 1016, 8882, 8882, 10286,
	10286, 9578, 9230, 8882, -1000, -1000, -1000, 957, 311, 594,
	17613, -1000, -1000, 10982, -1000, -1000, -1000, -1000, -1000, 536,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 17613, 17613, 8882,
	8882, 8882, 8882, 8882, -1000, 10286, 1011, 622, 996, -1000,
	1067, 220, 423, 745, -1000, 597, 1011, 13778, 759, -1000,
	996, -1000, -1000, -1000, 17613, -1000, -1000, 15518, -1000, -1000,
	6046, 63, 17613, -1000, 753, 949, -1000, -1000, -1000, 981,
	13082, 13430, 63, 730, 14822, 17613, -1000, -1000, 14822, 17613,
	5685, 6768, -60, -1000, 725, -1000, -106, -127, 8186, 195,
	-1000, -1000, -1000, -1000, 725, 4602, 209, 580, 336, -53,
	-1000, -1000, -1000, 771, -1000, 771, 771, 771, 771, -13,
	-13, -13, -13, -1000, -1000, -1000, -1000, -1000, 809, 806,
	-1000, 771, 771, 771, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 800, 800, 800, 784, 784, 816, -1000, 17613,
	4963, 1000, 4963, -1000, 87, -1000, -1000, -1000, 17613, 17613,
	17613, 17613, 17613, 157, 17613, 17613, 744, -1000, 17613, 4963,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 594, -1000,
	-1000, -1000, -1000, -1000, -1000, 17613, -1000, -1000, -1000, -1000,
	17613, 278, 17613, 17613, 594, -1000, 510, 17613, 17613, -1000,
	-1000, -1000, -1000, -1000, 594, 230, 304, 280, -1000, -1000,
	386, -1000, -1000, 366, -1000, -1000, -1000, -1000, 434, 11330,
	11330, 11330, 548, 366, 2123, 822, 774, 198, 457, 457,
	196, 196, 196, 196, 196, 406, 406, -1000, 536, -1000,
	-1000, -1000, 536, 8882, 8882, 742, 749, 178, -1000, 794,
	-1000, -1000, 1011, 680, 680, 532, 308, 335, 1048, 680,
	267, 1039, 680, 680, 8882, -1000, -1000, 343, -1000, 10286,
	536, -1000, 177, -1000, 1674, 733, 732, 680, 536, 536,
	680, 680, 975, -1000, -1000, 894, 10286, 10286, 10286, -1000,
	-1000, -1000, 975, 1027, -1000, 938, 929, 1036, 8882, 14822,
	996, -1000, -1000, -1000, 176, 758, 749, -1000, 17613, 14822,
	14822, 14822, 14822, 14822, -1000, 872, 859, -1000, 900, 893,
	909, 17613, -1000, 690, 622, 13082, 191, 749, -1000, 15170,
	-1000, -1000, 1036, 14822, 709, -1000, 709, -1000, 173, -1000,
	-1000, 725, -60, -96, -1000, -1000, -1000, -1000, 594, -1000,
	618, 718, 4241, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	789, 554, -1000, 990, 232, 252, 554, 980, -1000, -1000,
	-1000, 950, -1000, 358, -55, -1000, -1000, 455, -13, -13,
	-1000, -1000, 195, 955, 195, 195, 195, 507, 507, -1000,
	-1000, -1000, -1000, 439, -1000, -1000, -1000, 433, -1000, 840,
	17613, 4963, -1000, -1000, -1000, -1000, 603, 603, 226, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	62, 776, -1000, -1000, -1000, -1000, 9, 51, 106, -1000,
	4963, -1000, 325, 325, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 548, 366, 2013, -1000, 11330, 11330,
	-1000, -1000, 680, 680, 8882, 6407, 1016, 975, -1000, -1000,
	238, 574, 238, 11330, 11330, -1000, 11330, 11330, -1000, -161,
	697, 309, -1000, 10286, 506, -1000, 6407, -1000, 11330, 11330,
	-1000, -1000, -1000, -1000, -1000, -1000, 906, 594, 594, -1000,
	-1000, 17613, -1000, -1000, -1000, -1000, 1031, 10286, -1000, 710,
	-1000, 5324, 839, 17613, 749, 1080, 13082, 17613, 715, -1000,
	266, 949, 788, 836, 924, -1000, -1000, -1000, -1000, 856,
	-1000, 855, -1000, -1000, -1000, -1000, -1000, 622, -1000, 131,
	130, 126, 17613, -1000, 1016, 709, -1000, -1000, 210, -1000,
	-1000, -115, -132, -1000, -1000, -1000, 4602, -1000, 4602, 17613,
	79, -1000, 554, 554, -1000, -1000, -1000, 785, 834, 11330,
	-1000, -1000, -1000, 553, 195, 195, -1000, 259, -1000, -1000,
	-1000, 678, -1000, 671, 687, 655, 17613, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 17613, -1000, -1000, -1000,
	-1000, -1000, 17613, -167, 554, 17613, 17613, 17613, 17613, -1000,
	278, 278, -1000, 11330, 366, 366, -1000, -1000, 536, -1000,
	1011, -1000, 536, 771, 771, -1000, 771, 784, -1000, 771,
	12, 771, 10, 536, 536, 2055, 1977, 1942, 1718, 749,
	-154, -1000, 594, 10286, -1000, 1784, 1749, -1000, -1000, 1028,
	1017, 594, -1000, -1000, 960, 648, 635, -1000, -1000, 8534,
	651, 161, 643, -1000, 1016, 17613, 10286, -1000, -1000, 10286,
	780, -1000, 10286, -1000, -1000, -1000, 1016, 749, 749, 749,
	643, 1011, -1000, -1000, -1000, -1000, 4241, -1000, 641, -1000,
	771, -1000, -1000, -1000, 17613, -36, 1060, 366, -1000, -1000,
	-1000, -1000, -1000, -13, 505, -13, 397, -1000, 384, 4963,
	-1000, -1000, -1000, -1000, 994, -1000, 6407, -1000, -1000, 770,
	815, -1000, -1000, -1000, -1000, 366, -1000, 975, -1000, -1000,
	142, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11330,
	11330, 11330, 11330, 11330, 1011, 479, 594, 11330, 11330, -1000,
	10286, 10286, 979, -1000, 749, -1000, 748, 17613, 17613, -1000,
	17613, 1011, -1000, 594, 594, 17613, 594, 14474, 17613, 17613,
	12722, -1000, 181, 17613, -1000, 639, -1000, 234, -1000, -78,
	195, -1000, 195, 543, 538, -1000, 749, 675, -1000, 260,
	17613, 17613, -1000, -1000, -1000, 1674, 1674, 1674, 1674, 61,
	536, -1000, 1674, 1674, 594, 657, 1059, -1000, 749, 1080,
	152, -1000, -1000, -1000, 627, 625, -1000, 625, 625, 191,
	181, -1000, 554, 254, 477, -1000, 75, 17613, 364, 977,
	-1000, 976, -1000, -1000, -1000, -1000, -1000, 60, 6407, 4602,
	586, -1000, -1000, -1000, -1000, -1000, 536, 58, -171, -1000,
	-1000, -1000, 17613, 635, 17613, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 379, -1000, -1000, 17613, -1000, -1000, 464, -1000,
	-1000, 570, -1000, 17613, -1000, -1000, 776, -1000, 880, -165,
	-175, 604, -1000, -1000, 763, -1000, -1000, 60, 916, -167,
	-1000, 879, -1000, 17613, -1000, 59, -1000, -168, 541, 50,
	-172, 833, 749, -181, 831, -1000, 1045, 10634, -1000, -1000,
	1047, 217, 217, 1674, 536, -1000, -1000, -1000, 81, 409,
	-1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1313, 1312, 19, 77, 66, 1311, 1310, 1304, 101,
	100, 99, 1302, 1301, 1300, 1296, 1295, 1294, 1292, 1290,
	1289, 1288, 1287, 1286, 1285, 1284, 1283, 1279, 1276, 1275,
	1274, 1273, 1270, 1269, 90, 1267, 83, 1265, 1264, 1262,
	1260, 1258, 1257, 1255, 1252, 45, 208, 67, 59, 1248,
	69, 1541, 1244, 52, 70, 63, 1243, 36, 1242, 1241,
	81, 1240, 1239, 50, 1238, 1237, 54, 1236, 74, 1235,
	13, 57, 1234, 1232, 1231, 1230, 78, 2207, 1229, 1228,
	14, 1226, 1225, 113, 1224, 72, 23, 11, 18, 25,
	1219, 73, 1215, 6, 1206, 61, 1204, 1201, 1200, 1198,
	56, 1196, 58, 1195, 68, 26, 1193, 35, 76, 30,
	21, 8, 1191, 1187, 22, 75, 62, 65, 1186, 1185,
	429, 1183, 1181, 37, 1180, 1179, 1178, 42, 1176, 95,
	577, 1175, 1174, 1172, 1169, 41, 903, 1830, 12, 88,
	1167, 1166, 1165, 2748, 32, 49, 16, 1164, 1163, 1161,
	38, 114, 55, 1160, 1159, 34, 1158, 1157, 1155, 1154,
	1151, 1150, 1149, 17, 1148, 1146, 1145, 24, 33, 1141,
	1140, 64, 27, 1139, 1138, 1136, 43, 71, 1130, 1129,
	48, 1128, 1127, 28, 1125, 1124, 1123, 1122, 1121, 31,
	7, 1117, 15, 1115, 10, 1112, 29, 1110, 3, 1109,
	9, 1108, 2, 0, 1107, 4, 39, 5, 1106, 1,
	1091, 1088, 1639, 118, 89, 1087, 104,
}

var yyR1 = [...]int{
	0, 210, 211, 211, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 203, 203, 203, 21, 22, 3, 3, 3, 3,
	2, 2, 8, 4, 5, 5, 9, 9, 37, 37,
	10, 11, 11, 11, 11, 214, 214, 60, 60, 61,
	61, 108, 108, 12, 14, 14, 13, 13, 117, 117,
	116, 116, 116, 118, 118, 118, 118, 153, 153, 15,
	15, 15, 15, 15, 15, 15, 205, 205, 204, 202,
	202, 201, 201, 200, 23, 185, 187, 187, 186, 186,
	186, 186, 177, 156, 156, 156, 156, 159, 159, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 158, 158,
	158, 158, 158, 160, 160, 160, 160, 160, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 162, 162, 162, 162, 162, 162, 162,
	162, 176, 176, 163, 163, 171, 171, 172, 172, 172,
	169, 169, 170, 170, 173, 173, 173, 165, 165, 166,
	166, 174, 174, 167, 167, 167, 168, 168, 168, 175,
	175, 175, 175, 175, 164, 164, 178, 178, 195, 195,
	194, 194, 194, 184, 184, 191, 191, 191, 191, 191,
	181, 181, 181, 182, 182, 180, 180, 183, 183, 193,
	193, 192, 179, 179, 196, 196, 196, 196, 208, 209,
	207, 207, 207, 207, 207, 188, 188, 188, 189, 189,
	189, 190, 190, 190, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 199, 197, 197, 198, 198,
	17, 24, 24, 18, 18, 18, 18, 18, 19, 19,
	25, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 124, 124,
	126, 126, 122, 122, 125, 125, 123, 123, 123, 127,
	127, 127, 128, 128, 154, 154, 154, 27, 27, 29,
	30, 31, 31, 148, 148, 149, 149, 32, 33, 38,
	38, 38, 38, 38, 38, 40, 40, 40, 7, 7,
	7, 7, 39, 39, 39, 6, 6, 28, 28, 28,
	28, 20, 215, 34, 35, 35, 36, 36, 36, 42,
	42, 42, 41, 41, 41, 47, 47, 49, 49, 49,
	49, 49, 50, 50, 50, 50, 50, 50, 46, 46,
	48, 48, 48, 48, 140, 140, 140, 139, 139, 52,
	52, 53, 53, 54, 54, 55, 55, 55, 92, 69,
	69, 107, 107, 109, 109, 56, 56, 56, 56, 57,
	57, 58, 58, 59, 59, 147, 147, 146, 146, 146,
	145, 145, 62, 62, 62, 64, 63, 63, 63, 63,
	65, 65, 67, 67, 66, 66, 68, 70, 70, 70,
	70, 70, 71, 71, 51, 51, 51, 51, 51, 51,
	51, 51, 121, 121, 73, 73, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 84, 84, 84, 84,
	84, 84, 74, 74, 74, 74, 74, 74, 74, 45,
	45, 85, 85, 85, 91, 86, 86, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 81, 81, 81, 81, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 216, 216, 83,
	82, 82, 82, 82, 82, 82, 82, 43, 43, 43,
	43, 43, 152, 152, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 96, 96, 44,
	44, 94, 94, 95, 97, 97, 93, 93, 93, 76,
	76, 76, 76, 76, 76, 76, 76, 78, 78, 78,
	98, 98, 99, 99, 100, 100, 101, 101, 102, 103,
	103, 103, 104, 104, 104, 104, 105, 105, 105, 75,
	75, 75, 75, 106, 106, 106, 106, 110, 110, 87,
	87, 89, 89, 88, 90, 111, 111, 114, 112, 112,
	112, 115, 115, 115, 115, 113, 113, 113, 142, 142,
	142, 119, 119, 129, 129, 130, 130, 120, 120, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 132,
	132, 132, 133, 133, 134, 134, 134, 141, 141, 137,
	137, 138, 138, 143, 143, 144, 144, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 212, 213, 150, 151, 151, 151,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 2, 3, 4, 6, 6, 7,
	4, 6, 5, 8, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 0, 4, 3, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	2, 8, 4, 6, 5, 5, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 2, 4, 1, 3,
	3, 3, 8, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 0, 1, 2, 0, 2, 0,
	3, 0, 1, 0, 3, 3, 0, 2, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	3, 2, 3, 1, 10, 11, 11, 12, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 7, 7, 4,
	5, 4, 4, 7, 5, 5, 5, 12, 7, 5,
	9, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	3, 3, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 3, 4, 4, 4, 4, 4, 4,
	3, 2, 7, 2, 3, 4, 3, 7, 5, 4,
	2, 4, 4, 3, 3, 5, 2, 3, 1, 1,
	0, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 0, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 5, 0, 1, 0, 1, 2, 3, 0,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 3, 2, 2, 3,
	3, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 1, 2,
	3, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	7, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 3, 0, 5, 4,
	5, 5, 0, 2, 1, 3, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 2, 2, 2, 8, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 5, 4, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 2,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -210, -1, -3, -8, -9, -10, -11, -12, -14,
	-13, -15, -16, -17, -18, -19, -25, -26, -27, -29,
	-30, -31, -32, -33, -6, -28, -20, -21, -22, -4,
	-212, 6, 7, -37, 9, 10, 30, 175, -23, 124,
	125, 127, 126, 160, 128, 153, 54, 174, 177, 178,
	179, 180, -40, 158, 159, 31, 32, 130, 34, 35,
	58, 8, 263, 155, 154, 25, -211, 367, -36, 5,
	-100, 15, -3, -34, -215, -34, -34, -34, -34, -34,
	-34, -185, -187, 58, 97, -134, 134, 78, 255, 131,
	132, 138, -137, -203, -136, 61, 62, 63, 273, 146,
	307, 308, 174, 188, 182, 209, 201, 274, 309, 147,
	199, 202, 242, 144, 310, 229, 236, 72, 177, 251,
	311, 156, 197, 193, 312, 284, 191, 27, 313, 238,
	214, 314, 278, 240, 192, 237, 130, 315, 149, 363,
	142, 316, 215, 219, 317, 243, 318, 319, 320, 186,
	187, 321, 145, 245, 213, 143, 33, 275, 38, 164,
	246, 217, 322, 212, 208, 323, 324, 325, 326, 211,
	185, 207, 42, 221, 220, 222, 241, 204, 327, 328,
	329, 150, 330, 194, 18, 331, 332, 333, 334, 335,
	249, 159, 336, 162, 337, 338, 339, 340, 341, 342,
	239, 216, 218, 139, 166, 235, 277, 343, 247, 190,
	344, 151, 163, 158, 250, 152, 345, 346, 347, 348,
	349, 350, 351, 178, 352, 353, 354, 355, 173, 244,
	253, 41, 226, 356, 184, 141, 357, 175, 170, 231,
	205, 165, 358, 359, 195, 196, 210, 183, 206, 176,
	364, 167, 160, 360, 252, 227, 281, 203, 200, 171,
	361, 168, 169, 362, 365, 232, 233, 172, 276, 248,
	198, 228, -120, 134, 255, 131, 233, 136, 132, 132,
	133, 134, 255, 131, 132, -66, -143, -203, -136, 134,
	132, 115, 202, 242, 124, 230, 238, -126, 239, 166,
	-154, 132, -122, 229, 232, 233, 172, -203, 240, 244,
	243, 234, -143, -148, 181, -137, 179, -66, -38, 363,
	128, -150, -150, 231, 231, -150, -86, -51, -72, 81,
	-77, 29, 23, -76, -73, -93, -90, -91, 115, 116,
	118, 117, 119, 104, 105, 112, 82, 120, -81, -79,
	-80, -82, 65, 64, 73, 66, 67, 68, 69, 74,
	75, 76, -137, -143, -88, -212, 48, 49, 264, 265,
	266, 267, 272, 279, 280, 20, 268, 84, 37, 254,
	262, 261, 260, 258, 259, 256, 257, 270, 271, 137,
	255, 131, 110, 263, -203, -136, -152, -203, 65, -5,
	-4, -212, 6, 20, 21, -104, 17, 16, -213, 60,
	-42, -49, 43, 44, -50, 21, 36, 47, 45, -35,
	-48, 106, -51, -143, -120, -120, 11, -60, -61, -66,
	-68, -143, -112, -153, 176, -115, 244, 243, -138, -113,
	-137, -135, 242, 202, 241, 129, 282, 80, 22, 24,
	224, 83, 115, 16, 84, 114, 264, 124, 52, 283,
	256, 257, 254, 266, 267, 255, 230, 29, 10, 285,
	25, 154, 21, 36, 108, 126, 87, 88, 157, 23,
	155, 76, 288, 19, 55, 11, 13, 289, 290, 14,
	137, 136, 99, 133, 50, 8, 120, 26, 96, 46,
	291, 28, 292, 293, 294, 295, 48, 97, 17, 258,
	259, 31, 296, 272, 279, 280, 161, 110, 53, 39,
	81, 297, 298, 74, 299, 77, 56, 78, 15, 51,
	300, 301, 302, 303, 98, 127, 263, 49, 304, 131,
	6, 269, 30, 153, 47, 305, 132, 86, 270, 271,
	135, 75, 5, 138, 32, 9, 54, 57, 260, 261,
	262, 37, 85, 12, 306, 79, 176, -186, 97, -177,
	-203, -66, 133, -66, 263, -130, 137, -130, -130, 132,
	-66, -203, -203, 124, 126, 129, 56, -24, -66, -129,
	137, -203, -129, -129, -129, -66, 121, -66, -203, 30,
	-127, 97, 12, 255, -203, 166, 132, 167, 134, -151,
	-212, -138, -181, 133, 33, 145, -151, 170, 171, -151,
	-125, -124, 236, 237, 231, 235, 12, 171, 231, 169,
	-151, 135, -137, -39, -137, 65, -7, -3, -10, -9,
	-11, 89, -150, -150, 59, 80, 78, 79, 96, -51,
	-74, 99, 81, 97, 98, 83, 101, 100, 111, 104,
	105, 106, 107, 108, 109, 110, 102, 103, 114, 89,
	90, 91, 92, 93, 94, 95, -121, -212, -91, -212,
	122, 123, -77, -77, -77, -77, -77, -77, -77, -77,
	-77, -77, -212, 121, -2, -86, -4, -212, -212, -212,
	-212, -212, -212, -212, -91, -91, -91, -212, -96, -51,
	-212, -216, -83, -212, -216, -83, -216, -83, -216, -212,
	-216, -83, -216, -83, -216, -216, -83, -212, -212, -212,
	-212, -212, -212, -212, -88, -212, -100, -3, -34, -105,
	19, 31, -51, -101, -102, -51, -100, 39, -46, -48,
	-50, 43, 44, 71, 11, -140, -139, 22, -137, 65,
	121, -67, 26, -66, -53, -54, -55, -56, -69, -92,
	-212, -66, -66, -60, -214, 59, 11, 57, -214, 59,
	121, 59, 176, -115, -117, -116, 245, 247, 89, -142,
	-137, 65, 29, 30, -117, 60, 59, -66, -156, -159,
	-161, -160, -162, -157, -158, 199, 200, 115, 203, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 30,
	156, 195, 196, 197, 198, 215, 216, 217, 218, 219,
	220, 221, 222, 182, 201, 274, 183, 184, 185, 186,
	187, 188, 190, 191, 192, 193, 194, -203, -151, 134,
	-203, 81, -203, -66, -66, -151, -151, -151, 168, 168,
	132, 132, 173, -66, 59, 135, -60, 23, 56, -66,
	-203, -203, -144, -143, -135, -151, -127, 65, -51, -151,
	-151, -151, -66, -151, -151, -182, 11, 99, -151, -151,
	11, -123, 11, 99, -51, -128, 97, 56, -149, 179,
	213, 364, 365, 366, -51, -51, -51, -51, -84, 74,
	81, 75, 76, -77, -85, -88, -91, 70, 99, 97,
	98, 83, -77, -77, -77, -77, -77, -77, -77, -77,
	-77, -77, -77, -77, -77, -77, -77, -152, -203, -76,
	-76, -137, -47, 21, 36, -46, -138, -144, -135, -36,
	-213, -213, -100, -46, -46, -51, -51, -93, 65, -46,
	-93, 65, -46, -46, -41, 21, 36, -94, -95, 85,
	-93, -137, -143, -213, -77, -137, -137, -46, -47, -47,
	-46, -46, -104, -213, 9, 99, 59, 18, 59, -103,
	24, 25, -104, -78, -137, 66, 69, -52, 59, 11,
	-50, -66, -139, 106, -144, -108, 162, -66, 30, 59,
	-62, -64, -63, -65, 46, 50, 52, 47, 48, 49,
	53, -147, 22, -53, -3, -212, -146, 162, -145, 22,
	-143, 65, -108, 57, -53, -66, -53, -68, -143, 106,
	-115, -117, 59, 246, 248, 249, 56, 77, -51, -168,
	114, -188, -189, -190, -138, 65, 66, -177, -178, -179,
	-191, 148, -196, 139, 141, 138, -180, 149, 133, 28,
	60, -173, 74, 81, -169, 227, -163, 58, -163, -163,
	-163, -163, -167, 202, -167, -167, -167, 58, 58, -163,
	-163, -163, -171, 58, -171, -171, -172, 58, -172, -141,
	57, -66, -151, 23, -151, -131, 129, 126, 127, -199,
	125, 224, 202, 72, 29, 15, 264, 162, 281, -203,
	163, -66, -66, -66, -66, -66, 129, 126, -66, -66,
	-66, -151, -66, -66, -127, -143, -143, 65, -66, -137,
	74, 75, 76, -85, -77, -77, -77, -45, 157, 80,
	-213, -213, -46, -46, -212, 121, -5, -104, -213, -213,
	59, 57, 22, 11, 11, -213, 11, 11, -213, -213,
	-46, -97, -95, 87, -51, -213, 121, -213, 59, 59,
	-213, -213, -213, -213, -213, -105, 41, -51, -51, -102,
	-105, -119, 19, 11, 37, 37, -71, 12, -48, -53,
	-50, 121, -75, 30, 37, -3, -212, -212, -111, -114,
	-93, -54, -55, -55, -54, -55, 46, 46, 46, 51,
	46, 51, 46, -63, -143, -213, -213, -3, -70, 54,
	136, 55, -212, -145, -71, -53, -71, -71, 121, -116,
	-118, 250, 247, 253, -203, 65, 59, -190, 89, 58,
	-203, 28, -180, -180, -183, -203, -183, 28, -165, 29,
	74, -170, 228, 66, -167, -167, -168, 30, -168, -168,
	-168, -176, 65, -176, 66, 66, 56, -137, -151, -150,
	-206, 144, 140, 148, 149, 142, 61, 62, 63, 133,
	28, 139, 141, 162, 138, -206, -132, -133, 135, 22,
	133, 28, 162, -205, 57, 168, 224, 168, 135, -151,
	-123, -123, -45, 80, -77, -77, -213, -213, -47, -138,
	-100, -105, -155, 115, 199, 156, 197, 193, 213, 204,
	226, 195, 227, -152, -155, -77, -77, -77, -77, 273,
	-100, 88, -51, 86, -138, -77, -77, 42, -66, -98,
	13, -51, 106, -110, 56, -111, -87, -89, -88, -212,
	-106, -137, -109, -137, -71, 59, 89, -58, -57, 56,
	57, -59, 56, -57, 46, 46, -213, 133, 133, 133,
	-109, -100, -71, 247, 251, 252, -189, -190, -193, -192,
	-137, -196, -183, -183, 58, -166, 56, -77, 60, -168,
	-168, -203, 115, 60, 59, 60, 59, 60, 59, -66,
	-150, -150, -66, -150, -137, -202, 276, -204, -203, -137,
	-137, -137, -66, -127, -127, -77, -213, -104, -213, -163,
	-163, -163, -172, -163, 187, -163, 187, -213, -213, 19,
	19, 19, 19, -212, -44, 269, -51, 59, 59, -99,
	14, 16, 27, -110, 59, -213, -213, 59, 121, -213,
	59, -100, -114, -51, -51, 58, -51, -212, -212, -212,
	-213, -104, 60, 59, -163, -107, -137, -174, 224, 9,
	-167, 65, -167, 66, 66, -151, 26, -201, -200, -138,
	58, 57, -105, -167, -203, -77, -77, -77, -77, -77,
	-104, 65, -77, -77, -51, -86, 28, -89, 37, -3,
	-137, -137, -137, -104, -107, -107, -213, -107, -107, -146,
	-195, -194, 57, 143, 72, -192, 60, 59, -175, 139,
	28, 138, -80, -168, -168, 60, 60, -212, 59, 89,
	-107, -66, -213, -213, -213, -213, -43, 99, 276, -213,
	-213, -213, 9, -87, 121, 60, -213, -213, -213, -70,
	-194, -203, -184, 89, 65, 151, -137, -164, 72, 28,
	28, -197, -198, 162, -200, -190, 60, -213, 274, 53,
	277, -111, -137, 66, -66, 65, -213, 59, -137, -205,
	42, 275, 278, 58, -198, 37, -202, 42, -107, 164,
	276, 60, 165, 277, -208, -209, 56, -212, 278, -209,
	56, 10, 9, -77, 161, -207, 152, 147, 150, 30,
	-207, -213, -213, 146, 29, 74,
}

var yyDef = [...]int{
	30, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 624,
	0, 362, 362, 362, 362, 362, 362, 362, 0, 694,
	677, 0, 0, 0, 0, -2, 328, 329, 330, -2,
	0, 0, 339, 1005, 1005, 0, 0, 1005, 0, 0,
	1003, 48, 49, 345, 346, 347, 1, 3, 0, 366,
	632, 0, 0, -2, 364, 0, 677, 677, 0, 0,
	0, 79, 80, 0, 0, 0, 991, 0, 675, 675,
	675, 695, 696, 699, 700, 31, 32, 33, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 0, 0, 0, 0, 0, 678, 0, 673,
	0, 673, 673, 673, 0, 279, 444, 703, 704, 991,
	0, 0, 0, 319, 0, 1006, 291, 0, 293, 1006,
	0, 1006, 0, 300, 0, 0, 306, 1006, 311, 325,
	326, 313, 327, 0, 334, 337, 0, 352, 0, 869,
	344, 357, 358, 1005, 1005, 361, 34, 495, 454, 0,
	460, 462, 0, 497, 498, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 528,
	529, 530, 609, 610, 611, 612, 613, 614, 615, 616,
	464, 465, 606, 0, 654, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 0, 567,
	567, 567, 567, 567, 567, 567, 567, 0, 0, 0,
	0, 0, 0, 0, -2, -2, 0, 582, 583, 624,
	44, 0, 362, 367, 368, 636, 0, 0, 624, 1004,
	0, 0, -2, -2, 378, 384, 385, 386, 387, 363,
	0, 390, 394, 0, 0, 0, 0, 0, 0, 57,
	59, 444, 63, 0, 979, 658, -2, -2, 0, 0,
	701, 702, -2, 841, -2, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 64, 0, 0, 98,
	0, 96, 0, 1006, 0, 0, 0, 0, 0, 0,
	1006, 1006, 1006, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 278, 0, 280, 1006, 319,
	283, 0, 0, 1006, 1006, 1006, 0, 1006, 1006, 290,
	1007, 1008, 0, 200, 201, 202, 294, 1006, 1006, 296,
	0, 316, 314, 315, 308, 309, 0, 322, 303, 304,
	307, 335, 338, 355, 353, 354, 356, 348, 349, 350,
	351, 0, 359, 360, 0, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 482,
	483, 484, 485, 486, 487, 488, 461, 0, 475, 0,
	0, 0, 517, 518, 519, 520, 521, 522, 523, 524,
	525, 0, 375, 0, 0, 0, 624, 0, 0, 0,
	0, 0, 0, 0, 545, 546, 547, 372, 0, 598,
	0, 551, 559, 0, 552, 560, 553, 561, 554, 0,
	555, 562, 556, 563, 557, 558, 564, 0, 0, 0,
	375, 375, 0, 0, 35, 0, 632, 0, 377, 36,
	0, 0, 633, 625, 626, 629, 632, 0, 399, 388,
	379, 382, 383, 365, 0, 391, 395, 0, 397, 398,
	0, 61, 0, 443, 0, 401, 403, 404, 405, 425,
	0, 427, -2, 0, 0, 0, 55, 56, 0, 0,
	0, 0, 979, 659, 67, 68, 0, 0, 0, 176,
	668, 669, 670, 666, 65, 225, 0, 0, 164, 160,
	104, 105, 106, 153, 108, 153, 153, 153, 153, 173,
	173, 173, 173, 136, 137, 138, 139, 140, 0, 0,
	123, 153, 153, 153, 127, 143, 144, 145, 146, 147,
	148, 149, 150, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 155, 155, 155, 157, 157, 697, 82, 0,
	1006, 0, 1006, 94, 0, 239, 241, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 674, 0, 1006,
	276, 277, 445, 705, 706, 281, 282, 320, 321, 284,
	285, 286, 287, 288, 289, 0, 203, 204, 295, 299,
	0, 319, 0, 0, 301, 302, 0, 0, 0, 336,
	340, 341, 342, 343, 496, 455, 456, 457, 459, 476,
	0, 478, 480, 466, 467, 491, 492, 493, 0, 0,
	0, 0, 489, 471, 0, 502, 503, 504, 505, 506,
	507, 508, 509, 510, 511, 512, 513, 516, 0, 514,
	515, 526, 0, 0, 0, 376, 607, 0, -2, 0,
	494, 653, 632, 0, 0, 0, 0, 499, 609, 0,
	499, 609, 0, 0, 0, 373, 374, 604, 601, 0,
	0, 606, 0, 568, 0, 0, 0, 0, 0, 0,
	0, 0, 636, 45, 637, 0, 0, 0, 0, 628,
	630, 631, 636, 0, 617, 0, 0, 452, 0, 0,
	380, 42, 396, 392, 0, 0, 0, 442, 0, 0,
	0, 0, 0, 0, 432, 0, 0, 435, 0, 0,
	0, 0, 426, 0, 0, 0, 447, 923, 428, 0,
	430, 431, 452, 0, 452, 58, 452, 60, 0, 446,
	660, 66, 0, 0, 71, 72, 661, 662, 663, 664,
	0, 95, 226, 228, 231, 232, 233, 99, 100, 101,
	0, 0, 213, 0, 0, 207, 207, 0, 205, 206,
	97, 167, 165, 0, 162, 161, 107, 0, 173, 173,
	130, 131, 176, 0, 176, 176, 176, 0, 0, 124,
	125, 126, 118, 0, 119, 120, 121, 0, 122, 0,
	0, 1006, 84, 676, 85, 1005, 0, 0, 689, 240,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	0, 86, 244, 246, 245, 249, 0, 0, 0, 271,
	1006, 275, 316, 316, 298, 317, 318, 323, 305, 332,
	477, 479, 481, 468, 489, 472, 0, 469, 0, 0,
	463, 531, 0, 0, 375, 0, 624, 636, 535, 536,
	0, 0, 0, 0, 0, 575, 0, 0, 576, 0,
	624, 0, 602, 0, 0, 550, 0, 569, 0, 0,
	570, 571, 572, 573, 574, 38, 0, 634, 635, 627,
	37, 0, 671, 672, 618, 619, 620, 0, 389, 400,
	381, 0, 647, 0, 0, 640, 0, 0, 452, 655,
	0, 402, 421, 423, 0, 418, 433, 434, 436, 0,
	438, 0, 440, 441, 406, 407, 408, 0, 409, 0,
	0, 0, 0, 429, 624, 452, 53, 54, 0, 69,
	70, 0, 0, 76, 177, 178, 0, 229, 0, 0,
	0, 195, 207, 207, 198, 208, 199, 0, 169, 0,
	166, 103, 163, 0, 176, 176, 132, 0, 133, 134,
	135, 0, 151, 0, 0, 0, 0, 698, 83, 234,
	1005, 251, 252, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 1005, 0, 1005, 690, 691,
	692, 693, 0, 89, 0, 0, 0, 0, 0, 274,
	319, 319, 470, 0, 490, 473, 532, 533, 0, 608,
	632, 40, 0, 153, 153, 587, 153, 157, 590, 153,
	592, 153, 595, 0, 0, 0, 0, 0, 0, 0,
	599, 549, 605, 0, 607, 0, 0, 638, 39, 622,
	0, 453, 393, 46, 0, 647, 639, 649, 651, 0,
	0, 643, 0, 413, 624, 0, 0, 415, 422, 0,
	0, 416, 0, 417, 437, 439, -2, 0, 0, 0,
	0, 632, 52, 73, 74, 75, 227, 230, 0, 209,
	153, 212, 196, 197, 0, 171, 0, 168, 154, 128,
	129, 174, 175, 173, 0, 173, 0, 158, 0, 1006,
	235, 236, 237, 238, 0, 243, 0, 87, 88, 0,
	0, 248, 272, 292, 297, 474, 534, 636, 537, 584,
	173, 588, 589, 591, 593, 594, 596, 539, 538, 0,
	0, 0, 0, 0, 632, 0, 603, 0, 0, 43,
	0, 0, 0, 47, 0, 652, 0, 0, 0, 62,
	0, 632, 656, 657, 419, 0, 424, 0, 0, 0,
	427, 51, 187, 0, 211, 0, 411, 179, 172, 0,
	176, 152, 176, 0, 0, 81, 0, 90, 91, 0,
	0, 0, 41, 585, 586, 0, 0, 0, 0, 577,
	0, 600, 0, 0, 623, 621, 0, 650, 0, 642,
	645, 644, 414, 50, 0, 0, 449, 0, 0, 447,
	186, 188, 0, 193, 0, 210, 0, 0, 184, 0,
	181, 183, 170, 141, 142, 156, 159, 0, 0, 0,
	0, 250, 540, 542, 541, 543, 0, 0, 0, 548,
	565, 566, 0, 641, 0, 420, 448, 450, 451, 410,
	189, 190, 0, 194, 192, 0, 412, 102, 0, 180,
	182, 0, 266, 0, 92, 93, 86, 544, 0, 0,
	0, 648, 646, 191, 0, 185, 265, 0, 0, 89,
	578, 0, 581, 0, 267, 0, 247, 579, 0, 0,
	0, 214, 0, 0, 215, 216, 0, 0, 580, 217,
	0, 0, 0, 0, 0, 218, 220, 221, 0, 0,
	219, 268, 269, 222, 223, 224,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 109, 101, 3,
	58, 60, 106, 104, 59, 105, 121, 107, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 367,
	90, 89, 91, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 111, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 112,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 102, 103, 108, 110, 113, 114, 115, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:341
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:346
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:347
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:351
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:380
		{
			setParseTree(yylex, nil)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:386
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:400
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:406
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:412
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:420
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:424
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:428
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:451
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:459
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:465
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:473
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:479
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:483
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:490
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:502
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:514
		{
			yyVAL.str = InsertStr
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:518
		{
			yyVAL.str = ReplaceStr
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:524
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:530
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:534
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:538
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:542
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:548
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:552
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:556
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:562
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:566
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:571
		{
			yyVAL.partitions = nil
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:575
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:581
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:587
		{
			yyVAL.statement = &StartTransaction{Comments: Comments(yyDollar[2].bytes2)}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:591
		{
			yyVAL.statement = &StartTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:597
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:601
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:607
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:611
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:617
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:621
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:625
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:631
		{
			yyVAL.str = RepeatableRead
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:635
		{
			yyVAL.str = ReadCommitted
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:639
		{
			yyVAL.str = ReadUncommitted
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:643
		{
			yyVAL.str = Serializable
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:649
		{
			yyVAL.str = SessionStr
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:653
		{
			yyVAL.str = GlobalStr
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:659
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:664
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 81:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:670
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:675
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:679
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:683
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:687
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:692
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:696
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:702
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:707
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:712
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:723
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:729
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:735
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:742
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:749
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:753
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:764
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:768
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:772
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 102:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:778
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 142:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1000
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1005
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1010
		{
			yyVAL.sqlVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1014
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1019
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1023
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1031
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1035
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1041
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1049
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1053
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1068
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1072
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1076
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1081
		{
			yyVAL.optVal = nil
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1085
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1090
		{
			yyVAL.optVal = nil
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1094
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1099
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1103
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1108
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1112
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1116
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1121
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1125
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1134
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.colKeyOpt = colKey
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1146
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1155
		{
			yyVAL.sqlVal = nil
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1159
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1165
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1169
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1175
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1179
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1185
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1189
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1194
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1200
		{
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1210
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1214
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1218
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1222
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1226
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1232
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1247
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1251
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1261
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1266
		{
			yyVAL.str = ""
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1270
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1276
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1280
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1286
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1292
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1296
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 214:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1303
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 215:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1307
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 216:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1311
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 217:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1315
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1321
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1327
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1333
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1337
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1341
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1345
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1349
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1354
		{
			yyVAL.str = ""
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1358
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1362
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1370
		{
			yyVAL.str = yyDollar[1].str
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1374
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1378
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1384
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1388
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1392
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1410
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1415
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1420
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1436
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1448
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1462
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1489
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1493
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 265:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1522
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1528
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1532
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 268:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1538
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 269:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1542
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1548
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1554
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1558
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1566
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1574
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1579
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1591
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1597
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1606
		{
			yyVAL.statement = &OtherRead{}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1617
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1622
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1627
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1632
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1636
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1640
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1652
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1656
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1660
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1669
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1673
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1677
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1681
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1686
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1704
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1708
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1717
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1721
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1725
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1739
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1745
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1755
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.str = "extended "
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1765
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1769
		{
			yyVAL.str = "full "
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1775
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1779
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1785
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1789
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1793
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1799
		{
			yyVAL.showFilter = nil
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1803
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1807
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1813
		{
			yyVAL.showFilter = nil
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1817
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1823
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1827
		{
			yyVAL.str = SessionStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1831
		{
			yyVAL.str = GlobalStr
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1837
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1841
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1847
		{
			yyVAL.statement = &Begin{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.statement = &Commit{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.statement = &Rollback{}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1863
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1868
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1870
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1873
		{
			yyVAL.empty = struct{}{}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1875
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1880
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1886
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1891
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1895
		{
			yyVAL.str = JSONStr
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1899
		{
			yyVAL.str = TreeStr
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1903
		{
			yyVAL.str = VitessStr
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1907
		{
			yyVAL.str = TraditionalStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.str = AnalyzeStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1917
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1921
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1925
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1935
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1939
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1948
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1952
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1956
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1962
		{
			yyVAL.statement = &OtherRead{}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1966
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1972
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1976
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1980
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1984
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1990
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1994
		{
			setAllowComments(yylex, true)
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1998
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2004
		{
			yyVAL.bytes2 = nil
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2008
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2014
		{
			yyVAL.str = UnionStr
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2018
		{
			yyVAL.str = UnionAllStr
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2022
		{
			yyVAL.str = UnionDistinctStr
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2027
		{
			yyVAL.str = ""
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2035
		{
			yyVAL.str = SQLCacheStr
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2040
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.str = DistinctStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.str = DistinctStr
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2053
		{
			yyVAL.selectExprs = nil
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2057
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2062
		{
			yyVAL.strs = nil
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2066
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2070
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2074
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2078
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2084
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2088
		{
			yyVAL.str = SQLCacheStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2092
		{
			yyVAL.str = DistinctStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2096
		{
			yyVAL.str = DistinctStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2100
		{
			yyVAL.str = StraightJoinHint
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2114
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2120
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2124
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2128
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2132
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2137
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2141
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2145
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2157
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2161
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2167
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2171
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2181
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2185
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2189
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2195
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2201
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 410:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2205
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2211
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2215
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2221
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2225
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2238
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2242
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2246
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2256
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2258
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2262
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2264
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2268
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2270
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2273
		{
			yyVAL.empty = struct{}{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2275
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2278
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2282
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2286
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2293
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2299
		{
			yyVAL.str = JoinStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2303
		{
			yyVAL.str = JoinStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2307
		{
			yyVAL.str = JoinStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2313
		{
			yyVAL.str = StraightJoinStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2319
		{
			yyVAL.str = LeftJoinStr
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2323
		{
			yyVAL.str = LeftJoinStr
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2327
		{
			yyVAL.str = RightJoinStr
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2331
		{
			yyVAL.str = RightJoinStr
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2337
		{
			yyVAL.str = NaturalJoinStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2341
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2351
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2355
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2361
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2365
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2371
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2376
		{
			yyVAL.indexHints = nil
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2380
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2384
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2388
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2392
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2397
		{
			yyVAL.expr = nil
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2401
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2441
		{
			yyVAL.str = ""
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2451
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2455
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2503
		{
			yyVAL.str = IsNullStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			yyVAL.str = IsNotNullStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2511
		{
			yyVAL.str = IsTrueStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2515
		{
			yyVAL.str = IsNotTrueStr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2519
		{
			yyVAL.str = IsFalseStr
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.str = IsNotFalseStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2529
		{
			yyVAL.str = EqualStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2533
		{
			yyVAL.str = LessThanStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2537
		{
			yyVAL.str = GreaterThanStr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2541
		{
			yyVAL.str = LessEqualStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2545
		{
			yyVAL.str = GreaterEqualStr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2549
		{
			yyVAL.str = NotEqualStr
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2553
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = nil
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2568
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2572
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2576
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2582
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2588
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2592
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2698
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2706
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2728
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2750
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 540:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2788
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 541:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2792
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 542:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2800
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 544:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = &SubqueryFuncExpr{FuncName: "any", Subquery: yyDollar[2].subquery}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = &SubqueryFuncExpr{FuncName: "some", Subquery: yyDollar[2].subquery}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = &SubqueryFuncExpr{FuncName: "all", Subquery: yyDollar[2].subquery}
		}
	case 548:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2851
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2867
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2885
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2904
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 566:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2908
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2928
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2932
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2936
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2940
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2944
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2948
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2952
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2958
		{
			yyVAL.str = ""
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2962
		{
			yyVAL.str = BooleanModeStr
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2966
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 580:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2970
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2974
		{
			yyVAL.str = QueryExpansionStr
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2980
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2984
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2990
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2994
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2998
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3006
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3010
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3020
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3024
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3028
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3032
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3036
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3040
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3045
		{
			yyVAL.expr = nil
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3049
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3054
		{
			yyVAL.str = string("")
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3058
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3064
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3068
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3074
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3079
		{
			yyVAL.expr = nil
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3083
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3089
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3093
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3097
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3103
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3107
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3115
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3119
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3123
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.expr = &NullVal{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3146
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3150
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3155
		{
			yyVAL.exprs = nil
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3159
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3164
		{
			yyVAL.expr = nil
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3168
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3173
		{
			yyVAL.orderBy = nil
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3177
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3187
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3193
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3198
		{
			yyVAL.str = AscScr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3202
		{
			yyVAL.str = AscScr
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3206
		{
			yyVAL.str = DescScr
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3211
		{
			yyVAL.limit = nil
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3215
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3219
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3223
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3228
		{
			yyVAL.str = ""
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3232
		{
			yyVAL.str = ForUpdateStr
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3236
		{
			yyVAL.str = ShareModeStr
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3249
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3257
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3261
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3267
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3271
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3275
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3279
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3284
		{
			yyVAL.updateExprs = nil
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3288
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3294
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3298
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3304
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3308
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3314
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3320
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3330
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3334
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3340
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3346
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3350
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3355
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3361
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3365
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3369
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3373
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3380
		{
			yyVAL.bytes = []byte("charset")
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3387
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3391
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3395
		{
			yyVAL.expr = &Default{}
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3404
		{
			yyVAL.byt = 0
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3406
		{
			yyVAL.byt = 1
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3409
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3411
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3414
		{
			yyVAL.str = ""
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3416
		{
			yyVAL.str = IgnoreStr
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3420
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3422
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3424
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3426
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3428
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3430
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3432
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3434
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3436
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3438
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3441
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3443
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3445
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3451
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3454
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3456
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3458
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3461
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3463
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3467
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3471
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3478
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3484
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3488
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3495
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3817
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3826
		{
			decNesting(yylex)
		}
	case 1005:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3831
		{
			skipToEnd(yylex)
		}
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3836
		{
			skipToEnd(yylex)
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3840
		{
			skipToEnd(yylex)
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3844
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
